{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 71
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 506,
     "status": "ok",
     "timestamp": 1589008914056,
     "user": {
      "displayName": "Miranda Zhou",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjCjPyWdI9eqQrayg3ZrLT3p7BUfARIGayRDkGu=s64",
      "userId": "05223748671447807698"
     },
     "user_tz": 420
    },
    "id": "POlOQ-yjz4XO",
    "outputId": "86c90b0b-8371-4cb8-cc53-6a57df7f8626"
   },
   "outputs": [],
   "source": [
    "import time\n",
    "import math\n",
    "import os\n",
    "import progressbar\n",
    "from statistics import mean \n",
    "from matplotlib import pyplot as plt\n",
    "import random\n",
    "random.sample(range(100), 10)\n",
    "from xgboost import XGBClassifier\n",
    "import xgboost as xgb\n",
    "\n",
    "from timeit import default_timer as timer\n",
    "import os.path\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "from pprint import pprint\n",
    "import io\n",
    "import requests\n",
    "from sklearn import metrics, tree, svm\n",
    "from sklearn.ensemble import ExtraTreesClassifier, GradientBoostingClassifier, RandomForestRegressor, RandomForestClassifier \n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import roc_curve, roc_auc_score, confusion_matrix, auc\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.naive_bayes import GaussianNB, MultinomialNB\n",
    "from sklearn.linear_model import Ridge, Lasso, LinearRegression, LogisticRegression, LassoCV\n",
    "from sklearn.model_selection  import train_test_split, cross_val_score, cross_val_predict, KFold, GridSearchCV, RandomizedSearchCV\n",
    "from sklearn.preprocessing import MinMaxScaler, MaxAbsScaler, StandardScaler, RobustScaler, PowerTransformer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "QURxjiw3Tcc6"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\Adam\\\\Desktop'"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.chdir('C:\\\\Users\\\\Adam\\\\Desktop') #Go to where data is stored\n",
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2=pd.read_csv('assistments.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25405"
      ]
     },
     "execution_count": 250,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 490
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 321,
     "status": "ok",
     "timestamp": 1589008917308,
     "user": {
      "displayName": "Miranda Zhou",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjCjPyWdI9eqQrayg3ZrLT3p7BUfARIGayRDkGu=s64",
      "userId": "05223748671447807698"
     },
     "user_tz": 420
    },
    "id": "_YbCPI5mz4XV",
    "outputId": "469887fc-0430-4b1d-be34-59bbcfd4437b"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Adam\\Anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3063: DtypeWarning: Columns (17) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>problemlog_id</th>\n",
       "      <th>assignment_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>ARRS</th>\n",
       "      <th>assistment_id</th>\n",
       "      <th>problem_id</th>\n",
       "      <th>sequence_opp</th>\n",
       "      <th>assignment_opp</th>\n",
       "      <th>...</th>\n",
       "      <th>first_response_time</th>\n",
       "      <th>overlap_time</th>\n",
       "      <th>cluster</th>\n",
       "      <th>pretest</th>\n",
       "      <th>posttest</th>\n",
       "      <th>avg_initial_three_correctness</th>\n",
       "      <th>avg_initial_#problems_to_master</th>\n",
       "      <th>avg_first_reassess</th>\n",
       "      <th>slip</th>\n",
       "      <th>guess</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>40790855</td>\n",
       "      <td>297282</td>\n",
       "      <td>5959</td>\n",
       "      <td>75063</td>\n",
       "      <td>0</td>\n",
       "      <td>34310</td>\n",
       "      <td>53621</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>13260</td>\n",
       "      <td>13353</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.671795</td>\n",
       "      <td>6.323529</td>\n",
       "      <td>0.684211</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>40785896</td>\n",
       "      <td>297283</td>\n",
       "      <td>5959</td>\n",
       "      <td>82047</td>\n",
       "      <td>1</td>\n",
       "      <td>34310</td>\n",
       "      <td>53621</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>5398</td>\n",
       "      <td>5398</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.650794</td>\n",
       "      <td>7.676471</td>\n",
       "      <td>0.761905</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>40794425</td>\n",
       "      <td>297283</td>\n",
       "      <td>5959</td>\n",
       "      <td>82056</td>\n",
       "      <td>1</td>\n",
       "      <td>34310</td>\n",
       "      <td>53621</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>25821</td>\n",
       "      <td>25843</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.697917</td>\n",
       "      <td>4.588235</td>\n",
       "      <td>0.782609</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>41001137</td>\n",
       "      <td>301372</td>\n",
       "      <td>5959</td>\n",
       "      <td>82285</td>\n",
       "      <td>0</td>\n",
       "      <td>34310</td>\n",
       "      <td>53621</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>76</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.720430</td>\n",
       "      <td>5.911765</td>\n",
       "      <td>0.736842</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>40778190</td>\n",
       "      <td>297300</td>\n",
       "      <td>5959</td>\n",
       "      <td>82405</td>\n",
       "      <td>1</td>\n",
       "      <td>34310</td>\n",
       "      <td>53621</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>6511</td>\n",
       "      <td>6550</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.463542</td>\n",
       "      <td>7.470588</td>\n",
       "      <td>0.562500</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9117</th>\n",
       "      <td>9117</td>\n",
       "      <td>40865995</td>\n",
       "      <td>299328</td>\n",
       "      <td>6917</td>\n",
       "      <td>82627</td>\n",
       "      <td>0</td>\n",
       "      <td>48423</td>\n",
       "      <td>87036</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>23352</td>\n",
       "      <td>23352</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.815385</td>\n",
       "      <td>5.382353</td>\n",
       "      <td>0.944444</td>\n",
       "      <td>0.184177</td>\n",
       "      <td>0.490720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9118</th>\n",
       "      <td>9118</td>\n",
       "      <td>40671741</td>\n",
       "      <td>293963</td>\n",
       "      <td>6876</td>\n",
       "      <td>92241</td>\n",
       "      <td>0</td>\n",
       "      <td>47283</td>\n",
       "      <td>85801</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>17073</td>\n",
       "      <td>17073</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.798942</td>\n",
       "      <td>5.264706</td>\n",
       "      <td>0.789474</td>\n",
       "      <td>0.240076</td>\n",
       "      <td>0.494229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9119</th>\n",
       "      <td>9119</td>\n",
       "      <td>41258826</td>\n",
       "      <td>305325</td>\n",
       "      <td>6915</td>\n",
       "      <td>92241</td>\n",
       "      <td>0</td>\n",
       "      <td>48325</td>\n",
       "      <td>86938</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.798942</td>\n",
       "      <td>5.264706</td>\n",
       "      <td>0.789474</td>\n",
       "      <td>0.184036</td>\n",
       "      <td>0.549495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9120</th>\n",
       "      <td>9120</td>\n",
       "      <td>41322736</td>\n",
       "      <td>306264</td>\n",
       "      <td>6915</td>\n",
       "      <td>93241</td>\n",
       "      <td>0</td>\n",
       "      <td>48378</td>\n",
       "      <td>86991</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.630769</td>\n",
       "      <td>5.470588</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.184036</td>\n",
       "      <td>0.549495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9121</th>\n",
       "      <td>9121</td>\n",
       "      <td>40897987</td>\n",
       "      <td>299468</td>\n",
       "      <td>6928</td>\n",
       "      <td>93241</td>\n",
       "      <td>1</td>\n",
       "      <td>49389</td>\n",
       "      <td>88074</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>22210</td>\n",
       "      <td>22210</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.630769</td>\n",
       "      <td>5.470588</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.176472</td>\n",
       "      <td>0.732615</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9122 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Unnamed: 0  problemlog_id  assignment_id  sequence_id  user_id  ARRS  \\\n",
       "0              0       40790855         297282         5959    75063     0   \n",
       "1              1       40785896         297283         5959    82047     1   \n",
       "2              2       40794425         297283         5959    82056     1   \n",
       "3              3       41001137         301372         5959    82285     0   \n",
       "4              4       40778190         297300         5959    82405     1   \n",
       "...          ...            ...            ...          ...      ...   ...   \n",
       "9117        9117       40865995         299328         6917    82627     0   \n",
       "9118        9118       40671741         293963         6876    92241     0   \n",
       "9119        9119       41258826         305325         6915    92241     0   \n",
       "9120        9120       41322736         306264         6915    93241     0   \n",
       "9121        9121       40897987         299468         6928    93241     1   \n",
       "\n",
       "      assistment_id  problem_id  sequence_opp  assignment_opp  ...  \\\n",
       "0             34310       53621             1               1  ...   \n",
       "1             34310       53621             2               2  ...   \n",
       "2             34310       53621             1               1  ...   \n",
       "3             34310       53621             4               1  ...   \n",
       "4             34310       53621             1               1  ...   \n",
       "...             ...         ...           ...             ...  ...   \n",
       "9117          48423       87036             8               4  ...   \n",
       "9118          47283       85801             1               1  ...   \n",
       "9119          48325       86938             2               1  ...   \n",
       "9120          48378       86991             5               1  ...   \n",
       "9121          49389       88074             2               2  ...   \n",
       "\n",
       "      first_response_time  overlap_time  cluster  pretest  posttest  \\\n",
       "0                   13260         13353        0        0         1   \n",
       "1                    5398          5398        0        1         1   \n",
       "2                   25821         25843        0        0         1   \n",
       "3                       0            76        1        1         0   \n",
       "4                    6511          6550        0        0         0   \n",
       "...                   ...           ...      ...      ...       ...   \n",
       "9117                23352         23352        1        0         1   \n",
       "9118                17073         17073        0        1         1   \n",
       "9119                    2             2        1        1         1   \n",
       "9120                    2             4        1        0         1   \n",
       "9121                22210         22210        0        0         0   \n",
       "\n",
       "      avg_initial_three_correctness  avg_initial_#problems_to_master  \\\n",
       "0                          0.671795                         6.323529   \n",
       "1                          0.650794                         7.676471   \n",
       "2                          0.697917                         4.588235   \n",
       "3                          0.720430                         5.911765   \n",
       "4                          0.463542                         7.470588   \n",
       "...                             ...                              ...   \n",
       "9117                       0.815385                         5.382353   \n",
       "9118                       0.798942                         5.264706   \n",
       "9119                       0.798942                         5.264706   \n",
       "9120                       0.630769                         5.470588   \n",
       "9121                       0.630769                         5.470588   \n",
       "\n",
       "      avg_first_reassess      slip     guess  \n",
       "0               0.684211  0.087209  0.590881  \n",
       "1               0.761905  0.087209  0.590881  \n",
       "2               0.782609  0.087209  0.590881  \n",
       "3               0.736842  0.087209  0.590881  \n",
       "4               0.562500  0.087209  0.590881  \n",
       "...                  ...       ...       ...  \n",
       "9117            0.944444  0.184177  0.490720  \n",
       "9118            0.789474  0.240076  0.494229  \n",
       "9119            0.789474  0.184036  0.549495  \n",
       "9120            0.666667  0.184036  0.549495  \n",
       "9121            0.666667  0.176472  0.732615  \n",
       "\n",
       "[9122 rows x 24 columns]"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_csv('assistmentsgs.csv') #file output by Bijal with Guess and Slip\n",
    "skill=pd.read_csv('skill_builder_data_corrected.csv', encoding= 'unicode_escape')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.12862924801374132\n",
      "0.027209021775709274\n",
      "0.3248852643671773\n",
      "0.8126145686697015\n"
     ]
    }
   ],
   "source": [
    "print(min(df['guess']))\n",
    "print(min(df['slip']))\n",
    "print(max(df['slip']))\n",
    "print(max(df['guess']))\n",
    "df.describe()\n",
    "unique_guess=df['guess'].unique()\n",
    "unique_slip=df['slip'].unique()\n",
    "\n",
    "unique_guess.sort()\n",
    "unique_slip.sort()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.12862925, 0.1400642 , 0.18862925, 0.21714677, 0.2200642 ,\n",
       "       0.2400642 , 0.29714677, 0.31183337, 0.31246561, 0.34134721,\n",
       "       0.3648244 , 0.37465058, 0.38944733, 0.3907205 , 0.39183337,\n",
       "       0.40134721, 0.41183337, 0.43422866, 0.44944733, 0.4707205 ,\n",
       "       0.48944733, 0.48949453, 0.4907205 , 0.49422866, 0.53422866,\n",
       "       0.54949453, 0.5507205 , 0.56262389, 0.56262419, 0.5626254 ,\n",
       "       0.57676582, 0.58381676, 0.58381679, 0.58381687, 0.58381719,\n",
       "       0.58384395, 0.58392563, 0.58734893, 0.58734898, 0.58734914,\n",
       "       0.58734978, 0.58911501, 0.58911501, 0.58911501, 0.58999805,\n",
       "       0.58999805, 0.59001182, 0.59043957, 0.59043957, 0.59043968,\n",
       "       0.59066033, 0.59066033, 0.59066033, 0.59077071, 0.59077114,\n",
       "       0.59080829, 0.5908259 , 0.59085349, 0.59085349, 0.59086236,\n",
       "       0.59086241, 0.59086291, 0.59086729, 0.59087419, 0.59087419,\n",
       "       0.59087669, 0.59087698, 0.59087764, 0.59087764, 0.59087764,\n",
       "       0.59087936, 0.59087936, 0.59087936, 0.59087993, 0.59087999,\n",
       "       0.59088023, 0.59088066, 0.5908808 , 0.5908808 , 0.59088087,\n",
       "       0.59088098, 0.59088102, 0.59088103, 0.59088106, 0.59088107,\n",
       "       0.59088107, 0.59088107, 0.59088107, 0.59088108, 0.59088108,\n",
       "       0.59088108, 0.59088108, 0.59088109, 0.59088109, 0.59088109,\n",
       "       0.59088109, 0.59088109, 0.59088109, 0.59088109, 0.59088109,\n",
       "       0.59088109, 0.59088109, 0.59088109, 0.59088109, 0.59088109,\n",
       "       0.59088109, 0.59088109, 0.59088109, 0.59088109, 0.59088109,\n",
       "       0.59088109, 0.59088109, 0.59338464, 0.63088109, 0.65088109,\n",
       "       0.65261457, 0.73261457, 0.81261457])"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "unique_guess"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 71
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 4929,
     "status": "ok",
     "timestamp": 1589008926213,
     "user": {
      "displayName": "Miranda Zhou",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjCjPyWdI9eqQrayg3ZrLT3p7BUfARIGayRDkGu=s64",
      "userId": "05223748671447807698"
     },
     "user_tz": 420
    },
    "id": "puhWa0h_wWex",
    "outputId": "cc606393-5294-4c12-86f8-ad72b791d79e"
   },
   "outputs": [],
   "source": [
    "# url = \"https://drive.google.com/uc?export=download&id=0B3f_gAH-MpBmUmNJQ3RycGpJM0k\"\n",
    "# s = requests.get(url).content\n",
    "# skill = pd.read_csv(io.StringIO(s.decode('latin')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 309
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 388,
     "status": "ok",
     "timestamp": 1589008930746,
     "user": {
      "displayName": "Miranda Zhou",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjCjPyWdI9eqQrayg3ZrLT3p7BUfARIGayRDkGu=s64",
      "userId": "05223748671447807698"
     },
     "user_tz": 420
    },
    "id": "DVBVi5Mjw994",
    "outputId": "698bfc09-cdd7-411a-d66c-c9e3916f2353"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>assignment_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>assistment_id</th>\n",
       "      <th>problem_id</th>\n",
       "      <th>original</th>\n",
       "      <th>correct</th>\n",
       "      <th>attempt_count</th>\n",
       "      <th>ms_first_response</th>\n",
       "      <th>tutor_mode</th>\n",
       "      <th>...</th>\n",
       "      <th>hint_count</th>\n",
       "      <th>hint_total</th>\n",
       "      <th>overlap_time</th>\n",
       "      <th>template_id</th>\n",
       "      <th>answer_id</th>\n",
       "      <th>answer_text</th>\n",
       "      <th>first_action</th>\n",
       "      <th>bottom_hint</th>\n",
       "      <th>opportunity</th>\n",
       "      <th>opportunity_original</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>33022537.0</td>\n",
       "      <td>277618</td>\n",
       "      <td>64525</td>\n",
       "      <td>33139</td>\n",
       "      <td>51424</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>32454.0</td>\n",
       "      <td>tutor</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>32454.0</td>\n",
       "      <td>30799.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>26</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>33022709.0</td>\n",
       "      <td>277618</td>\n",
       "      <td>64525</td>\n",
       "      <td>33150</td>\n",
       "      <td>51435</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4922.0</td>\n",
       "      <td>tutor</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4922.0</td>\n",
       "      <td>30799.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>55</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>35450204.0</td>\n",
       "      <td>220674</td>\n",
       "      <td>70363</td>\n",
       "      <td>33159</td>\n",
       "      <td>51444</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>25390.0</td>\n",
       "      <td>tutor</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>30799.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>88</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>35450295.0</td>\n",
       "      <td>220674</td>\n",
       "      <td>70363</td>\n",
       "      <td>33110</td>\n",
       "      <td>51395</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4859.0</td>\n",
       "      <td>tutor</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4859.0</td>\n",
       "      <td>30059.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>35450311.0</td>\n",
       "      <td>220674</td>\n",
       "      <td>70363</td>\n",
       "      <td>33196</td>\n",
       "      <td>51481</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>19813.0</td>\n",
       "      <td>tutor</td>\n",
       "      <td>...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>124564.0</td>\n",
       "      <td>30060.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>65</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     order_id  assignment_id  user_id  assistment_id  problem_id  original  \\\n",
       "0  33022537.0         277618    64525          33139       51424       1.0   \n",
       "1  33022709.0         277618    64525          33150       51435       1.0   \n",
       "2  35450204.0         220674    70363          33159       51444       1.0   \n",
       "3  35450295.0         220674    70363          33110       51395       1.0   \n",
       "4  35450311.0         220674    70363          33196       51481       1.0   \n",
       "\n",
       "   correct  attempt_count  ms_first_response tutor_mode  ... hint_count  \\\n",
       "0      1.0            1.0            32454.0      tutor  ...        0.0   \n",
       "1      1.0            1.0             4922.0      tutor  ...        0.0   \n",
       "2      0.0            2.0            25390.0      tutor  ...        0.0   \n",
       "3      1.0            1.0             4859.0      tutor  ...        0.0   \n",
       "4      0.0           14.0            19813.0      tutor  ...        3.0   \n",
       "\n",
       "   hint_total  overlap_time  template_id answer_id  answer_text  first_action  \\\n",
       "0         3.0       32454.0      30799.0       NaN           26           0.0   \n",
       "1         3.0        4922.0      30799.0       NaN           55           0.0   \n",
       "2         3.0       42000.0      30799.0       NaN           88           0.0   \n",
       "3         3.0        4859.0      30059.0       NaN           41           0.0   \n",
       "4         4.0      124564.0      30060.0       NaN           65           0.0   \n",
       "\n",
       "  bottom_hint  opportunity  opportunity_original  \n",
       "0         NaN          1.0                   1.0  \n",
       "1         NaN          2.0                   2.0  \n",
       "2         NaN          1.0                   1.0  \n",
       "3         NaN          2.0                   2.0  \n",
       "4         0.0          3.0                   3.0  \n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "skill.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "algebra          318771\n",
       "choose_1          46662\n",
       "fill_in_1         36210\n",
       "choose_n            105\n",
       "open_response         8\n",
       "Name: answer_type, dtype: int64"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "skill['answer_type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['order_id', 'assignment_id', 'user_id', 'assistment_id', 'problem_id',\n",
       "       'original', 'correct', 'attempt_count', 'ms_first_response',\n",
       "       'tutor_mode', 'answer_type', 'sequence_id', 'student_class_id',\n",
       "       'position', 'type', 'base_sequence_id', 'skill_id', 'skill_name',\n",
       "       'teacher_id', 'school_id', 'hint_count', 'hint_total', 'overlap_time',\n",
       "       'template_id', 'answer_id', 'answer_text', 'first_action',\n",
       "       'bottom_hint', 'opportunity', 'opportunity_original'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "skill.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(401757, 30)"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "skill.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 691
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 553,
     "status": "ok",
     "timestamp": 1589008937998,
     "user": {
      "displayName": "Miranda Zhou",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjCjPyWdI9eqQrayg3ZrLT3p7BUfARIGayRDkGu=s64",
      "userId": "05223748671447807698"
     },
     "user_tz": 420
    },
    "id": "m6dKs96AxDMF",
    "outputId": "5907cf29-51a7-467c-992a-8445fa3fdafb"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>problemlog_id</th>\n",
       "      <th>assignment_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>ARRS</th>\n",
       "      <th>assistment_id</th>\n",
       "      <th>sequence_opp</th>\n",
       "      <th>assignment_opp</th>\n",
       "      <th>ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)</th>\n",
       "      <th>...</th>\n",
       "      <th>pretest</th>\n",
       "      <th>posttest</th>\n",
       "      <th>avg_initial_three_correctness</th>\n",
       "      <th>avg_initial_#problems_to_master</th>\n",
       "      <th>avg_first_reassess</th>\n",
       "      <th>slip</th>\n",
       "      <th>guess</th>\n",
       "      <th>base_sequence_id</th>\n",
       "      <th>skill_id</th>\n",
       "      <th>skill_name</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>problem_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>53621</th>\n",
       "      <td>0</td>\n",
       "      <td>40790855</td>\n",
       "      <td>297282</td>\n",
       "      <td>5959</td>\n",
       "      <td>75063</td>\n",
       "      <td>0</td>\n",
       "      <td>34310</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.671795</td>\n",
       "      <td>6.323529</td>\n",
       "      <td>0.684211</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>5959.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>Addition Whole Numbers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53621</th>\n",
       "      <td>0</td>\n",
       "      <td>40790855</td>\n",
       "      <td>297282</td>\n",
       "      <td>5959</td>\n",
       "      <td>75063</td>\n",
       "      <td>0</td>\n",
       "      <td>34310</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.671795</td>\n",
       "      <td>6.323529</td>\n",
       "      <td>0.684211</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>5959.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>Addition Whole Numbers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53621</th>\n",
       "      <td>0</td>\n",
       "      <td>40790855</td>\n",
       "      <td>297282</td>\n",
       "      <td>5959</td>\n",
       "      <td>75063</td>\n",
       "      <td>0</td>\n",
       "      <td>34310</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.671795</td>\n",
       "      <td>6.323529</td>\n",
       "      <td>0.684211</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>5959.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>Addition Whole Numbers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53621</th>\n",
       "      <td>0</td>\n",
       "      <td>40790855</td>\n",
       "      <td>297282</td>\n",
       "      <td>5959</td>\n",
       "      <td>75063</td>\n",
       "      <td>0</td>\n",
       "      <td>34310</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.671795</td>\n",
       "      <td>6.323529</td>\n",
       "      <td>0.684211</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>5959.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>Addition Whole Numbers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53621</th>\n",
       "      <td>0</td>\n",
       "      <td>40790855</td>\n",
       "      <td>297282</td>\n",
       "      <td>5959</td>\n",
       "      <td>75063</td>\n",
       "      <td>0</td>\n",
       "      <td>34310</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.671795</td>\n",
       "      <td>6.323529</td>\n",
       "      <td>0.684211</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>5959.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>Addition Whole Numbers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88074</th>\n",
       "      <td>9121</td>\n",
       "      <td>40897987</td>\n",
       "      <td>299468</td>\n",
       "      <td>6928</td>\n",
       "      <td>93241</td>\n",
       "      <td>1</td>\n",
       "      <td>49389</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.630769</td>\n",
       "      <td>5.470588</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.176472</td>\n",
       "      <td>0.732615</td>\n",
       "      <td>6928.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>Prime Number</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88074</th>\n",
       "      <td>9121</td>\n",
       "      <td>40897987</td>\n",
       "      <td>299468</td>\n",
       "      <td>6928</td>\n",
       "      <td>93241</td>\n",
       "      <td>1</td>\n",
       "      <td>49389</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.630769</td>\n",
       "      <td>5.470588</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.176472</td>\n",
       "      <td>0.732615</td>\n",
       "      <td>6928.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>Prime Number</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88074</th>\n",
       "      <td>9121</td>\n",
       "      <td>40897987</td>\n",
       "      <td>299468</td>\n",
       "      <td>6928</td>\n",
       "      <td>93241</td>\n",
       "      <td>1</td>\n",
       "      <td>49389</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.630769</td>\n",
       "      <td>5.470588</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.176472</td>\n",
       "      <td>0.732615</td>\n",
       "      <td>6928.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>Prime Number</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88074</th>\n",
       "      <td>9121</td>\n",
       "      <td>40897987</td>\n",
       "      <td>299468</td>\n",
       "      <td>6928</td>\n",
       "      <td>93241</td>\n",
       "      <td>1</td>\n",
       "      <td>49389</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.630769</td>\n",
       "      <td>5.470588</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.176472</td>\n",
       "      <td>0.732615</td>\n",
       "      <td>6928.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>Prime Number</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88074</th>\n",
       "      <td>9121</td>\n",
       "      <td>40897987</td>\n",
       "      <td>299468</td>\n",
       "      <td>6928</td>\n",
       "      <td>93241</td>\n",
       "      <td>1</td>\n",
       "      <td>49389</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.630769</td>\n",
       "      <td>5.470588</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.176472</td>\n",
       "      <td>0.732615</td>\n",
       "      <td>6928.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>Prime Number</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>476012 rows × 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Unnamed: 0  problemlog_id  assignment_id  sequence_id  user_id  \\\n",
       "problem_id                                                                   \n",
       "53621                0       40790855         297282         5959    75063   \n",
       "53621                0       40790855         297282         5959    75063   \n",
       "53621                0       40790855         297282         5959    75063   \n",
       "53621                0       40790855         297282         5959    75063   \n",
       "53621                0       40790855         297282         5959    75063   \n",
       "...                ...            ...            ...          ...      ...   \n",
       "88074             9121       40897987         299468         6928    93241   \n",
       "88074             9121       40897987         299468         6928    93241   \n",
       "88074             9121       40897987         299468         6928    93241   \n",
       "88074             9121       40897987         299468         6928    93241   \n",
       "88074             9121       40897987         299468         6928    93241   \n",
       "\n",
       "            ARRS  assistment_id  sequence_opp  assignment_opp  \\\n",
       "problem_id                                                      \n",
       "53621          0          34310             1               1   \n",
       "53621          0          34310             1               1   \n",
       "53621          0          34310             1               1   \n",
       "53621          0          34310             1               1   \n",
       "53621          0          34310             1               1   \n",
       "...          ...            ...           ...             ...   \n",
       "88074          1          49389             2               2   \n",
       "88074          1          49389             2               2   \n",
       "88074          1          49389             2               2   \n",
       "88074          1          49389             2               2   \n",
       "88074          1          49389             2               2   \n",
       "\n",
       "            ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)  \\\n",
       "problem_id                                                                                   \n",
       "53621                                                       1                                \n",
       "53621                                                       1                                \n",
       "53621                                                       1                                \n",
       "53621                                                       1                                \n",
       "53621                                                       1                                \n",
       "...                                                       ...                                \n",
       "88074                                                       1                                \n",
       "88074                                                       1                                \n",
       "88074                                                       1                                \n",
       "88074                                                       1                                \n",
       "88074                                                       1                                \n",
       "\n",
       "            ...  pretest  posttest  avg_initial_three_correctness  \\\n",
       "problem_id  ...                                                     \n",
       "53621       ...        0         1                       0.671795   \n",
       "53621       ...        0         1                       0.671795   \n",
       "53621       ...        0         1                       0.671795   \n",
       "53621       ...        0         1                       0.671795   \n",
       "53621       ...        0         1                       0.671795   \n",
       "...         ...      ...       ...                            ...   \n",
       "88074       ...        0         0                       0.630769   \n",
       "88074       ...        0         0                       0.630769   \n",
       "88074       ...        0         0                       0.630769   \n",
       "88074       ...        0         0                       0.630769   \n",
       "88074       ...        0         0                       0.630769   \n",
       "\n",
       "            avg_initial_#problems_to_master  avg_first_reassess      slip  \\\n",
       "problem_id                                                                  \n",
       "53621                              6.323529            0.684211  0.087209   \n",
       "53621                              6.323529            0.684211  0.087209   \n",
       "53621                              6.323529            0.684211  0.087209   \n",
       "53621                              6.323529            0.684211  0.087209   \n",
       "53621                              6.323529            0.684211  0.087209   \n",
       "...                                     ...                 ...       ...   \n",
       "88074                              5.470588            0.666667  0.176472   \n",
       "88074                              5.470588            0.666667  0.176472   \n",
       "88074                              5.470588            0.666667  0.176472   \n",
       "88074                              5.470588            0.666667  0.176472   \n",
       "88074                              5.470588            0.666667  0.176472   \n",
       "\n",
       "               guess  base_sequence_id  skill_id              skill_name  \n",
       "problem_id                                                                \n",
       "53621       0.590881            5959.0      58.0  Addition Whole Numbers  \n",
       "53621       0.590881            5959.0      58.0  Addition Whole Numbers  \n",
       "53621       0.590881            5959.0      58.0  Addition Whole Numbers  \n",
       "53621       0.590881            5959.0      58.0  Addition Whole Numbers  \n",
       "53621       0.590881            5959.0      58.0  Addition Whole Numbers  \n",
       "...              ...               ...       ...                     ...  \n",
       "88074       0.732615            6928.0      84.0            Prime Number  \n",
       "88074       0.732615            6928.0      84.0            Prime Number  \n",
       "88074       0.732615            6928.0      84.0            Prime Number  \n",
       "88074       0.732615            6928.0      84.0            Prime Number  \n",
       "88074       0.732615            6928.0      84.0            Prime Number  \n",
       "\n",
       "[476012 rows x 26 columns]"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking that all problem_id in df is in skill\n",
    "\n",
    "\n",
    "# df_problem = df['problem_id'].unique()\n",
    "# skill_problem = skill['problem_id'].unique()\n",
    "# df_problem.isin(skill_problem)\n",
    "\n",
    "\n",
    "joined = df.set_index('problem_id').join(skill[['problem_id', 'base_sequence_id', 'skill_id', 'skill_name']].set_index('problem_id'), on = 'problem_id', rsuffix = 'right_suf')\n",
    "joined\n",
    "\n",
    "# joined = pd.merge(df,skill[['problem_id', 'base_sequence_id', 'skill_id', 'skill_name']], on = 'problem_id', how = 'left')\n",
    "# joined\n",
    "\n",
    "#weird situation: without setting index, the problem_id will not match up. But now the problem_id do match up, there are too many rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>problemlog_id</th>\n",
       "      <th>assignment_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>ARRS</th>\n",
       "      <th>assistment_id</th>\n",
       "      <th>sequence_opp</th>\n",
       "      <th>assignment_opp</th>\n",
       "      <th>ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)</th>\n",
       "      <th>...</th>\n",
       "      <th>cluster</th>\n",
       "      <th>pretest</th>\n",
       "      <th>posttest</th>\n",
       "      <th>avg_initial_three_correctness</th>\n",
       "      <th>avg_initial_#problems_to_master</th>\n",
       "      <th>avg_first_reassess</th>\n",
       "      <th>slip</th>\n",
       "      <th>guess</th>\n",
       "      <th>base_sequence_id</th>\n",
       "      <th>skill_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>476012.000000</td>\n",
       "      <td>4.760120e+05</td>\n",
       "      <td>476012.000000</td>\n",
       "      <td>476012.000000</td>\n",
       "      <td>476012.000000</td>\n",
       "      <td>476012.000000</td>\n",
       "      <td>476012.000000</td>\n",
       "      <td>476012.000000</td>\n",
       "      <td>476012.000000</td>\n",
       "      <td>476012.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>476012.000000</td>\n",
       "      <td>476012.000000</td>\n",
       "      <td>476012.000000</td>\n",
       "      <td>476012.000000</td>\n",
       "      <td>476012.000000</td>\n",
       "      <td>476012.000000</td>\n",
       "      <td>476012.000000</td>\n",
       "      <td>476012.000000</td>\n",
       "      <td>476012.000000</td>\n",
       "      <td>476012.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3434.100838</td>\n",
       "      <td>4.087011e+07</td>\n",
       "      <td>298723.333553</td>\n",
       "      <td>6591.863957</td>\n",
       "      <td>82218.942882</td>\n",
       "      <td>0.350021</td>\n",
       "      <td>41026.177544</td>\n",
       "      <td>6.329962</td>\n",
       "      <td>2.888700</td>\n",
       "      <td>2.118594</td>\n",
       "      <td>...</td>\n",
       "      <td>0.568994</td>\n",
       "      <td>0.658347</td>\n",
       "      <td>0.837164</td>\n",
       "      <td>0.703614</td>\n",
       "      <td>5.685998</td>\n",
       "      <td>0.746478</td>\n",
       "      <td>0.211575</td>\n",
       "      <td>0.437792</td>\n",
       "      <td>6436.046993</td>\n",
       "      <td>83.836865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2515.109188</td>\n",
       "      <td>3.462589e+05</td>\n",
       "      <td>4736.921050</td>\n",
       "      <td>1284.907853</td>\n",
       "      <td>1977.496548</td>\n",
       "      <td>0.476977</td>\n",
       "      <td>5568.848937</td>\n",
       "      <td>6.330576</td>\n",
       "      <td>3.207518</td>\n",
       "      <td>1.582436</td>\n",
       "      <td>...</td>\n",
       "      <td>0.911700</td>\n",
       "      <td>0.474264</td>\n",
       "      <td>0.369217</td>\n",
       "      <td>0.112740</td>\n",
       "      <td>1.812886</td>\n",
       "      <td>0.123246</td>\n",
       "      <td>0.067951</td>\n",
       "      <td>0.124222</td>\n",
       "      <td>788.070010</td>\n",
       "      <td>70.094941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.876922e+07</td>\n",
       "      <td>290421.000000</td>\n",
       "      <td>5959.000000</td>\n",
       "      <td>75063.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8462.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.463542</td>\n",
       "      <td>3.029412</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.027209</td>\n",
       "      <td>0.128629</td>\n",
       "      <td>5959.000000</td>\n",
       "      <td>39.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1512.750000</td>\n",
       "      <td>4.073139e+07</td>\n",
       "      <td>295017.000000</td>\n",
       "      <td>6018.000000</td>\n",
       "      <td>81936.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>38046.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.630769</td>\n",
       "      <td>4.264706</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.140076</td>\n",
       "      <td>0.341347</td>\n",
       "      <td>6018.000000</td>\n",
       "      <td>47.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2770.000000</td>\n",
       "      <td>4.079272e+07</td>\n",
       "      <td>297287.000000</td>\n",
       "      <td>6018.000000</td>\n",
       "      <td>82296.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>38065.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.703704</td>\n",
       "      <td>5.264706</td>\n",
       "      <td>0.739130</td>\n",
       "      <td>0.240076</td>\n",
       "      <td>0.434229</td>\n",
       "      <td>6018.000000</td>\n",
       "      <td>65.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>5291.000000</td>\n",
       "      <td>4.100468e+07</td>\n",
       "      <td>301162.000000</td>\n",
       "      <td>6876.000000</td>\n",
       "      <td>82462.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>47343.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.798942</td>\n",
       "      <td>6.764706</td>\n",
       "      <td>0.826087</td>\n",
       "      <td>0.240076</td>\n",
       "      <td>0.534229</td>\n",
       "      <td>6896.000000</td>\n",
       "      <td>74.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>9121.000000</td>\n",
       "      <td>4.172284e+07</td>\n",
       "      <td>314567.000000</td>\n",
       "      <td>11899.000000</td>\n",
       "      <td>93241.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>99371.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.936508</td>\n",
       "      <td>10.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.324885</td>\n",
       "      <td>0.812615</td>\n",
       "      <td>11899.000000</td>\n",
       "      <td>309.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Unnamed: 0  problemlog_id  assignment_id    sequence_id  \\\n",
       "count  476012.000000   4.760120e+05  476012.000000  476012.000000   \n",
       "mean     3434.100838   4.087011e+07  298723.333553    6591.863957   \n",
       "std      2515.109188   3.462589e+05    4736.921050    1284.907853   \n",
       "min         0.000000   3.876922e+07  290421.000000    5959.000000   \n",
       "25%      1512.750000   4.073139e+07  295017.000000    6018.000000   \n",
       "50%      2770.000000   4.079272e+07  297287.000000    6018.000000   \n",
       "75%      5291.000000   4.100468e+07  301162.000000    6876.000000   \n",
       "max      9121.000000   4.172284e+07  314567.000000   11899.000000   \n",
       "\n",
       "             user_id           ARRS  assistment_id   sequence_opp  \\\n",
       "count  476012.000000  476012.000000  476012.000000  476012.000000   \n",
       "mean    82218.942882       0.350021   41026.177544       6.329962   \n",
       "std      1977.496548       0.476977    5568.848937       6.330576   \n",
       "min     75063.000000       0.000000    8462.000000       1.000000   \n",
       "25%     81936.000000       0.000000   38046.000000       2.000000   \n",
       "50%     82296.000000       0.000000   38065.000000       4.000000   \n",
       "75%     82462.000000       1.000000   47343.000000       8.000000   \n",
       "max     93241.000000       1.000000   99371.000000      55.000000   \n",
       "\n",
       "       assignment_opp  \\\n",
       "count   476012.000000   \n",
       "mean         2.888700   \n",
       "std          3.207518   \n",
       "min          1.000000   \n",
       "25%          1.000000   \n",
       "50%          2.000000   \n",
       "75%          3.000000   \n",
       "max         54.000000   \n",
       "\n",
       "       ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)  \\\n",
       "count                                      476012.000000                                \n",
       "mean                                            2.118594                                \n",
       "std                                             1.582436                                \n",
       "min                                             1.000000                                \n",
       "25%                                             1.000000                                \n",
       "50%                                             1.000000                                \n",
       "75%                                             3.000000                                \n",
       "max                                            10.000000                                \n",
       "\n",
       "       ...        cluster        pretest       posttest  \\\n",
       "count  ...  476012.000000  476012.000000  476012.000000   \n",
       "mean   ...       0.568994       0.658347       0.837164   \n",
       "std    ...       0.911700       0.474264       0.369217   \n",
       "min    ...       0.000000       0.000000       0.000000   \n",
       "25%    ...       0.000000       0.000000       1.000000   \n",
       "50%    ...       0.000000       1.000000       1.000000   \n",
       "75%    ...       1.000000       1.000000       1.000000   \n",
       "max    ...       4.000000       1.000000       1.000000   \n",
       "\n",
       "       avg_initial_three_correctness  avg_initial_#problems_to_master  \\\n",
       "count                  476012.000000                    476012.000000   \n",
       "mean                        0.703614                         5.685998   \n",
       "std                         0.112740                         1.812886   \n",
       "min                         0.463542                         3.029412   \n",
       "25%                         0.630769                         4.264706   \n",
       "50%                         0.703704                         5.264706   \n",
       "75%                         0.798942                         6.764706   \n",
       "max                         0.936508                        10.500000   \n",
       "\n",
       "       avg_first_reassess           slip          guess  base_sequence_id  \\\n",
       "count       476012.000000  476012.000000  476012.000000     476012.000000   \n",
       "mean             0.746478       0.211575       0.437792       6436.046993   \n",
       "std              0.123246       0.067951       0.124222        788.070010   \n",
       "min              0.500000       0.027209       0.128629       5959.000000   \n",
       "25%              0.666667       0.140076       0.341347       6018.000000   \n",
       "50%              0.739130       0.240076       0.434229       6018.000000   \n",
       "75%              0.826087       0.240076       0.534229       6896.000000   \n",
       "max              1.000000       0.324885       0.812615      11899.000000   \n",
       "\n",
       "            skill_id  \n",
       "count  476012.000000  \n",
       "mean       83.836865  \n",
       "std        70.094941  \n",
       "min        39.000000  \n",
       "25%        47.000000  \n",
       "50%        65.000000  \n",
       "75%        74.000000  \n",
       "max       309.000000  \n",
       "\n",
       "[8 rows x 25 columns]"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "joined.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 85
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 869,
     "status": "ok",
     "timestamp": 1588057858905,
     "user": {
      "displayName": "Miranda Zhou",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjCjPyWdI9eqQrayg3ZrLT3p7BUfARIGayRDkGu=s64",
      "userId": "05223748671447807698"
     },
     "user_tz": 420
    },
    "id": "pCtXdtr2z4XY",
    "outputId": "40800f22-2362-40e5-9fee-deb7c57e41a4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1108\n",
      "1108\n",
      "19\n",
      "449\n"
     ]
    }
   ],
   "source": [
    "print(len(df['assistment_id'].unique()))\n",
    "print(len(df['problem_id'].unique()))\n",
    "print(len(df['sequence_id'].unique())) #short. order appears?\n",
    "print(len(df['assignment_id'].unique())) #as long as the DF. Seems like unique\n",
    "# print(len(df['problemlog_id'].unique())) : 25405"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "fV-AeOfn93Uq"
   },
   "outputs": [],
   "source": [
    "df[df['problem_id'] == df['problem_id'][8]]\n",
    "df = df.reset_index()\n",
    "# df['problem_id'][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 221
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 690,
     "status": "ok",
     "timestamp": 1588057861462,
     "user": {
      "displayName": "Miranda Zhou",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjCjPyWdI9eqQrayg3ZrLT3p7BUfARIGayRDkGu=s64",
      "userId": "05223748671447807698"
     },
     "user_tz": 420
    },
    "id": "4WoxGumL-fv5",
    "outputId": "36ffd33e-eeb9-483a-df64-c4780ce2450b"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       False\n",
       "1       False\n",
       "2       False\n",
       "3       False\n",
       "4       False\n",
       "        ...  \n",
       "9117    False\n",
       "9118    False\n",
       "9119    False\n",
       "9120    False\n",
       "9121    False\n",
       "Length: 9122, dtype: bool"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['problem_id'] == df['assistment_id']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 557,
     "status": "ok",
     "timestamp": 1588058244118,
     "user": {
      "displayName": "Miranda Zhou",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjCjPyWdI9eqQrayg3ZrLT3p7BUfARIGayRDkGu=s64",
      "userId": "05223748671447807698"
     },
     "user_tz": 420
    },
    "id": "4FF5DIiGkmgC",
    "outputId": "d6b86a71-aa46-4a17-8244-0cc297b2378b"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>count_of_skill_tested</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5959</td>\n",
       "      <td>482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5962</td>\n",
       "      <td>377</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6018</td>\n",
       "      <td>1272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6057</td>\n",
       "      <td>683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6848</td>\n",
       "      <td>357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6851</td>\n",
       "      <td>692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6854</td>\n",
       "      <td>564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>6876</td>\n",
       "      <td>489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>6915</td>\n",
       "      <td>181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>6917</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>6921</td>\n",
       "      <td>868</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>6928</td>\n",
       "      <td>474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>7179</td>\n",
       "      <td>643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>7196</td>\n",
       "      <td>671</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>8741</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>10762</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>11829</td>\n",
       "      <td>584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>11836</td>\n",
       "      <td>310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>11899</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    sequence_id  count_of_skill_tested\n",
       "0          5959                    482\n",
       "1          5962                    377\n",
       "2          6018                   1272\n",
       "3          6057                    683\n",
       "4          6848                    357\n",
       "5          6851                    692\n",
       "6          6854                    564\n",
       "7          6876                    489\n",
       "8          6915                    181\n",
       "9          6917                    400\n",
       "10         6921                    868\n",
       "11         6928                    474\n",
       "12         7179                    643\n",
       "13         7196                    671\n",
       "14         8741                     39\n",
       "15        10762                     22\n",
       "16        11829                    584\n",
       "17        11836                    310\n",
       "18        11899                     14"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#assuming sequence_id is the skill_id\n",
    "count = df.groupby('sequence_id').count()[['user_id']]\n",
    "count = count.reset_index()\n",
    "count = count.rename(columns={\"user_id\": \"count_of_skill_tested\"})\n",
    "count #count of how much each sequence has been used"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 275
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 376,
     "status": "ok",
     "timestamp": 1588058244412,
     "user": {
      "displayName": "Miranda Zhou",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjCjPyWdI9eqQrayg3ZrLT3p7BUfARIGayRDkGu=s64",
      "userId": "05223748671447807698"
     },
     "user_tz": 420
    },
    "id": "eu1rKGFNkmnp",
    "outputId": "977b6e00-5c34-46de-cc5d-31d32b25ad68"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>problemlog_id</th>\n",
       "      <th>assignment_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>ARRS</th>\n",
       "      <th>assistment_id</th>\n",
       "      <th>problem_id</th>\n",
       "      <th>sequence_opp</th>\n",
       "      <th>...</th>\n",
       "      <th>overlap_time</th>\n",
       "      <th>cluster</th>\n",
       "      <th>pretest</th>\n",
       "      <th>posttest</th>\n",
       "      <th>avg_initial_three_correctness</th>\n",
       "      <th>avg_initial_#problems_to_master</th>\n",
       "      <th>avg_first_reassess</th>\n",
       "      <th>slip</th>\n",
       "      <th>guess</th>\n",
       "      <th>count_of_skill_tested</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40790855</td>\n",
       "      <td>297282</td>\n",
       "      <td>5959</td>\n",
       "      <td>75063</td>\n",
       "      <td>0</td>\n",
       "      <td>34310</td>\n",
       "      <td>53621</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>13353</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.671795</td>\n",
       "      <td>6.323529</td>\n",
       "      <td>0.684211</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>40785896</td>\n",
       "      <td>297283</td>\n",
       "      <td>5959</td>\n",
       "      <td>82047</td>\n",
       "      <td>1</td>\n",
       "      <td>34310</td>\n",
       "      <td>53621</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>5398</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.650794</td>\n",
       "      <td>7.676471</td>\n",
       "      <td>0.761905</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>40794425</td>\n",
       "      <td>297283</td>\n",
       "      <td>5959</td>\n",
       "      <td>82056</td>\n",
       "      <td>1</td>\n",
       "      <td>34310</td>\n",
       "      <td>53621</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>25843</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.697917</td>\n",
       "      <td>4.588235</td>\n",
       "      <td>0.782609</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>41001137</td>\n",
       "      <td>301372</td>\n",
       "      <td>5959</td>\n",
       "      <td>82285</td>\n",
       "      <td>0</td>\n",
       "      <td>34310</td>\n",
       "      <td>53621</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>76</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.720430</td>\n",
       "      <td>5.911765</td>\n",
       "      <td>0.736842</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>40778190</td>\n",
       "      <td>297300</td>\n",
       "      <td>5959</td>\n",
       "      <td>82405</td>\n",
       "      <td>1</td>\n",
       "      <td>34310</td>\n",
       "      <td>53621</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>6550</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.463542</td>\n",
       "      <td>7.470588</td>\n",
       "      <td>0.562500</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>482</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   index  Unnamed: 0  problemlog_id  assignment_id  sequence_id  user_id  \\\n",
       "0      0           0       40790855         297282         5959    75063   \n",
       "1      1           1       40785896         297283         5959    82047   \n",
       "2      2           2       40794425         297283         5959    82056   \n",
       "3      3           3       41001137         301372         5959    82285   \n",
       "4      4           4       40778190         297300         5959    82405   \n",
       "\n",
       "   ARRS  assistment_id  problem_id  sequence_opp  ...  overlap_time  cluster  \\\n",
       "0     0          34310       53621             1  ...         13353        0   \n",
       "1     1          34310       53621             2  ...          5398        0   \n",
       "2     1          34310       53621             1  ...         25843        0   \n",
       "3     0          34310       53621             4  ...            76        1   \n",
       "4     1          34310       53621             1  ...          6550        0   \n",
       "\n",
       "   pretest  posttest  avg_initial_three_correctness  \\\n",
       "0        0         1                       0.671795   \n",
       "1        1         1                       0.650794   \n",
       "2        0         1                       0.697917   \n",
       "3        1         0                       0.720430   \n",
       "4        0         0                       0.463542   \n",
       "\n",
       "   avg_initial_#problems_to_master  avg_first_reassess      slip     guess  \\\n",
       "0                         6.323529            0.684211  0.087209  0.590881   \n",
       "1                         7.676471            0.761905  0.087209  0.590881   \n",
       "2                         4.588235            0.782609  0.087209  0.590881   \n",
       "3                         5.911765            0.736842  0.087209  0.590881   \n",
       "4                         7.470588            0.562500  0.087209  0.590881   \n",
       "\n",
       "   count_of_skill_tested  \n",
       "0                    482  \n",
       "1                    482  \n",
       "2                    482  \n",
       "3                    482  \n",
       "4                    482  \n",
       "\n",
       "[5 rows x 26 columns]"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_df = df.join(count.set_index('sequence_id'), on='sequence_id') #has the count of each sequence appearing as column\n",
    "new_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 450
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 807,
     "status": "ok",
     "timestamp": 1588058965880,
     "user": {
      "displayName": "Miranda Zhou",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjCjPyWdI9eqQrayg3ZrLT3p7BUfARIGayRDkGu=s64",
      "userId": "05223748671447807698"
     },
     "user_tz": 420
    },
    "id": "2IbbnmlgkmqJ",
    "outputId": "2d9d9853-ef26-4f39-e5e4-866dafc4cf8b"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sequence_id</th>\n",
       "      <th>problem_id</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">6915</th>\n",
       "      <th>86938</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87009</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87007</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6876</th>\n",
       "      <th>85847</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6915</th>\n",
       "      <th>87002</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">6018</th>\n",
       "      <th>61102</th>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61106</th>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61097</th>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61112</th>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61092</th>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1108 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                        count\n",
       "sequence_id problem_id       \n",
       "6915        86938           1\n",
       "            87009           1\n",
       "            87007           1\n",
       "6876        85847           1\n",
       "6915        87002           1\n",
       "...                       ...\n",
       "6018        61102          49\n",
       "            61106          49\n",
       "            61097          50\n",
       "            61112          50\n",
       "            61092          50\n",
       "\n",
       "[1108 rows x 1 columns]"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#looking at how many problems per skill\n",
    "#we can look at which problems tended to result in higher post test score\n",
    "\n",
    "# sp[sp['sequence_id'] == 5959]\n",
    "# sp[sp['problem_id'] == 53621]\n",
    "sp = new_df.groupby(['sequence_id', 'problem_id']).count()[['index']]\n",
    "sp = sp.rename(columns={'index':'count'})\n",
    "sp.sort_values('count')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "gd4vBLz3kms3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "0cr054kRz4Xa"
   },
   "outputs": [],
   "source": [
    "#Basic renaming\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 731
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 471,
     "status": "ok",
     "timestamp": 1588044613607,
     "user": {
      "displayName": "Miranda Zhou",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjCjPyWdI9eqQrayg3ZrLT3p7BUfARIGayRDkGu=s64",
      "userId": "05223748671447807698"
     },
     "user_tz": 420
    },
    "id": "gfM6XtgWz4Xc",
    "outputId": "518153fd-4040-4890-dd85-aa66180bdffe"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "index\n",
      "9122\n",
      "Unnamed: 0\n",
      "9122\n",
      "problemlog_id\n",
      "9122\n",
      "assignment_id\n",
      "449\n",
      "sequence_id\n",
      "19\n",
      "user_id\n",
      "99\n",
      "ARRS\n",
      "2\n",
      "assistment_id\n",
      "1108\n",
      "problem_id\n",
      "1108\n",
      "sequence_opp\n",
      "55\n",
      "assignment_opp\n",
      "54\n",
      "ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)\n",
      "10\n",
      "correct\n",
      "2\n",
      "hint_count\n",
      "6\n",
      "attempt_count\n",
      "21\n",
      "first_response_time\n",
      "6478\n",
      "overlap_time\n",
      "6844\n",
      "cluster\n",
      "5\n",
      "pretest\n",
      "2\n",
      "posttest\n",
      "2\n",
      "avg_initial_three_correctness\n",
      "74\n",
      "avg_initial_#problems_to_master\n",
      "76\n",
      "avg_first_reassess\n",
      "38\n",
      "slip\n",
      "121\n",
      "guess\n",
      "118\n"
     ]
    }
   ],
   "source": [
    "for col in df.columns:\n",
    "    print(col)\n",
    "    print (len(df[col].value_counts()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "sDX4Fr_qz4Xf"
   },
   "outputs": [],
   "source": [
    "df.rename(columns={'avg_initial_problems_to_master': 'Numprobmas', 'avg_initial_three_correctness': 'first_three'}, inplace=True)\n",
    "drop_list=['problemlog_id', 'first_response_time', 'overlap_time' , 'assistment_id' ]\n",
    "df.drop(drop_list, axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 1330,
     "status": "ok",
     "timestamp": 1588044651572,
     "user": {
      "displayName": "Miranda Zhou",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjCjPyWdI9eqQrayg3ZrLT3p7BUfARIGayRDkGu=s64",
      "userId": "05223748671447807698"
     },
     "user_tz": 420
    },
    "id": "Cdr8N3Gez4Xh",
    "outputId": "5c9393a4-f5ac-4475-ddc2-7a2457fe53d3"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: 0.1702127659574468,\n",
       " 2: 0.19727891156462585,\n",
       " 3: 0.224,\n",
       " 4: 0.24107142857142858,\n",
       " 5: 0.2422360248447205,\n",
       " 6: 0.28,\n",
       " 7: 0.2803738317757009,\n",
       " 8: 0.2905405405405405,\n",
       " 9: 0.30097087378640774,\n",
       " 10: 0.3125,\n",
       " 11: 0.32222222222222224,\n",
       " 12: 0.3235294117647059,\n",
       " 13: 0.32673267326732675,\n",
       " 14: 0.3402061855670103,\n",
       " 15: 0.35172413793103446,\n",
       " 16: 0.3523809523809524,\n",
       " 17: 0.36036036036036034,\n",
       " 18: 0.39080459770114945,\n",
       " 19: 0.39285714285714285,\n",
       " 20: 0.4090909090909091,\n",
       " 21: 0.4105263157894737,\n",
       " 22: 0.44086021505376344,\n",
       " 23: 0.453125,\n",
       " 24: 0.463768115942029,\n",
       " 25: 0.46534653465346537,\n",
       " 26: 0.4659090909090909,\n",
       " 27: 0.47368421052631576,\n",
       " 28: 0.48623853211009177,\n",
       " 29: 0.5,\n",
       " 30: 0.5057471264367817,\n",
       " 31: 0.5075757575757576,\n",
       " 32: 0.5194805194805194,\n",
       " 33: 0.5256410256410257,\n",
       " 34: 0.5257731958762887,\n",
       " 35: 0.5263157894736842,\n",
       " 36: 0.5294117647058824,\n",
       " 37: 0.5328947368421053,\n",
       " 38: 0.5333333333333333,\n",
       " 39: 0.5421686746987951,\n",
       " 40: 0.5454545454545454,\n",
       " 41: 0.5462184873949579,\n",
       " 42: 0.5478260869565217,\n",
       " 43: 0.5604395604395604,\n",
       " 44: 0.5609756097560976,\n",
       " 45: 0.5857142857142857,\n",
       " 46: 0.6086956521739131,\n",
       " 47: 0.6216216216216216,\n",
       " 48: 0.6235294117647059,\n",
       " 49: 0.640625,\n",
       " 50: 0.6428571428571429,\n",
       " 51: 0.6463414634146342,\n",
       " 52: 0.6593406593406593,\n",
       " 53: 0.6701030927835051,\n",
       " 54: 0.6744186046511628,\n",
       " 55: 0.6794871794871795,\n",
       " 56: 0.6842105263157895,\n",
       " 57: 0.6923076923076923,\n",
       " 58: 0.6923076923076923,\n",
       " 59: 0.6933333333333334,\n",
       " 60: 0.6973684210526315,\n",
       " 61: 0.7,\n",
       " 62: 0.7029702970297029,\n",
       " 63: 0.7058823529411765,\n",
       " 64: 0.7086614173228346,\n",
       " 65: 0.7087378640776699,\n",
       " 66: 0.7125,\n",
       " 67: 0.7142857142857143,\n",
       " 68: 0.7285714285714285,\n",
       " 69: 0.7307692307692307,\n",
       " 70: 0.7349397590361446,\n",
       " 71: 0.7352941176470589,\n",
       " 72: 0.7432432432432432,\n",
       " 73: 0.75,\n",
       " 74: 0.7547169811320755,\n",
       " 75: 0.7634408602150538,\n",
       " 76: 0.7701149425287356,\n",
       " 77: 0.78,\n",
       " 78: 0.782608695652174,\n",
       " 79: 0.7931034482758621,\n",
       " 80: 0.8,\n",
       " 81: 0.8055555555555556,\n",
       " 82: 0.8279569892473119,\n",
       " 83: 0.828125,\n",
       " 84: 0.8313253012048193,\n",
       " 85: 0.8363636363636363,\n",
       " 86: 0.8441558441558441,\n",
       " 87: 0.8620689655172413,\n",
       " 88: 0.8705882352941177,\n",
       " 89: 0.8717948717948718,\n",
       " 90: 0.8850574712643678,\n",
       " 91: 0.8873239436619719,\n",
       " 92: 0.8875,\n",
       " 93: 0.8939393939393939,\n",
       " 94: 0.9027777777777778,\n",
       " 95: 0.9104477611940298,\n",
       " 96: 0.9230769230769231,\n",
       " 97: 0.9354838709677419,\n",
       " 98: 0.9493670886075949,\n",
       " 99: 1.0}"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Get the users mean pretest scores to rank them by ability\n",
    "pretest=df.groupby('user_id')['pretest'].mean().to_dict()\n",
    "#Returns a dictionary sorted from lowest value to highest value\n",
    "sort_pretest={k: v for k, v in sorted(pretest.items(), key=lambda item: item[1])}\n",
    "\n",
    "#Return dict of students from 1-99 where loweest ability is 1 and highest is 99 as judged by pretest\n",
    "sort_dict={}\n",
    "for i in range (len(sort_pretest)):\n",
    "    sort_dict[i+1]=list(sort_pretest.values())[i]\n",
    "sort_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 275
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 616,
     "status": "ok",
     "timestamp": 1588044665295,
     "user": {
      "displayName": "Miranda Zhou",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjCjPyWdI9eqQrayg3ZrLT3p7BUfARIGayRDkGu=s64",
      "userId": "05223748671447807698"
     },
     "user_tz": 420
    },
    "id": "lDOLBB2Kz4Xj",
    "outputId": "92c10597-c65c-4cfb-ff1e-ee994a5bfd54"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>assignment_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>ARRS</th>\n",
       "      <th>problem_id</th>\n",
       "      <th>sequence_opp</th>\n",
       "      <th>assignment_opp</th>\n",
       "      <th>ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)</th>\n",
       "      <th>...</th>\n",
       "      <th>hint_count</th>\n",
       "      <th>attempt_count</th>\n",
       "      <th>cluster</th>\n",
       "      <th>pretest</th>\n",
       "      <th>posttest</th>\n",
       "      <th>first_three</th>\n",
       "      <th>avg_initial_#problems_to_master</th>\n",
       "      <th>avg_first_reassess</th>\n",
       "      <th>slip</th>\n",
       "      <th>guess</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>297282</td>\n",
       "      <td>5959</td>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>53621</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.671795</td>\n",
       "      <td>6.323529</td>\n",
       "      <td>0.684211</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>297283</td>\n",
       "      <td>5959</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>53621</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.650794</td>\n",
       "      <td>7.676471</td>\n",
       "      <td>0.761905</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>297283</td>\n",
       "      <td>5959</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>53621</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.697917</td>\n",
       "      <td>4.588235</td>\n",
       "      <td>0.782609</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>301372</td>\n",
       "      <td>5959</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "      <td>53621</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.720430</td>\n",
       "      <td>5.911765</td>\n",
       "      <td>0.736842</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>297300</td>\n",
       "      <td>5959</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>53621</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.463542</td>\n",
       "      <td>7.470588</td>\n",
       "      <td>0.562500</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   index  Unnamed: 0  assignment_id  sequence_id  user_id  ARRS  problem_id  \\\n",
       "0      0           0         297282         5959       41     0       53621   \n",
       "1      1           1         297283         5959       27     1       53621   \n",
       "2      2           2         297283         5959       22     1       53621   \n",
       "3      3           3         301372         5959       38     0       53621   \n",
       "4      4           4         297300         5959        3     1       53621   \n",
       "\n",
       "   sequence_opp  assignment_opp  \\\n",
       "0             1               1   \n",
       "1             2               2   \n",
       "2             1               1   \n",
       "3             4               1   \n",
       "4             1               1   \n",
       "\n",
       "   ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)  \\\n",
       "0                                                  1                                \n",
       "1                                                  1                                \n",
       "2                                                  1                                \n",
       "3                                                  2                                \n",
       "4                                                  1                                \n",
       "\n",
       "   ...  hint_count  attempt_count  cluster  pretest  posttest  first_three  \\\n",
       "0  ...           0              1        0        0         1     0.671795   \n",
       "1  ...           0              1        0        1         1     0.650794   \n",
       "2  ...           0              1        0        0         1     0.697917   \n",
       "3  ...           0              0        1        1         0     0.720430   \n",
       "4  ...           0              1        0        0         0     0.463542   \n",
       "\n",
       "   avg_initial_#problems_to_master  avg_first_reassess      slip     guess  \n",
       "0                         6.323529            0.684211  0.087209  0.590881  \n",
       "1                         7.676471            0.761905  0.087209  0.590881  \n",
       "2                         4.588235            0.782609  0.087209  0.590881  \n",
       "3                         5.911765            0.736842  0.087209  0.590881  \n",
       "4                         7.470588            0.562500  0.087209  0.590881  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Replaces the user id by the rankings of pretest scores. \n",
    "df['user_id'].replace(list(sort_pretest.keys()), list(sort_dict.keys()), inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 68
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 555,
     "status": "ok",
     "timestamp": 1588044667818,
     "user": {
      "displayName": "Miranda Zhou",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjCjPyWdI9eqQrayg3ZrLT3p7BUfARIGayRDkGu=s64",
      "userId": "05223748671447807698"
     },
     "user_tz": 420
    },
    "id": "lGr3pMjSz4Xm",
    "outputId": "49d78fd7-87b5-44b1-e4c3-90c78afeb028"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    6035\n",
       "1    3087\n",
       "Name: ARRS, dtype: int64"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['ARRS'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 1089,
     "status": "ok",
     "timestamp": 1588044685365,
     "user": {
      "displayName": "Miranda Zhou",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjCjPyWdI9eqQrayg3ZrLT3p7BUfARIGayRDkGu=s64",
      "userId": "05223748671447807698"
     },
     "user_tz": 420
    },
    "id": "DQFPy22Pz4Xo",
    "outputId": "980d8862-adeb-4b0a-9efc-200831af3575"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: 0.0,\n",
       " 2: 0.0,\n",
       " 3: 0.0,\n",
       " 4: 0.0,\n",
       " 5: 0.0,\n",
       " 6: 0.0,\n",
       " 7: 0.0,\n",
       " 8: 0.0,\n",
       " 9: 0.0,\n",
       " 10: 0.0,\n",
       " 11: 0.0,\n",
       " 12: 0.0,\n",
       " 13: 0.0,\n",
       " 14: 0.0,\n",
       " 15: 0.0,\n",
       " 16: 0.0,\n",
       " 17: 0.0,\n",
       " 18: 0.0,\n",
       " 19: 0.0,\n",
       " 20: 0.0,\n",
       " 21: 0.0,\n",
       " 22: 0.0,\n",
       " 23: 0.0,\n",
       " 24: 0.0,\n",
       " 25: 0.0,\n",
       " 26: 0.0,\n",
       " 27: 0.0,\n",
       " 28: 0.0,\n",
       " 29: 0.0,\n",
       " 30: 0.0,\n",
       " 31: 0.0,\n",
       " 32: 0.0,\n",
       " 33: 0.0,\n",
       " 34: 0.0,\n",
       " 35: 0.0,\n",
       " 36: 0.0,\n",
       " 37: 0.0,\n",
       " 38: 0.0,\n",
       " 39: 0.0,\n",
       " 40: 0.0,\n",
       " 41: 0.0,\n",
       " 42: 0.0,\n",
       " 43: 0.0,\n",
       " 44: 0.0,\n",
       " 45: 0.0,\n",
       " 46: 0.0,\n",
       " 47: 0.0,\n",
       " 48: 0.0,\n",
       " 49: 0.0,\n",
       " 50: 0.0,\n",
       " 51: 0.0,\n",
       " 52: 0.0,\n",
       " 53: 0.0,\n",
       " 54: 0.0,\n",
       " 55: 0.0,\n",
       " 56: 0.0,\n",
       " 57: 0.0,\n",
       " 58: 0.0,\n",
       " 59: 0.0,\n",
       " 60: 0.0,\n",
       " 61: 0.0,\n",
       " 62: 0.0,\n",
       " 63: 0.0,\n",
       " 64: 0.0,\n",
       " 65: 0.0,\n",
       " 66: 0.0,\n",
       " 67: 0.0,\n",
       " 68: 0.0,\n",
       " 69: 0.0,\n",
       " 70: 0.0,\n",
       " 71: 0.0,\n",
       " 72: 0.0,\n",
       " 73: 0.0,\n",
       " 74: 0.05263157894736842,\n",
       " 75: 0.05263157894736842,\n",
       " 76: 0.05555555555555555,\n",
       " 77: 0.058823529411764705,\n",
       " 78: 0.06666666666666667,\n",
       " 79: 0.07142857142857142,\n",
       " 80: 0.07692307692307693,\n",
       " 81: 0.07692307692307693,\n",
       " 82: 0.07692307692307693,\n",
       " 83: 0.09090909090909091,\n",
       " 84: 0.09090909090909091,\n",
       " 85: 0.1,\n",
       " 86: 0.1,\n",
       " 87: 0.1,\n",
       " 88: 0.1,\n",
       " 89: 0.10526315789473684,\n",
       " 90: 0.1111111111111111,\n",
       " 91: 0.1111111111111111,\n",
       " 92: 0.125,\n",
       " 93: 0.125,\n",
       " 94: 0.125,\n",
       " 95: 0.125,\n",
       " 96: 0.125,\n",
       " 97: 0.125,\n",
       " 98: 0.14285714285714285,\n",
       " 99: 0.14285714285714285,\n",
       " 100: 0.14285714285714285,\n",
       " 101: 0.14285714285714285,\n",
       " 102: 0.14285714285714285,\n",
       " 103: 0.14285714285714285,\n",
       " 104: 0.14285714285714285,\n",
       " 105: 0.14285714285714285,\n",
       " 106: 0.15384615384615385,\n",
       " 107: 0.16,\n",
       " 108: 0.16666666666666666,\n",
       " 109: 0.16666666666666666,\n",
       " 110: 0.16666666666666666,\n",
       " 111: 0.16666666666666666,\n",
       " 112: 0.16666666666666666,\n",
       " 113: 0.16666666666666666,\n",
       " 114: 0.16666666666666666,\n",
       " 115: 0.16666666666666666,\n",
       " 116: 0.16666666666666666,\n",
       " 117: 0.16666666666666666,\n",
       " 118: 0.16666666666666666,\n",
       " 119: 0.16666666666666666,\n",
       " 120: 0.16666666666666666,\n",
       " 121: 0.16666666666666666,\n",
       " 122: 0.16666666666666666,\n",
       " 123: 0.16666666666666666,\n",
       " 124: 0.16666666666666666,\n",
       " 125: 0.16666666666666666,\n",
       " 126: 0.16666666666666666,\n",
       " 127: 0.16666666666666666,\n",
       " 128: 0.16666666666666666,\n",
       " 129: 0.16666666666666666,\n",
       " 130: 0.16666666666666666,\n",
       " 131: 0.16666666666666666,\n",
       " 132: 0.16666666666666666,\n",
       " 133: 0.17647058823529413,\n",
       " 134: 0.17647058823529413,\n",
       " 135: 0.18181818181818182,\n",
       " 136: 0.18181818181818182,\n",
       " 137: 0.18181818181818182,\n",
       " 138: 0.18181818181818182,\n",
       " 139: 0.2,\n",
       " 140: 0.2,\n",
       " 141: 0.2,\n",
       " 142: 0.2,\n",
       " 143: 0.2,\n",
       " 144: 0.2,\n",
       " 145: 0.2,\n",
       " 146: 0.2,\n",
       " 147: 0.2,\n",
       " 148: 0.2,\n",
       " 149: 0.2,\n",
       " 150: 0.2,\n",
       " 151: 0.2,\n",
       " 152: 0.2,\n",
       " 153: 0.2,\n",
       " 154: 0.2,\n",
       " 155: 0.2,\n",
       " 156: 0.2,\n",
       " 157: 0.2,\n",
       " 158: 0.2,\n",
       " 159: 0.2,\n",
       " 160: 0.2,\n",
       " 161: 0.2,\n",
       " 162: 0.2,\n",
       " 163: 0.2,\n",
       " 164: 0.2,\n",
       " 165: 0.2,\n",
       " 166: 0.2,\n",
       " 167: 0.2,\n",
       " 168: 0.2,\n",
       " 169: 0.20689655172413793,\n",
       " 170: 0.21428571428571427,\n",
       " 171: 0.21739130434782608,\n",
       " 172: 0.2222222222222222,\n",
       " 173: 0.2222222222222222,\n",
       " 174: 0.22727272727272727,\n",
       " 175: 0.23076923076923078,\n",
       " 176: 0.23076923076923078,\n",
       " 177: 0.23529411764705882,\n",
       " 178: 0.23809523809523808,\n",
       " 179: 0.25,\n",
       " 180: 0.25,\n",
       " 181: 0.25,\n",
       " 182: 0.25,\n",
       " 183: 0.25,\n",
       " 184: 0.25,\n",
       " 185: 0.25,\n",
       " 186: 0.25,\n",
       " 187: 0.25,\n",
       " 188: 0.25,\n",
       " 189: 0.25,\n",
       " 190: 0.25,\n",
       " 191: 0.25,\n",
       " 192: 0.25,\n",
       " 193: 0.25,\n",
       " 194: 0.25,\n",
       " 195: 0.25,\n",
       " 196: 0.25,\n",
       " 197: 0.25,\n",
       " 198: 0.25,\n",
       " 199: 0.25,\n",
       " 200: 0.25,\n",
       " 201: 0.25,\n",
       " 202: 0.25,\n",
       " 203: 0.25,\n",
       " 204: 0.25,\n",
       " 205: 0.25,\n",
       " 206: 0.25,\n",
       " 207: 0.25,\n",
       " 208: 0.25,\n",
       " 209: 0.25,\n",
       " 210: 0.25,\n",
       " 211: 0.25,\n",
       " 212: 0.25,\n",
       " 213: 0.25,\n",
       " 214: 0.25,\n",
       " 215: 0.2631578947368421,\n",
       " 216: 0.26666666666666666,\n",
       " 217: 0.26666666666666666,\n",
       " 218: 0.2727272727272727,\n",
       " 219: 0.2727272727272727,\n",
       " 220: 0.2727272727272727,\n",
       " 221: 0.2727272727272727,\n",
       " 222: 0.2727272727272727,\n",
       " 223: 0.2857142857142857,\n",
       " 224: 0.2857142857142857,\n",
       " 225: 0.2857142857142857,\n",
       " 226: 0.2857142857142857,\n",
       " 227: 0.2857142857142857,\n",
       " 228: 0.2857142857142857,\n",
       " 229: 0.2857142857142857,\n",
       " 230: 0.2857142857142857,\n",
       " 231: 0.2857142857142857,\n",
       " 232: 0.2857142857142857,\n",
       " 233: 0.2857142857142857,\n",
       " 234: 0.2857142857142857,\n",
       " 235: 0.2857142857142857,\n",
       " 236: 0.2857142857142857,\n",
       " 237: 0.2857142857142857,\n",
       " 238: 0.2857142857142857,\n",
       " 239: 0.2857142857142857,\n",
       " 240: 0.3,\n",
       " 241: 0.3,\n",
       " 242: 0.3,\n",
       " 243: 0.3,\n",
       " 244: 0.3,\n",
       " 245: 0.3,\n",
       " 246: 0.3076923076923077,\n",
       " 247: 0.3125,\n",
       " 248: 0.3181818181818182,\n",
       " 249: 0.3333333333333333,\n",
       " 250: 0.3333333333333333,\n",
       " 251: 0.3333333333333333,\n",
       " 252: 0.3333333333333333,\n",
       " 253: 0.3333333333333333,\n",
       " 254: 0.3333333333333333,\n",
       " 255: 0.3333333333333333,\n",
       " 256: 0.3333333333333333,\n",
       " 257: 0.3333333333333333,\n",
       " 258: 0.3333333333333333,\n",
       " 259: 0.3333333333333333,\n",
       " 260: 0.3333333333333333,\n",
       " 261: 0.3333333333333333,\n",
       " 262: 0.3333333333333333,\n",
       " 263: 0.3333333333333333,\n",
       " 264: 0.3333333333333333,\n",
       " 265: 0.3333333333333333,\n",
       " 266: 0.3333333333333333,\n",
       " 267: 0.3333333333333333,\n",
       " 268: 0.3333333333333333,\n",
       " 269: 0.3333333333333333,\n",
       " 270: 0.3333333333333333,\n",
       " 271: 0.3333333333333333,\n",
       " 272: 0.3333333333333333,\n",
       " 273: 0.3333333333333333,\n",
       " 274: 0.3333333333333333,\n",
       " 275: 0.3333333333333333,\n",
       " 276: 0.3333333333333333,\n",
       " 277: 0.3333333333333333,\n",
       " 278: 0.3333333333333333,\n",
       " 279: 0.3333333333333333,\n",
       " 280: 0.3333333333333333,\n",
       " 281: 0.3333333333333333,\n",
       " 282: 0.3333333333333333,\n",
       " 283: 0.3333333333333333,\n",
       " 284: 0.3333333333333333,\n",
       " 285: 0.3333333333333333,\n",
       " 286: 0.3333333333333333,\n",
       " 287: 0.3333333333333333,\n",
       " 288: 0.3333333333333333,\n",
       " 289: 0.3333333333333333,\n",
       " 290: 0.3333333333333333,\n",
       " 291: 0.3333333333333333,\n",
       " 292: 0.3333333333333333,\n",
       " 293: 0.3333333333333333,\n",
       " 294: 0.3333333333333333,\n",
       " 295: 0.3333333333333333,\n",
       " 296: 0.3333333333333333,\n",
       " 297: 0.3333333333333333,\n",
       " 298: 0.3333333333333333,\n",
       " 299: 0.3333333333333333,\n",
       " 300: 0.3333333333333333,\n",
       " 301: 0.35714285714285715,\n",
       " 302: 0.35714285714285715,\n",
       " 303: 0.36363636363636365,\n",
       " 304: 0.36363636363636365,\n",
       " 305: 0.36363636363636365,\n",
       " 306: 0.36363636363636365,\n",
       " 307: 0.36363636363636365,\n",
       " 308: 0.3684210526315789,\n",
       " 309: 0.375,\n",
       " 310: 0.375,\n",
       " 311: 0.375,\n",
       " 312: 0.375,\n",
       " 313: 0.375,\n",
       " 314: 0.38461538461538464,\n",
       " 315: 0.38461538461538464,\n",
       " 316: 0.4,\n",
       " 317: 0.4,\n",
       " 318: 0.4,\n",
       " 319: 0.4,\n",
       " 320: 0.4,\n",
       " 321: 0.4,\n",
       " 322: 0.4,\n",
       " 323: 0.4,\n",
       " 324: 0.4,\n",
       " 325: 0.4,\n",
       " 326: 0.4,\n",
       " 327: 0.4,\n",
       " 328: 0.4,\n",
       " 329: 0.4,\n",
       " 330: 0.4,\n",
       " 331: 0.4,\n",
       " 332: 0.4,\n",
       " 333: 0.4,\n",
       " 334: 0.4,\n",
       " 335: 0.4,\n",
       " 336: 0.4,\n",
       " 337: 0.4,\n",
       " 338: 0.4,\n",
       " 339: 0.4,\n",
       " 340: 0.4,\n",
       " 341: 0.4,\n",
       " 342: 0.4,\n",
       " 343: 0.4,\n",
       " 344: 0.4,\n",
       " 345: 0.4,\n",
       " 346: 0.4,\n",
       " 347: 0.4,\n",
       " 348: 0.4166666666666667,\n",
       " 349: 0.4230769230769231,\n",
       " 350: 0.42857142857142855,\n",
       " 351: 0.42857142857142855,\n",
       " 352: 0.42857142857142855,\n",
       " 353: 0.42857142857142855,\n",
       " 354: 0.42857142857142855,\n",
       " 355: 0.42857142857142855,\n",
       " 356: 0.42857142857142855,\n",
       " 357: 0.42857142857142855,\n",
       " 358: 0.42857142857142855,\n",
       " 359: 0.42857142857142855,\n",
       " 360: 0.42857142857142855,\n",
       " 361: 0.42857142857142855,\n",
       " 362: 0.4444444444444444,\n",
       " 363: 0.4444444444444444,\n",
       " 364: 0.4444444444444444,\n",
       " 365: 0.45,\n",
       " 366: 0.45454545454545453,\n",
       " 367: 0.45454545454545453,\n",
       " 368: 0.45454545454545453,\n",
       " 369: 0.45454545454545453,\n",
       " 370: 0.45454545454545453,\n",
       " 371: 0.46153846153846156,\n",
       " 372: 0.46153846153846156,\n",
       " 373: 0.46153846153846156,\n",
       " 374: 0.46153846153846156,\n",
       " 375: 0.46153846153846156,\n",
       " 376: 0.4666666666666667,\n",
       " 377: 0.4666666666666667,\n",
       " 378: 0.4666666666666667,\n",
       " 379: 0.47058823529411764,\n",
       " 380: 0.47058823529411764,\n",
       " 381: 0.5,\n",
       " 382: 0.5,\n",
       " 383: 0.5,\n",
       " 384: 0.5,\n",
       " 385: 0.5,\n",
       " 386: 0.5,\n",
       " 387: 0.5,\n",
       " 388: 0.5,\n",
       " 389: 0.5,\n",
       " 390: 0.5,\n",
       " 391: 0.5,\n",
       " 392: 0.5,\n",
       " 393: 0.5,\n",
       " 394: 0.5,\n",
       " 395: 0.5,\n",
       " 396: 0.5,\n",
       " 397: 0.5,\n",
       " 398: 0.5,\n",
       " 399: 0.5,\n",
       " 400: 0.5,\n",
       " 401: 0.5,\n",
       " 402: 0.5,\n",
       " 403: 0.5,\n",
       " 404: 0.5,\n",
       " 405: 0.5,\n",
       " 406: 0.5,\n",
       " 407: 0.5,\n",
       " 408: 0.5,\n",
       " 409: 0.5,\n",
       " 410: 0.5,\n",
       " 411: 0.5,\n",
       " 412: 0.5,\n",
       " 413: 0.5,\n",
       " 414: 0.5,\n",
       " 415: 0.5,\n",
       " 416: 0.5,\n",
       " 417: 0.5,\n",
       " 418: 0.5,\n",
       " 419: 0.5,\n",
       " 420: 0.5,\n",
       " 421: 0.5,\n",
       " 422: 0.5,\n",
       " 423: 0.5,\n",
       " 424: 0.5,\n",
       " 425: 0.5,\n",
       " 426: 0.5,\n",
       " 427: 0.5,\n",
       " 428: 0.5,\n",
       " 429: 0.5,\n",
       " 430: 0.5,\n",
       " 431: 0.5,\n",
       " 432: 0.5,\n",
       " 433: 0.5,\n",
       " 434: 0.5,\n",
       " 435: 0.5,\n",
       " 436: 0.5,\n",
       " 437: 0.5,\n",
       " 438: 0.5,\n",
       " 439: 0.5,\n",
       " 440: 0.5,\n",
       " 441: 0.5,\n",
       " 442: 0.5,\n",
       " 443: 0.5,\n",
       " 444: 0.5,\n",
       " 445: 0.5,\n",
       " 446: 0.5,\n",
       " 447: 0.5,\n",
       " 448: 0.5,\n",
       " 449: 0.5,\n",
       " 450: 0.5,\n",
       " 451: 0.5,\n",
       " 452: 0.5,\n",
       " 453: 0.5,\n",
       " 454: 0.5,\n",
       " 455: 0.5,\n",
       " 456: 0.5,\n",
       " 457: 0.5,\n",
       " 458: 0.5,\n",
       " 459: 0.5,\n",
       " 460: 0.5,\n",
       " 461: 0.5,\n",
       " 462: 0.5,\n",
       " 463: 0.5,\n",
       " 464: 0.5,\n",
       " 465: 0.5,\n",
       " 466: 0.5,\n",
       " 467: 0.5,\n",
       " 468: 0.5,\n",
       " 469: 0.5,\n",
       " 470: 0.5,\n",
       " 471: 0.5,\n",
       " 472: 0.5,\n",
       " 473: 0.5,\n",
       " 474: 0.5,\n",
       " 475: 0.5,\n",
       " 476: 0.5,\n",
       " 477: 0.5,\n",
       " 478: 0.5,\n",
       " 479: 0.5,\n",
       " 480: 0.5,\n",
       " 481: 0.5,\n",
       " 482: 0.5,\n",
       " 483: 0.5,\n",
       " 484: 0.5384615384615384,\n",
       " 485: 0.5454545454545454,\n",
       " 486: 0.5454545454545454,\n",
       " 487: 0.5555555555555556,\n",
       " 488: 0.5555555555555556,\n",
       " 489: 0.5555555555555556,\n",
       " 490: 0.5555555555555556,\n",
       " 491: 0.5555555555555556,\n",
       " 492: 0.5555555555555556,\n",
       " 493: 0.5555555555555556,\n",
       " 494: 0.5555555555555556,\n",
       " 495: 0.5625,\n",
       " 496: 0.5625,\n",
       " 497: 0.5714285714285714,\n",
       " 498: 0.5714285714285714,\n",
       " 499: 0.5714285714285714,\n",
       " 500: 0.5714285714285714,\n",
       " 501: 0.5714285714285714,\n",
       " 502: 0.5714285714285714,\n",
       " 503: 0.5714285714285714,\n",
       " 504: 0.5714285714285714,\n",
       " 505: 0.5714285714285714,\n",
       " 506: 0.5714285714285714,\n",
       " 507: 0.5714285714285714,\n",
       " 508: 0.5714285714285714,\n",
       " 509: 0.5714285714285714,\n",
       " 510: 0.5714285714285714,\n",
       " 511: 0.5714285714285714,\n",
       " 512: 0.5714285714285714,\n",
       " 513: 0.5714285714285714,\n",
       " 514: 0.5714285714285714,\n",
       " 515: 0.5714285714285714,\n",
       " 516: 0.5714285714285714,\n",
       " 517: 0.5714285714285714,\n",
       " 518: 0.5714285714285714,\n",
       " 519: 0.5833333333333334,\n",
       " 520: 0.5833333333333334,\n",
       " 521: 0.5869565217391305,\n",
       " 522: 0.5882352941176471,\n",
       " 523: 0.6,\n",
       " 524: 0.6,\n",
       " 525: 0.6,\n",
       " 526: 0.6,\n",
       " 527: 0.6,\n",
       " 528: 0.6,\n",
       " 529: 0.6,\n",
       " 530: 0.6,\n",
       " 531: 0.6,\n",
       " 532: 0.6,\n",
       " 533: 0.6,\n",
       " 534: 0.6,\n",
       " 535: 0.6,\n",
       " 536: 0.6,\n",
       " 537: 0.6,\n",
       " 538: 0.6,\n",
       " 539: 0.6,\n",
       " 540: 0.6,\n",
       " 541: 0.6,\n",
       " 542: 0.6,\n",
       " 543: 0.6,\n",
       " 544: 0.6,\n",
       " 545: 0.6,\n",
       " 546: 0.6,\n",
       " 547: 0.6,\n",
       " 548: 0.6,\n",
       " 549: 0.6,\n",
       " 550: 0.6,\n",
       " 551: 0.6,\n",
       " 552: 0.6,\n",
       " 553: 0.6,\n",
       " 554: 0.6,\n",
       " 555: 0.6,\n",
       " 556: 0.6,\n",
       " 557: 0.6,\n",
       " 558: 0.6,\n",
       " 559: 0.6,\n",
       " 560: 0.6,\n",
       " 561: 0.6,\n",
       " 562: 0.6111111111111112,\n",
       " 563: 0.6153846153846154,\n",
       " 564: 0.6153846153846154,\n",
       " 565: 0.6153846153846154,\n",
       " 566: 0.6153846153846154,\n",
       " 567: 0.625,\n",
       " 568: 0.625,\n",
       " 569: 0.625,\n",
       " 570: 0.625,\n",
       " 571: 0.625,\n",
       " 572: 0.625,\n",
       " 573: 0.625,\n",
       " 574: 0.625,\n",
       " 575: 0.625,\n",
       " 576: 0.6285714285714286,\n",
       " 577: 0.631578947368421,\n",
       " 578: 0.631578947368421,\n",
       " 579: 0.6333333333333333,\n",
       " 580: 0.6363636363636364,\n",
       " 581: 0.6363636363636364,\n",
       " 582: 0.6363636363636364,\n",
       " 583: 0.6363636363636364,\n",
       " 584: 0.6363636363636364,\n",
       " 585: 0.6363636363636364,\n",
       " 586: 0.6363636363636364,\n",
       " 587: 0.6363636363636364,\n",
       " 588: 0.6363636363636364,\n",
       " 589: 0.64,\n",
       " 590: 0.6410256410256411,\n",
       " 591: 0.6428571428571429,\n",
       " 592: 0.6428571428571429,\n",
       " 593: 0.6428571428571429,\n",
       " 594: 0.6428571428571429,\n",
       " 595: 0.6470588235294118,\n",
       " 596: 0.65,\n",
       " 597: 0.65,\n",
       " 598: 0.65625,\n",
       " 599: 0.6585365853658537,\n",
       " 600: 0.6666666666666666,\n",
       " 601: 0.6666666666666666,\n",
       " 602: 0.6666666666666666,\n",
       " 603: 0.6666666666666666,\n",
       " 604: 0.6666666666666666,\n",
       " 605: 0.6666666666666666,\n",
       " 606: 0.6666666666666666,\n",
       " 607: 0.6666666666666666,\n",
       " 608: 0.6666666666666666,\n",
       " 609: 0.6666666666666666,\n",
       " 610: 0.6666666666666666,\n",
       " 611: 0.6666666666666666,\n",
       " 612: 0.6666666666666666,\n",
       " 613: 0.6666666666666666,\n",
       " 614: 0.6666666666666666,\n",
       " 615: 0.6666666666666666,\n",
       " 616: 0.6666666666666666,\n",
       " 617: 0.6666666666666666,\n",
       " 618: 0.6666666666666666,\n",
       " 619: 0.6666666666666666,\n",
       " 620: 0.6666666666666666,\n",
       " 621: 0.6666666666666666,\n",
       " 622: 0.6666666666666666,\n",
       " 623: 0.6666666666666666,\n",
       " 624: 0.6666666666666666,\n",
       " 625: 0.6666666666666666,\n",
       " 626: 0.6666666666666666,\n",
       " 627: 0.6666666666666666,\n",
       " 628: 0.6666666666666666,\n",
       " 629: 0.6666666666666666,\n",
       " 630: 0.6666666666666666,\n",
       " 631: 0.6666666666666666,\n",
       " 632: 0.6666666666666666,\n",
       " 633: 0.6666666666666666,\n",
       " 634: 0.6666666666666666,\n",
       " 635: 0.6666666666666666,\n",
       " 636: 0.6666666666666666,\n",
       " 637: 0.6666666666666666,\n",
       " 638: 0.6666666666666666,\n",
       " 639: 0.6666666666666666,\n",
       " 640: 0.6666666666666666,\n",
       " 641: 0.6666666666666666,\n",
       " 642: 0.6666666666666666,\n",
       " 643: 0.6666666666666666,\n",
       " 644: 0.6666666666666666,\n",
       " 645: 0.6666666666666666,\n",
       " 646: 0.6666666666666666,\n",
       " 647: 0.6666666666666666,\n",
       " 648: 0.6666666666666666,\n",
       " 649: 0.6666666666666666,\n",
       " 650: 0.6666666666666666,\n",
       " 651: 0.6666666666666666,\n",
       " 652: 0.6666666666666666,\n",
       " 653: 0.6666666666666666,\n",
       " 654: 0.6666666666666666,\n",
       " 655: 0.6666666666666666,\n",
       " 656: 0.6666666666666666,\n",
       " 657: 0.6666666666666666,\n",
       " 658: 0.6666666666666666,\n",
       " 659: 0.6666666666666666,\n",
       " 660: 0.6666666666666666,\n",
       " 661: 0.6666666666666666,\n",
       " 662: 0.6666666666666666,\n",
       " 663: 0.6666666666666666,\n",
       " 664: 0.6666666666666666,\n",
       " 665: 0.6666666666666666,\n",
       " 666: 0.6666666666666666,\n",
       " 667: 0.6666666666666666,\n",
       " 668: 0.6666666666666666,\n",
       " 669: 0.6666666666666666,\n",
       " 670: 0.6666666666666666,\n",
       " 671: 0.6666666666666666,\n",
       " 672: 0.6666666666666666,\n",
       " 673: 0.6666666666666666,\n",
       " 674: 0.6666666666666666,\n",
       " 675: 0.6666666666666666,\n",
       " 676: 0.6666666666666666,\n",
       " 677: 0.6666666666666666,\n",
       " 678: 0.6666666666666666,\n",
       " 679: 0.6666666666666666,\n",
       " 680: 0.68,\n",
       " 681: 0.68,\n",
       " 682: 0.6888888888888889,\n",
       " 683: 0.6923076923076923,\n",
       " 684: 0.6923076923076923,\n",
       " 685: 0.6923076923076923,\n",
       " 686: 0.6923076923076923,\n",
       " 687: 0.6923076923076923,\n",
       " 688: 0.6923076923076923,\n",
       " 689: 0.6923076923076923,\n",
       " 690: 0.7,\n",
       " 691: 0.7,\n",
       " 692: 0.7,\n",
       " 693: 0.7,\n",
       " 694: 0.7,\n",
       " 695: 0.7,\n",
       " 696: 0.7045454545454546,\n",
       " 697: 0.7073170731707317,\n",
       " 698: 0.7096774193548387,\n",
       " 699: 0.7142857142857143,\n",
       " 700: 0.7142857142857143,\n",
       " 701: 0.7142857142857143,\n",
       " 702: 0.7142857142857143,\n",
       " 703: 0.7142857142857143,\n",
       " 704: 0.7142857142857143,\n",
       " 705: 0.7142857142857143,\n",
       " 706: 0.7142857142857143,\n",
       " 707: 0.7142857142857143,\n",
       " 708: 0.7142857142857143,\n",
       " 709: 0.7142857142857143,\n",
       " 710: 0.7142857142857143,\n",
       " 711: 0.7142857142857143,\n",
       " 712: 0.7142857142857143,\n",
       " 713: 0.7142857142857143,\n",
       " 714: 0.7142857142857143,\n",
       " 715: 0.7142857142857143,\n",
       " 716: 0.7142857142857143,\n",
       " 717: 0.717391304347826,\n",
       " 718: 0.72,\n",
       " 719: 0.7272727272727273,\n",
       " 720: 0.7272727272727273,\n",
       " 721: 0.7272727272727273,\n",
       " 722: 0.7272727272727273,\n",
       " 723: 0.7272727272727273,\n",
       " 724: 0.7272727272727273,\n",
       " 725: 0.7272727272727273,\n",
       " 726: 0.7333333333333333,\n",
       " 727: 0.7333333333333333,\n",
       " 728: 0.7333333333333333,\n",
       " 729: 0.7368421052631579,\n",
       " 730: 0.7368421052631579,\n",
       " 731: 0.7368421052631579,\n",
       " 732: 0.7368421052631579,\n",
       " 733: 0.7368421052631579,\n",
       " 734: 0.7441860465116279,\n",
       " 735: 0.7446808510638298,\n",
       " 736: 0.75,\n",
       " 737: 0.75,\n",
       " 738: 0.75,\n",
       " 739: 0.75,\n",
       " 740: 0.75,\n",
       " 741: 0.75,\n",
       " 742: 0.75,\n",
       " 743: 0.75,\n",
       " 744: 0.75,\n",
       " 745: 0.75,\n",
       " 746: 0.75,\n",
       " 747: 0.75,\n",
       " 748: 0.75,\n",
       " 749: 0.75,\n",
       " 750: 0.75,\n",
       " 751: 0.75,\n",
       " 752: 0.75,\n",
       " 753: 0.75,\n",
       " 754: 0.75,\n",
       " 755: 0.75,\n",
       " 756: 0.75,\n",
       " 757: 0.75,\n",
       " 758: 0.75,\n",
       " 759: 0.75,\n",
       " 760: 0.75,\n",
       " 761: 0.75,\n",
       " 762: 0.75,\n",
       " 763: 0.75,\n",
       " 764: 0.75,\n",
       " 765: 0.75,\n",
       " 766: 0.75,\n",
       " 767: 0.75,\n",
       " 768: 0.75,\n",
       " 769: 0.75,\n",
       " 770: 0.75,\n",
       " 771: 0.75,\n",
       " 772: 0.75,\n",
       " 773: 0.75,\n",
       " 774: 0.7560975609756098,\n",
       " 775: 0.7619047619047619,\n",
       " 776: 0.7647058823529411,\n",
       " 777: 0.7692307692307693,\n",
       " 778: 0.7692307692307693,\n",
       " 779: 0.7692307692307693,\n",
       " 780: 0.7727272727272727,\n",
       " 781: 0.7727272727272727,\n",
       " 782: 0.7755102040816326,\n",
       " 783: 0.7777777777777778,\n",
       " 784: 0.7777777777777778,\n",
       " 785: 0.7777777777777778,\n",
       " 786: 0.7777777777777778,\n",
       " 787: 0.7777777777777778,\n",
       " 788: 0.7777777777777778,\n",
       " 789: 0.7777777777777778,\n",
       " 790: 0.7777777777777778,\n",
       " 791: 0.7777777777777778,\n",
       " 792: 0.7777777777777778,\n",
       " 793: 0.7777777777777778,\n",
       " 794: 0.7837837837837838,\n",
       " 795: 0.7857142857142857,\n",
       " 796: 0.7894736842105263,\n",
       " 797: 0.7894736842105263,\n",
       " 798: 0.7916666666666666,\n",
       " 799: 0.7954545454545454,\n",
       " 800: 0.7959183673469388,\n",
       " 801: 0.8,\n",
       " 802: 0.8,\n",
       " 803: 0.8,\n",
       " 804: 0.8,\n",
       " 805: 0.8,\n",
       " 806: 0.8,\n",
       " 807: 0.8,\n",
       " 808: 0.8,\n",
       " 809: 0.8,\n",
       " 810: 0.8,\n",
       " 811: 0.8,\n",
       " 812: 0.8,\n",
       " 813: 0.8,\n",
       " 814: 0.8,\n",
       " 815: 0.8,\n",
       " 816: 0.8,\n",
       " 817: 0.8,\n",
       " 818: 0.8,\n",
       " 819: 0.8,\n",
       " 820: 0.8,\n",
       " 821: 0.8,\n",
       " 822: 0.8,\n",
       " 823: 0.8,\n",
       " 824: 0.8,\n",
       " 825: 0.8,\n",
       " 826: 0.8,\n",
       " 827: 0.8,\n",
       " 828: 0.8,\n",
       " 829: 0.8,\n",
       " 830: 0.8,\n",
       " 831: 0.8,\n",
       " 832: 0.8,\n",
       " 833: 0.8,\n",
       " 834: 0.8,\n",
       " 835: 0.8,\n",
       " 836: 0.8,\n",
       " 837: 0.8,\n",
       " 838: 0.8,\n",
       " 839: 0.8,\n",
       " 840: 0.8,\n",
       " 841: 0.8,\n",
       " 842: 0.8055555555555556,\n",
       " 843: 0.8064516129032258,\n",
       " 844: 0.8076923076923077,\n",
       " 845: 0.8125,\n",
       " 846: 0.8181818181818182,\n",
       " 847: 0.8181818181818182,\n",
       " 848: 0.8181818181818182,\n",
       " 849: 0.8181818181818182,\n",
       " 850: 0.8181818181818182,\n",
       " 851: 0.8181818181818182,\n",
       " 852: 0.8181818181818182,\n",
       " 853: 0.8235294117647058,\n",
       " 854: 0.8235294117647058,\n",
       " 855: 0.8333333333333334,\n",
       " 856: 0.8333333333333334,\n",
       " 857: 0.8333333333333334,\n",
       " 858: 0.8333333333333334,\n",
       " 859: 0.8333333333333334,\n",
       " 860: 0.8333333333333334,\n",
       " 861: 0.8333333333333334,\n",
       " 862: 0.8333333333333334,\n",
       " 863: 0.8333333333333334,\n",
       " 864: 0.8333333333333334,\n",
       " 865: 0.8333333333333334,\n",
       " 866: 0.8333333333333334,\n",
       " 867: 0.8333333333333334,\n",
       " 868: 0.8333333333333334,\n",
       " 869: 0.8333333333333334,\n",
       " 870: 0.8333333333333334,\n",
       " 871: 0.8333333333333334,\n",
       " 872: 0.8333333333333334,\n",
       " 873: 0.8333333333333334,\n",
       " 874: 0.8333333333333334,\n",
       " 875: 0.8333333333333334,\n",
       " 876: 0.8333333333333334,\n",
       " 877: 0.84,\n",
       " 878: 0.8461538461538461,\n",
       " 879: 0.8571428571428571,\n",
       " 880: 0.8571428571428571,\n",
       " 881: 0.8571428571428571,\n",
       " 882: 0.8571428571428571,\n",
       " 883: 0.8571428571428571,\n",
       " 884: 0.8571428571428571,\n",
       " 885: 0.8571428571428571,\n",
       " 886: 0.8571428571428571,\n",
       " 887: 0.8571428571428571,\n",
       " 888: 0.8571428571428571,\n",
       " 889: 0.8571428571428571,\n",
       " 890: 0.8571428571428571,\n",
       " 891: 0.8571428571428571,\n",
       " 892: 0.8571428571428571,\n",
       " 893: 0.8571428571428571,\n",
       " 894: 0.8571428571428571,\n",
       " 895: 0.8571428571428571,\n",
       " 896: 0.8636363636363636,\n",
       " 897: 0.875,\n",
       " 898: 0.875,\n",
       " 899: 0.875,\n",
       " 900: 0.875,\n",
       " 901: 0.875,\n",
       " 902: 0.875,\n",
       " 903: 0.875,\n",
       " 904: 0.875,\n",
       " 905: 0.875,\n",
       " 906: 0.875,\n",
       " 907: 0.875,\n",
       " 908: 0.875,\n",
       " 909: 0.8888888888888888,\n",
       " 910: 0.8888888888888888,\n",
       " 911: 0.8888888888888888,\n",
       " 912: 0.8888888888888888,\n",
       " 913: 0.8888888888888888,\n",
       " 914: 0.9,\n",
       " 915: 0.9,\n",
       " 916: 0.9,\n",
       " 917: 0.9090909090909091,\n",
       " 918: 0.9230769230769231,\n",
       " 919: 0.9230769230769231,\n",
       " 920: 0.9285714285714286,\n",
       " 921: 0.9285714285714286,\n",
       " 922: 1.0,\n",
       " 923: 1.0,\n",
       " 924: 1.0,\n",
       " 925: 1.0,\n",
       " 926: 1.0,\n",
       " 927: 1.0,\n",
       " 928: 1.0,\n",
       " 929: 1.0,\n",
       " 930: 1.0,\n",
       " 931: 1.0,\n",
       " 932: 1.0,\n",
       " 933: 1.0,\n",
       " 934: 1.0,\n",
       " 935: 1.0,\n",
       " 936: 1.0,\n",
       " 937: 1.0,\n",
       " 938: 1.0,\n",
       " 939: 1.0,\n",
       " 940: 1.0,\n",
       " 941: 1.0,\n",
       " 942: 1.0,\n",
       " 943: 1.0,\n",
       " 944: 1.0,\n",
       " 945: 1.0,\n",
       " 946: 1.0,\n",
       " 947: 1.0,\n",
       " 948: 1.0,\n",
       " 949: 1.0,\n",
       " 950: 1.0,\n",
       " 951: 1.0,\n",
       " 952: 1.0,\n",
       " 953: 1.0,\n",
       " 954: 1.0,\n",
       " 955: 1.0,\n",
       " 956: 1.0,\n",
       " 957: 1.0,\n",
       " 958: 1.0,\n",
       " 959: 1.0,\n",
       " 960: 1.0,\n",
       " 961: 1.0,\n",
       " 962: 1.0,\n",
       " 963: 1.0,\n",
       " 964: 1.0,\n",
       " 965: 1.0,\n",
       " 966: 1.0,\n",
       " 967: 1.0,\n",
       " 968: 1.0,\n",
       " 969: 1.0,\n",
       " 970: 1.0,\n",
       " 971: 1.0,\n",
       " 972: 1.0,\n",
       " 973: 1.0,\n",
       " 974: 1.0,\n",
       " 975: 1.0,\n",
       " 976: 1.0,\n",
       " 977: 1.0,\n",
       " 978: 1.0,\n",
       " 979: 1.0,\n",
       " 980: 1.0,\n",
       " 981: 1.0,\n",
       " 982: 1.0,\n",
       " 983: 1.0,\n",
       " 984: 1.0,\n",
       " 985: 1.0,\n",
       " 986: 1.0,\n",
       " 987: 1.0,\n",
       " 988: 1.0,\n",
       " 989: 1.0,\n",
       " 990: 1.0,\n",
       " 991: 1.0,\n",
       " 992: 1.0,\n",
       " 993: 1.0,\n",
       " 994: 1.0,\n",
       " 995: 1.0,\n",
       " 996: 1.0,\n",
       " 997: 1.0,\n",
       " 998: 1.0,\n",
       " 999: 1.0,\n",
       " 1000: 1.0,\n",
       " ...}"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "problem=df.groupby('problem_id')['pretest'].mean().to_dict()\n",
    "#Returns a dictionary sorted from lowest value to highest value\n",
    "sort_problem={k: v for k, v in sorted(problem.items(), key=lambda item: item[1])}\n",
    "\n",
    "#Return dict of students from 1-99 where loweest ability is 1 and highest is 99 as judged by pretest\n",
    "prob_dict={}\n",
    "for i in range (len(sort_problem)):\n",
    "    prob_dict[i+1]=list(sort_problem.values())[i]\n",
    "prob_dict\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 238
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 722,
     "status": "ok",
     "timestamp": 1588044687619,
     "user": {
      "displayName": "Miranda Zhou",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjCjPyWdI9eqQrayg3ZrLT3p7BUfARIGayRDkGu=s64",
      "userId": "05223748671447807698"
     },
     "user_tz": 420
    },
    "id": "n0YNdaA2z4Xq",
    "outputId": "992a174b-9195-402f-8b7e-69f37e4ced57"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "problem_id\n",
       "8462      0\n",
       "8463      1\n",
       "53533     1\n",
       "53537     6\n",
       "53541     3\n",
       "         ..\n",
       "186693    1\n",
       "186694    1\n",
       "189369    1\n",
       "189408    0\n",
       "189565    0\n",
       "Name: ARRS, Length: 1108, dtype: int64"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('problem_id')['ARRS'].sum()\n",
    "#Returns a dictionary sorted from lowest value to highest value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "H3fZlnw5z4Xt"
   },
   "outputs": [],
   "source": [
    "user_df=df.groupby('user_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "b5otXMEGz4Xv"
   },
   "outputs": [],
   "source": [
    "df['post_id']=df['user_id']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 275
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 764,
     "status": "ok",
     "timestamp": 1588044690421,
     "user": {
      "displayName": "Miranda Zhou",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjCjPyWdI9eqQrayg3ZrLT3p7BUfARIGayRDkGu=s64",
      "userId": "05223748671447807698"
     },
     "user_tz": 420
    },
    "id": "IEa70Ohgz4Xx",
    "outputId": "2fa2e915-f2d6-4b8b-d188-53132f6404e2"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>assignment_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>ARRS</th>\n",
       "      <th>problem_id</th>\n",
       "      <th>sequence_opp</th>\n",
       "      <th>assignment_opp</th>\n",
       "      <th>ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)</th>\n",
       "      <th>...</th>\n",
       "      <th>attempt_count</th>\n",
       "      <th>cluster</th>\n",
       "      <th>pretest</th>\n",
       "      <th>posttest</th>\n",
       "      <th>first_three</th>\n",
       "      <th>avg_initial_#problems_to_master</th>\n",
       "      <th>avg_first_reassess</th>\n",
       "      <th>slip</th>\n",
       "      <th>guess</th>\n",
       "      <th>post_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>297282</td>\n",
       "      <td>5959</td>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>53621</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.671795</td>\n",
       "      <td>6.323529</td>\n",
       "      <td>0.684211</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>297283</td>\n",
       "      <td>5959</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>53621</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.650794</td>\n",
       "      <td>7.676471</td>\n",
       "      <td>0.761905</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>297283</td>\n",
       "      <td>5959</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>53621</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.697917</td>\n",
       "      <td>4.588235</td>\n",
       "      <td>0.782609</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>301372</td>\n",
       "      <td>5959</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "      <td>53621</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.720430</td>\n",
       "      <td>5.911765</td>\n",
       "      <td>0.736842</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>297300</td>\n",
       "      <td>5959</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>53621</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.463542</td>\n",
       "      <td>7.470588</td>\n",
       "      <td>0.562500</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   index  Unnamed: 0  assignment_id  sequence_id  user_id  ARRS  problem_id  \\\n",
       "0      0           0         297282         5959       41     0       53621   \n",
       "1      1           1         297283         5959       27     1       53621   \n",
       "2      2           2         297283         5959       22     1       53621   \n",
       "3      3           3         301372         5959       38     0       53621   \n",
       "4      4           4         297300         5959        3     1       53621   \n",
       "\n",
       "   sequence_opp  assignment_opp  \\\n",
       "0             1               1   \n",
       "1             2               2   \n",
       "2             1               1   \n",
       "3             4               1   \n",
       "4             1               1   \n",
       "\n",
       "   ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)  \\\n",
       "0                                                  1                                \n",
       "1                                                  1                                \n",
       "2                                                  1                                \n",
       "3                                                  2                                \n",
       "4                                                  1                                \n",
       "\n",
       "   ...  attempt_count  cluster  pretest  posttest  first_three  \\\n",
       "0  ...              1        0        0         1     0.671795   \n",
       "1  ...              1        0        1         1     0.650794   \n",
       "2  ...              1        0        0         1     0.697917   \n",
       "3  ...              0        1        1         0     0.720430   \n",
       "4  ...              1        0        0         0     0.463542   \n",
       "\n",
       "   avg_initial_#problems_to_master  avg_first_reassess      slip     guess  \\\n",
       "0                         6.323529            0.684211  0.087209  0.590881   \n",
       "1                         7.676471            0.761905  0.087209  0.590881   \n",
       "2                         4.588235            0.782609  0.087209  0.590881   \n",
       "3                         5.911765            0.736842  0.087209  0.590881   \n",
       "4                         7.470588            0.562500  0.087209  0.590881   \n",
       "\n",
       "   post_id  \n",
       "0       28  \n",
       "1       29  \n",
       "2       38  \n",
       "3       58  \n",
       "4        5  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "posttest=df.groupby('user_id')['posttest'].mean().to_dict()\n",
    "#Returns a dictionary sorted from lowest value to highest value\n",
    "sort_posttest={k: v for k, v in sorted(posttest.items(), key=lambda item: item[1])}\n",
    "\n",
    "#Return dict of students from 1-99 where loweest ability is 1 and highest is 99 as judged by pretest\n",
    "sort_dict={}\n",
    "for i in range (len(sort_posttest)):\n",
    "    sort_dict[i+1]=list(sort_posttest.values())[i]\n",
    "sort_dict\n",
    "\n",
    "df['post_id'].replace(list(sort_posttest.keys()), list(sort_dict.keys()), inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "WOG75R6Oz4X0"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 275
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 538,
     "status": "ok",
     "timestamp": 1588044694714,
     "user": {
      "displayName": "Miranda Zhou",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjCjPyWdI9eqQrayg3ZrLT3p7BUfARIGayRDkGu=s64",
      "userId": "05223748671447807698"
     },
     "user_tz": 420
    },
    "id": "QptgL-BEz4X2",
    "outputId": "4383bc23-ffd9-41a9-dd08-1f6cf92641b1"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>assignment_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>ARRS</th>\n",
       "      <th>problem_id</th>\n",
       "      <th>sequence_opp</th>\n",
       "      <th>assignment_opp</th>\n",
       "      <th>ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)</th>\n",
       "      <th>...</th>\n",
       "      <th>attempt_count</th>\n",
       "      <th>cluster</th>\n",
       "      <th>pretest</th>\n",
       "      <th>posttest</th>\n",
       "      <th>first_three</th>\n",
       "      <th>avg_initial_#problems_to_master</th>\n",
       "      <th>avg_first_reassess</th>\n",
       "      <th>slip</th>\n",
       "      <th>guess</th>\n",
       "      <th>post_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>297282</td>\n",
       "      <td>18</td>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>53621</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.671795</td>\n",
       "      <td>6.323529</td>\n",
       "      <td>0.684211</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>297283</td>\n",
       "      <td>18</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>53621</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.650794</td>\n",
       "      <td>7.676471</td>\n",
       "      <td>0.761905</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>297283</td>\n",
       "      <td>18</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>53621</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.697917</td>\n",
       "      <td>4.588235</td>\n",
       "      <td>0.782609</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>301372</td>\n",
       "      <td>18</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "      <td>53621</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.720430</td>\n",
       "      <td>5.911765</td>\n",
       "      <td>0.736842</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>297300</td>\n",
       "      <td>18</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>53621</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.463542</td>\n",
       "      <td>7.470588</td>\n",
       "      <td>0.562500</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   index  Unnamed: 0  assignment_id  sequence_id  user_id  ARRS  problem_id  \\\n",
       "0      0           0         297282           18       41     0       53621   \n",
       "1      1           1         297283           18       27     1       53621   \n",
       "2      2           2         297283           18       22     1       53621   \n",
       "3      3           3         301372           18       38     0       53621   \n",
       "4      4           4         297300           18        3     1       53621   \n",
       "\n",
       "   sequence_opp  assignment_opp  \\\n",
       "0             1               1   \n",
       "1             2               2   \n",
       "2             1               1   \n",
       "3             4               1   \n",
       "4             1               1   \n",
       "\n",
       "   ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)  \\\n",
       "0                                                  1                                \n",
       "1                                                  1                                \n",
       "2                                                  1                                \n",
       "3                                                  2                                \n",
       "4                                                  1                                \n",
       "\n",
       "   ...  attempt_count  cluster  pretest  posttest  first_three  \\\n",
       "0  ...              1        0        0         1     0.671795   \n",
       "1  ...              1        0        1         1     0.650794   \n",
       "2  ...              1        0        0         1     0.697917   \n",
       "3  ...              0        1        1         0     0.720430   \n",
       "4  ...              1        0        0         0     0.463542   \n",
       "\n",
       "   avg_initial_#problems_to_master  avg_first_reassess      slip     guess  \\\n",
       "0                         6.323529            0.684211  0.087209  0.590881   \n",
       "1                         7.676471            0.761905  0.087209  0.590881   \n",
       "2                         4.588235            0.782609  0.087209  0.590881   \n",
       "3                         5.911765            0.736842  0.087209  0.590881   \n",
       "4                         7.470588            0.562500  0.087209  0.590881   \n",
       "\n",
       "   post_id  \n",
       "0       28  \n",
       "1       29  \n",
       "2       38  \n",
       "3       58  \n",
       "4        5  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "posttest=df.groupby('sequence_id')['pretest'].mean().to_dict()\n",
    "#Returns a dictionary sorted from lowest value to highest value\n",
    "sort_posttest={k: v for k, v in sorted(posttest.items(), key=lambda item: item[1])}\n",
    "\n",
    "#Return dict of students from 1-99 where loweest ability is 1 and highest is 99 as judged by pretest\n",
    "sort_dict={}\n",
    "for i in range (len(sort_posttest)):\n",
    "    sort_dict[i+1]=list(sort_posttest.values())[i]\n",
    "sort_dict\n",
    "\n",
    "df['sequence_id'].replace(list(sort_posttest.keys()), list(sort_dict.keys()), inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 578
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 912,
     "status": "ok",
     "timestamp": 1588044697269,
     "user": {
      "displayName": "Miranda Zhou",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjCjPyWdI9eqQrayg3ZrLT3p7BUfARIGayRDkGu=s64",
      "userId": "05223748671447807698"
     },
     "user_tz": 420
    },
    "id": "-_k5PLeJz4X5",
    "outputId": "826b7e7f-74e6-4ec3-c740-6e04ebc1dc77"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: 0.19970193740685543,\n",
       " 2: 0.22573839662447256,\n",
       " 3: 0.25460829493087556,\n",
       " 4: 0.2727272727272727,\n",
       " 5: 0.4161849710982659,\n",
       " 6: 0.49,\n",
       " 7: 0.5241057542768274,\n",
       " 8: 0.6129032258064516,\n",
       " 9: 0.6685082872928176,\n",
       " 10: 0.6793557833089312,\n",
       " 11: 0.7145390070921985,\n",
       " 12: 0.7191780821917808,\n",
       " 13: 0.7193396226415094,\n",
       " 14: 0.7718832891246684,\n",
       " 15: 0.7857142857142857,\n",
       " 16: 0.7899159663865546,\n",
       " 17: 0.7948717948717948,\n",
       " 18: 0.8153526970954357,\n",
       " 19: 0.9325153374233128}"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sort_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "qvgaP0vuz4X8"
   },
   "outputs": [],
   "source": [
    "df['skill_post']=df['sequence_id']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 221
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 557,
     "status": "ok",
     "timestamp": 1588044700091,
     "user": {
      "displayName": "Miranda Zhou",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjCjPyWdI9eqQrayg3ZrLT3p7BUfARIGayRDkGu=s64",
      "userId": "05223748671447807698"
     },
     "user_tz": 420
    },
    "id": "8WNgTB8Jz4X9",
    "outputId": "bfda3409-f64a-474a-b148-e8d38cf4c995"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "61092    50\n",
       "61097    50\n",
       "61112    50\n",
       "61102    49\n",
       "61106    49\n",
       "         ..\n",
       "86998     1\n",
       "85358     1\n",
       "84627     1\n",
       "88074     1\n",
       "86991     1\n",
       "Name: problem_id, Length: 1108, dtype: int64"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['problem_id'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 275
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 618,
     "status": "ok",
     "timestamp": 1588044700665,
     "user": {
      "displayName": "Miranda Zhou",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjCjPyWdI9eqQrayg3ZrLT3p7BUfARIGayRDkGu=s64",
      "userId": "05223748671447807698"
     },
     "user_tz": 420
    },
    "id": "sL2dqfKvz4X_",
    "outputId": "f6bb080c-93a5-43b0-e129-40da94063a03"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>assignment_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>ARRS</th>\n",
       "      <th>problem_id</th>\n",
       "      <th>sequence_opp</th>\n",
       "      <th>assignment_opp</th>\n",
       "      <th>ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)</th>\n",
       "      <th>...</th>\n",
       "      <th>cluster</th>\n",
       "      <th>pretest</th>\n",
       "      <th>posttest</th>\n",
       "      <th>first_three</th>\n",
       "      <th>avg_initial_#problems_to_master</th>\n",
       "      <th>avg_first_reassess</th>\n",
       "      <th>slip</th>\n",
       "      <th>guess</th>\n",
       "      <th>post_id</th>\n",
       "      <th>skill_post</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>297282</td>\n",
       "      <td>18</td>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>53621</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.671795</td>\n",
       "      <td>6.323529</td>\n",
       "      <td>0.684211</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>28</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>297283</td>\n",
       "      <td>18</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>53621</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.650794</td>\n",
       "      <td>7.676471</td>\n",
       "      <td>0.761905</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>29</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>297283</td>\n",
       "      <td>18</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>53621</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.697917</td>\n",
       "      <td>4.588235</td>\n",
       "      <td>0.782609</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>38</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>301372</td>\n",
       "      <td>18</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "      <td>53621</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.720430</td>\n",
       "      <td>5.911765</td>\n",
       "      <td>0.736842</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>58</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>297300</td>\n",
       "      <td>18</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>53621</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.463542</td>\n",
       "      <td>7.470588</td>\n",
       "      <td>0.562500</td>\n",
       "      <td>0.087209</td>\n",
       "      <td>0.590881</td>\n",
       "      <td>5</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   index  Unnamed: 0  assignment_id  sequence_id  user_id  ARRS  problem_id  \\\n",
       "0      0           0         297282           18       41     0       53621   \n",
       "1      1           1         297283           18       27     1       53621   \n",
       "2      2           2         297283           18       22     1       53621   \n",
       "3      3           3         301372           18       38     0       53621   \n",
       "4      4           4         297300           18        3     1       53621   \n",
       "\n",
       "   sequence_opp  assignment_opp  \\\n",
       "0             1               1   \n",
       "1             2               2   \n",
       "2             1               1   \n",
       "3             4               1   \n",
       "4             1               1   \n",
       "\n",
       "   ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)  \\\n",
       "0                                                  1                                \n",
       "1                                                  1                                \n",
       "2                                                  1                                \n",
       "3                                                  2                                \n",
       "4                                                  1                                \n",
       "\n",
       "   ...  cluster  pretest  posttest  first_three  \\\n",
       "0  ...        0        0         1     0.671795   \n",
       "1  ...        0        1         1     0.650794   \n",
       "2  ...        0        0         1     0.697917   \n",
       "3  ...        1        1         0     0.720430   \n",
       "4  ...        0        0         0     0.463542   \n",
       "\n",
       "   avg_initial_#problems_to_master  avg_first_reassess      slip     guess  \\\n",
       "0                         6.323529            0.684211  0.087209  0.590881   \n",
       "1                         7.676471            0.761905  0.087209  0.590881   \n",
       "2                         4.588235            0.782609  0.087209  0.590881   \n",
       "3                         5.911765            0.736842  0.087209  0.590881   \n",
       "4                         7.470588            0.562500  0.087209  0.590881   \n",
       "\n",
       "   post_id  skill_post  \n",
       "0       28          18  \n",
       "1       29          18  \n",
       "2       38          18  \n",
       "3       58          18  \n",
       "4        5          18  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "posttest=df.groupby('sequence_id')['pretest'].mean().to_dict()\n",
    "#Returns a dictionary sorted from lowest value to highest value\n",
    "sort_posttest={k: v for k, v in sorted(posttest.items(), key=lambda item: item[1])}\n",
    "\n",
    "#Return dict of students from 1-99 where loweest ability is 1 and highest is 99 as judged by pretest\n",
    "sort_dict={}\n",
    "for i in range (len(sort_posttest)):\n",
    "    sort_dict[i+1]=list(sort_posttest.values())[i]\n",
    "sort_dict\n",
    "\n",
    "df['sequence_id'].replace(list(sort_posttest.keys()), list(sort_dict.keys()), inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "NzornhuV1xkn"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>assignment_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>ARRS</th>\n",
       "      <th>problem_id</th>\n",
       "      <th>sequence_opp</th>\n",
       "      <th>assignment_opp</th>\n",
       "      <th>ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)</th>\n",
       "      <th>...</th>\n",
       "      <th>cluster</th>\n",
       "      <th>pretest</th>\n",
       "      <th>posttest</th>\n",
       "      <th>first_three</th>\n",
       "      <th>avg_initial_#problems_to_master</th>\n",
       "      <th>avg_first_reassess</th>\n",
       "      <th>slip</th>\n",
       "      <th>guess</th>\n",
       "      <th>post_id</th>\n",
       "      <th>skill_post</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>index</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.024172</td>\n",
       "      <td>-0.135640</td>\n",
       "      <td>0.019064</td>\n",
       "      <td>-0.041731</td>\n",
       "      <td>0.308688</td>\n",
       "      <td>-0.092567</td>\n",
       "      <td>0.011076</td>\n",
       "      <td>-0.149220</td>\n",
       "      <td>...</td>\n",
       "      <td>0.017419</td>\n",
       "      <td>-0.040936</td>\n",
       "      <td>-0.036649</td>\n",
       "      <td>0.024638</td>\n",
       "      <td>-0.018652</td>\n",
       "      <td>-0.001522</td>\n",
       "      <td>-0.110415</td>\n",
       "      <td>0.003691</td>\n",
       "      <td>0.047003</td>\n",
       "      <td>-0.135640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.024172</td>\n",
       "      <td>-0.135640</td>\n",
       "      <td>0.019064</td>\n",
       "      <td>-0.041731</td>\n",
       "      <td>0.308688</td>\n",
       "      <td>-0.092567</td>\n",
       "      <td>0.011076</td>\n",
       "      <td>-0.149220</td>\n",
       "      <td>...</td>\n",
       "      <td>0.017419</td>\n",
       "      <td>-0.040936</td>\n",
       "      <td>-0.036649</td>\n",
       "      <td>0.024638</td>\n",
       "      <td>-0.018652</td>\n",
       "      <td>-0.001522</td>\n",
       "      <td>-0.110415</td>\n",
       "      <td>0.003691</td>\n",
       "      <td>0.047003</td>\n",
       "      <td>-0.135640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>assignment_id</th>\n",
       "      <td>0.024172</td>\n",
       "      <td>0.024172</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.172141</td>\n",
       "      <td>0.014494</td>\n",
       "      <td>-0.308074</td>\n",
       "      <td>-0.036473</td>\n",
       "      <td>0.390211</td>\n",
       "      <td>-0.172722</td>\n",
       "      <td>0.757638</td>\n",
       "      <td>...</td>\n",
       "      <td>0.819150</td>\n",
       "      <td>-0.007890</td>\n",
       "      <td>0.015311</td>\n",
       "      <td>0.021442</td>\n",
       "      <td>-0.018911</td>\n",
       "      <td>0.004982</td>\n",
       "      <td>0.039765</td>\n",
       "      <td>-0.002137</td>\n",
       "      <td>0.016862</td>\n",
       "      <td>-0.172141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sequence_id</th>\n",
       "      <td>-0.135640</td>\n",
       "      <td>-0.135640</td>\n",
       "      <td>-0.172141</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.098510</td>\n",
       "      <td>0.012952</td>\n",
       "      <td>-0.310902</td>\n",
       "      <td>-0.079835</td>\n",
       "      <td>-0.140127</td>\n",
       "      <td>0.086581</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.007414</td>\n",
       "      <td>0.434248</td>\n",
       "      <td>0.247699</td>\n",
       "      <td>0.039241</td>\n",
       "      <td>-0.047595</td>\n",
       "      <td>0.041469</td>\n",
       "      <td>-0.222495</td>\n",
       "      <td>0.244289</td>\n",
       "      <td>0.047878</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <td>0.019064</td>\n",
       "      <td>0.019064</td>\n",
       "      <td>0.014494</td>\n",
       "      <td>0.098510</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.041514</td>\n",
       "      <td>-0.026258</td>\n",
       "      <td>-0.210330</td>\n",
       "      <td>-0.231934</td>\n",
       "      <td>0.032619</td>\n",
       "      <td>...</td>\n",
       "      <td>0.025718</td>\n",
       "      <td>0.417765</td>\n",
       "      <td>0.232072</td>\n",
       "      <td>0.743433</td>\n",
       "      <td>-0.668366</td>\n",
       "      <td>0.574027</td>\n",
       "      <td>-0.051133</td>\n",
       "      <td>0.027090</td>\n",
       "      <td>0.565916</td>\n",
       "      <td>0.098510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ARRS</th>\n",
       "      <td>-0.041731</td>\n",
       "      <td>-0.041731</td>\n",
       "      <td>-0.308074</td>\n",
       "      <td>0.012952</td>\n",
       "      <td>-0.041514</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.009015</td>\n",
       "      <td>-0.223170</td>\n",
       "      <td>0.050563</td>\n",
       "      <td>-0.349546</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.399681</td>\n",
       "      <td>0.005121</td>\n",
       "      <td>-0.137934</td>\n",
       "      <td>-0.014978</td>\n",
       "      <td>0.008459</td>\n",
       "      <td>0.011810</td>\n",
       "      <td>0.015029</td>\n",
       "      <td>-0.015188</td>\n",
       "      <td>-0.036663</td>\n",
       "      <td>0.012952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>problem_id</th>\n",
       "      <td>0.308688</td>\n",
       "      <td>0.308688</td>\n",
       "      <td>-0.036473</td>\n",
       "      <td>-0.310902</td>\n",
       "      <td>-0.026258</td>\n",
       "      <td>-0.009015</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.029557</td>\n",
       "      <td>0.071785</td>\n",
       "      <td>-0.146677</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.006236</td>\n",
       "      <td>-0.103120</td>\n",
       "      <td>-0.135508</td>\n",
       "      <td>-0.025626</td>\n",
       "      <td>0.027308</td>\n",
       "      <td>-0.034746</td>\n",
       "      <td>0.003623</td>\n",
       "      <td>-0.290298</td>\n",
       "      <td>-0.030271</td>\n",
       "      <td>-0.310902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sequence_opp</th>\n",
       "      <td>-0.092567</td>\n",
       "      <td>-0.092567</td>\n",
       "      <td>0.390211</td>\n",
       "      <td>-0.079835</td>\n",
       "      <td>-0.210330</td>\n",
       "      <td>-0.223170</td>\n",
       "      <td>-0.029557</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.548485</td>\n",
       "      <td>0.578866</td>\n",
       "      <td>...</td>\n",
       "      <td>0.460301</td>\n",
       "      <td>-0.211208</td>\n",
       "      <td>-0.015793</td>\n",
       "      <td>-0.246767</td>\n",
       "      <td>0.262727</td>\n",
       "      <td>-0.200647</td>\n",
       "      <td>0.067445</td>\n",
       "      <td>-0.001990</td>\n",
       "      <td>-0.163728</td>\n",
       "      <td>-0.079835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>assignment_opp</th>\n",
       "      <td>0.011076</td>\n",
       "      <td>0.011076</td>\n",
       "      <td>-0.172722</td>\n",
       "      <td>-0.140127</td>\n",
       "      <td>-0.231934</td>\n",
       "      <td>0.050563</td>\n",
       "      <td>0.071785</td>\n",
       "      <td>0.548485</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.152751</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.172890</td>\n",
       "      <td>-0.219425</td>\n",
       "      <td>-0.101478</td>\n",
       "      <td>-0.267592</td>\n",
       "      <td>0.270452</td>\n",
       "      <td>-0.200410</td>\n",
       "      <td>0.051897</td>\n",
       "      <td>-0.041241</td>\n",
       "      <td>-0.156934</td>\n",
       "      <td>-0.140127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)</th>\n",
       "      <td>-0.149220</td>\n",
       "      <td>-0.149220</td>\n",
       "      <td>0.757638</td>\n",
       "      <td>0.086581</td>\n",
       "      <td>0.032619</td>\n",
       "      <td>-0.349546</td>\n",
       "      <td>-0.146677</td>\n",
       "      <td>0.578866</td>\n",
       "      <td>-0.152751</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.820624</td>\n",
       "      <td>0.088017</td>\n",
       "      <td>0.119745</td>\n",
       "      <td>0.021476</td>\n",
       "      <td>-0.009011</td>\n",
       "      <td>0.007451</td>\n",
       "      <td>0.054082</td>\n",
       "      <td>0.045263</td>\n",
       "      <td>0.022753</td>\n",
       "      <td>0.086581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>correct</th>\n",
       "      <td>-0.003519</td>\n",
       "      <td>-0.003519</td>\n",
       "      <td>0.061423</td>\n",
       "      <td>0.158555</td>\n",
       "      <td>0.181698</td>\n",
       "      <td>-0.026523</td>\n",
       "      <td>-0.068471</td>\n",
       "      <td>-0.031960</td>\n",
       "      <td>-0.074960</td>\n",
       "      <td>0.077953</td>\n",
       "      <td>...</td>\n",
       "      <td>0.069072</td>\n",
       "      <td>0.270025</td>\n",
       "      <td>0.124917</td>\n",
       "      <td>0.207062</td>\n",
       "      <td>-0.184865</td>\n",
       "      <td>0.168969</td>\n",
       "      <td>-0.025217</td>\n",
       "      <td>0.057156</td>\n",
       "      <td>0.161355</td>\n",
       "      <td>0.158555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hint_count</th>\n",
       "      <td>0.000685</td>\n",
       "      <td>0.000685</td>\n",
       "      <td>-0.053099</td>\n",
       "      <td>-0.148099</td>\n",
       "      <td>-0.197362</td>\n",
       "      <td>0.008690</td>\n",
       "      <td>0.078875</td>\n",
       "      <td>0.059195</td>\n",
       "      <td>0.137322</td>\n",
       "      <td>-0.067973</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.077850</td>\n",
       "      <td>-0.200036</td>\n",
       "      <td>-0.153478</td>\n",
       "      <td>-0.239329</td>\n",
       "      <td>0.235522</td>\n",
       "      <td>-0.163809</td>\n",
       "      <td>0.039486</td>\n",
       "      <td>-0.057082</td>\n",
       "      <td>-0.189274</td>\n",
       "      <td>-0.148099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>attempt_count</th>\n",
       "      <td>-0.015706</td>\n",
       "      <td>-0.015706</td>\n",
       "      <td>-0.043187</td>\n",
       "      <td>-0.028396</td>\n",
       "      <td>-0.042069</td>\n",
       "      <td>0.034638</td>\n",
       "      <td>0.004910</td>\n",
       "      <td>-0.011693</td>\n",
       "      <td>0.014574</td>\n",
       "      <td>-0.044506</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.048289</td>\n",
       "      <td>-0.052126</td>\n",
       "      <td>-0.041173</td>\n",
       "      <td>-0.042214</td>\n",
       "      <td>0.042883</td>\n",
       "      <td>-0.035851</td>\n",
       "      <td>0.000258</td>\n",
       "      <td>-0.012714</td>\n",
       "      <td>-0.016126</td>\n",
       "      <td>-0.028396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cluster</th>\n",
       "      <td>0.017419</td>\n",
       "      <td>0.017419</td>\n",
       "      <td>0.819150</td>\n",
       "      <td>-0.007414</td>\n",
       "      <td>0.025718</td>\n",
       "      <td>-0.399681</td>\n",
       "      <td>-0.006236</td>\n",
       "      <td>0.460301</td>\n",
       "      <td>-0.172890</td>\n",
       "      <td>0.820624</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.040567</td>\n",
       "      <td>0.072575</td>\n",
       "      <td>0.034722</td>\n",
       "      <td>-0.016804</td>\n",
       "      <td>0.004150</td>\n",
       "      <td>0.033593</td>\n",
       "      <td>-0.031031</td>\n",
       "      <td>0.019841</td>\n",
       "      <td>-0.007414</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pretest</th>\n",
       "      <td>-0.040936</td>\n",
       "      <td>-0.040936</td>\n",
       "      <td>-0.007890</td>\n",
       "      <td>0.434248</td>\n",
       "      <td>0.417765</td>\n",
       "      <td>0.005121</td>\n",
       "      <td>-0.103120</td>\n",
       "      <td>-0.211208</td>\n",
       "      <td>-0.219425</td>\n",
       "      <td>0.088017</td>\n",
       "      <td>...</td>\n",
       "      <td>0.040567</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.220481</td>\n",
       "      <td>0.321892</td>\n",
       "      <td>-0.291673</td>\n",
       "      <td>0.246452</td>\n",
       "      <td>-0.107467</td>\n",
       "      <td>0.092207</td>\n",
       "      <td>0.234987</td>\n",
       "      <td>0.434248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>posttest</th>\n",
       "      <td>-0.036649</td>\n",
       "      <td>-0.036649</td>\n",
       "      <td>0.015311</td>\n",
       "      <td>0.247699</td>\n",
       "      <td>0.232072</td>\n",
       "      <td>-0.137934</td>\n",
       "      <td>-0.135508</td>\n",
       "      <td>-0.015793</td>\n",
       "      <td>-0.101478</td>\n",
       "      <td>0.119745</td>\n",
       "      <td>...</td>\n",
       "      <td>0.072575</td>\n",
       "      <td>0.220481</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.295326</td>\n",
       "      <td>-0.260386</td>\n",
       "      <td>0.231256</td>\n",
       "      <td>-0.038075</td>\n",
       "      <td>0.062044</td>\n",
       "      <td>0.406085</td>\n",
       "      <td>0.247699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>first_three</th>\n",
       "      <td>0.024638</td>\n",
       "      <td>0.024638</td>\n",
       "      <td>0.021442</td>\n",
       "      <td>0.039241</td>\n",
       "      <td>0.743433</td>\n",
       "      <td>-0.014978</td>\n",
       "      <td>-0.025626</td>\n",
       "      <td>-0.246767</td>\n",
       "      <td>-0.267592</td>\n",
       "      <td>0.021476</td>\n",
       "      <td>...</td>\n",
       "      <td>0.034722</td>\n",
       "      <td>0.321892</td>\n",
       "      <td>0.295326</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.822839</td>\n",
       "      <td>0.715615</td>\n",
       "      <td>-0.013008</td>\n",
       "      <td>0.007958</td>\n",
       "      <td>0.716095</td>\n",
       "      <td>0.039241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>avg_initial_#problems_to_master</th>\n",
       "      <td>-0.018652</td>\n",
       "      <td>-0.018652</td>\n",
       "      <td>-0.018911</td>\n",
       "      <td>-0.047595</td>\n",
       "      <td>-0.668366</td>\n",
       "      <td>0.008459</td>\n",
       "      <td>0.027308</td>\n",
       "      <td>0.262727</td>\n",
       "      <td>0.270452</td>\n",
       "      <td>-0.009011</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.016804</td>\n",
       "      <td>-0.291673</td>\n",
       "      <td>-0.260386</td>\n",
       "      <td>-0.822839</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.550305</td>\n",
       "      <td>0.024825</td>\n",
       "      <td>-0.013178</td>\n",
       "      <td>-0.625531</td>\n",
       "      <td>-0.047595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>avg_first_reassess</th>\n",
       "      <td>-0.001522</td>\n",
       "      <td>-0.001522</td>\n",
       "      <td>0.004982</td>\n",
       "      <td>0.041469</td>\n",
       "      <td>0.574027</td>\n",
       "      <td>0.011810</td>\n",
       "      <td>-0.034746</td>\n",
       "      <td>-0.200647</td>\n",
       "      <td>-0.200410</td>\n",
       "      <td>0.007451</td>\n",
       "      <td>...</td>\n",
       "      <td>0.004150</td>\n",
       "      <td>0.246452</td>\n",
       "      <td>0.231256</td>\n",
       "      <td>0.715615</td>\n",
       "      <td>-0.550305</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.009515</td>\n",
       "      <td>0.013085</td>\n",
       "      <td>0.599065</td>\n",
       "      <td>0.041469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>slip</th>\n",
       "      <td>-0.110415</td>\n",
       "      <td>-0.110415</td>\n",
       "      <td>0.039765</td>\n",
       "      <td>-0.222495</td>\n",
       "      <td>-0.051133</td>\n",
       "      <td>0.015029</td>\n",
       "      <td>0.003623</td>\n",
       "      <td>0.067445</td>\n",
       "      <td>0.051897</td>\n",
       "      <td>0.054082</td>\n",
       "      <td>...</td>\n",
       "      <td>0.033593</td>\n",
       "      <td>-0.107467</td>\n",
       "      <td>-0.038075</td>\n",
       "      <td>-0.013008</td>\n",
       "      <td>0.024825</td>\n",
       "      <td>-0.009515</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.541264</td>\n",
       "      <td>-0.015026</td>\n",
       "      <td>-0.222495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>guess</th>\n",
       "      <td>0.003691</td>\n",
       "      <td>0.003691</td>\n",
       "      <td>-0.002137</td>\n",
       "      <td>0.244289</td>\n",
       "      <td>0.027090</td>\n",
       "      <td>-0.015188</td>\n",
       "      <td>-0.290298</td>\n",
       "      <td>-0.001990</td>\n",
       "      <td>-0.041241</td>\n",
       "      <td>0.045263</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.031031</td>\n",
       "      <td>0.092207</td>\n",
       "      <td>0.062044</td>\n",
       "      <td>0.007958</td>\n",
       "      <td>-0.013178</td>\n",
       "      <td>0.013085</td>\n",
       "      <td>-0.541264</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.005842</td>\n",
       "      <td>0.244289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>post_id</th>\n",
       "      <td>0.047003</td>\n",
       "      <td>0.047003</td>\n",
       "      <td>0.016862</td>\n",
       "      <td>0.047878</td>\n",
       "      <td>0.565916</td>\n",
       "      <td>-0.036663</td>\n",
       "      <td>-0.030271</td>\n",
       "      <td>-0.163728</td>\n",
       "      <td>-0.156934</td>\n",
       "      <td>0.022753</td>\n",
       "      <td>...</td>\n",
       "      <td>0.019841</td>\n",
       "      <td>0.234987</td>\n",
       "      <td>0.406085</td>\n",
       "      <td>0.716095</td>\n",
       "      <td>-0.625531</td>\n",
       "      <td>0.599065</td>\n",
       "      <td>-0.015026</td>\n",
       "      <td>0.005842</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.047878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>skill_post</th>\n",
       "      <td>-0.135640</td>\n",
       "      <td>-0.135640</td>\n",
       "      <td>-0.172141</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.098510</td>\n",
       "      <td>0.012952</td>\n",
       "      <td>-0.310902</td>\n",
       "      <td>-0.079835</td>\n",
       "      <td>-0.140127</td>\n",
       "      <td>0.086581</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.007414</td>\n",
       "      <td>0.434248</td>\n",
       "      <td>0.247699</td>\n",
       "      <td>0.039241</td>\n",
       "      <td>-0.047595</td>\n",
       "      <td>0.041469</td>\n",
       "      <td>-0.222495</td>\n",
       "      <td>0.244289</td>\n",
       "      <td>0.047878</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>23 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                       index  Unnamed: 0  \\\n",
       "index                                               1.000000    1.000000   \n",
       "Unnamed: 0                                          1.000000    1.000000   \n",
       "assignment_id                                       0.024172    0.024172   \n",
       "sequence_id                                        -0.135640   -0.135640   \n",
       "user_id                                             0.019064    0.019064   \n",
       "ARRS                                               -0.041731   -0.041731   \n",
       "problem_id                                          0.308688    0.308688   \n",
       "sequence_opp                                       -0.092567   -0.092567   \n",
       "assignment_opp                                      0.011076    0.011076   \n",
       "ARRS-check(oneMeansFirstWeek-TwomeansOneweekLat... -0.149220   -0.149220   \n",
       "correct                                            -0.003519   -0.003519   \n",
       "hint_count                                          0.000685    0.000685   \n",
       "attempt_count                                      -0.015706   -0.015706   \n",
       "cluster                                             0.017419    0.017419   \n",
       "pretest                                            -0.040936   -0.040936   \n",
       "posttest                                           -0.036649   -0.036649   \n",
       "first_three                                         0.024638    0.024638   \n",
       "avg_initial_#problems_to_master                    -0.018652   -0.018652   \n",
       "avg_first_reassess                                 -0.001522   -0.001522   \n",
       "slip                                               -0.110415   -0.110415   \n",
       "guess                                               0.003691    0.003691   \n",
       "post_id                                             0.047003    0.047003   \n",
       "skill_post                                         -0.135640   -0.135640   \n",
       "\n",
       "                                                    assignment_id  \\\n",
       "index                                                    0.024172   \n",
       "Unnamed: 0                                               0.024172   \n",
       "assignment_id                                            1.000000   \n",
       "sequence_id                                             -0.172141   \n",
       "user_id                                                  0.014494   \n",
       "ARRS                                                    -0.308074   \n",
       "problem_id                                              -0.036473   \n",
       "sequence_opp                                             0.390211   \n",
       "assignment_opp                                          -0.172722   \n",
       "ARRS-check(oneMeansFirstWeek-TwomeansOneweekLat...       0.757638   \n",
       "correct                                                  0.061423   \n",
       "hint_count                                              -0.053099   \n",
       "attempt_count                                           -0.043187   \n",
       "cluster                                                  0.819150   \n",
       "pretest                                                 -0.007890   \n",
       "posttest                                                 0.015311   \n",
       "first_three                                              0.021442   \n",
       "avg_initial_#problems_to_master                         -0.018911   \n",
       "avg_first_reassess                                       0.004982   \n",
       "slip                                                     0.039765   \n",
       "guess                                                   -0.002137   \n",
       "post_id                                                  0.016862   \n",
       "skill_post                                              -0.172141   \n",
       "\n",
       "                                                    sequence_id   user_id  \\\n",
       "index                                                 -0.135640  0.019064   \n",
       "Unnamed: 0                                            -0.135640  0.019064   \n",
       "assignment_id                                         -0.172141  0.014494   \n",
       "sequence_id                                            1.000000  0.098510   \n",
       "user_id                                                0.098510  1.000000   \n",
       "ARRS                                                   0.012952 -0.041514   \n",
       "problem_id                                            -0.310902 -0.026258   \n",
       "sequence_opp                                          -0.079835 -0.210330   \n",
       "assignment_opp                                        -0.140127 -0.231934   \n",
       "ARRS-check(oneMeansFirstWeek-TwomeansOneweekLat...     0.086581  0.032619   \n",
       "correct                                                0.158555  0.181698   \n",
       "hint_count                                            -0.148099 -0.197362   \n",
       "attempt_count                                         -0.028396 -0.042069   \n",
       "cluster                                               -0.007414  0.025718   \n",
       "pretest                                                0.434248  0.417765   \n",
       "posttest                                               0.247699  0.232072   \n",
       "first_three                                            0.039241  0.743433   \n",
       "avg_initial_#problems_to_master                       -0.047595 -0.668366   \n",
       "avg_first_reassess                                     0.041469  0.574027   \n",
       "slip                                                  -0.222495 -0.051133   \n",
       "guess                                                  0.244289  0.027090   \n",
       "post_id                                                0.047878  0.565916   \n",
       "skill_post                                             1.000000  0.098510   \n",
       "\n",
       "                                                        ARRS  problem_id  \\\n",
       "index                                              -0.041731    0.308688   \n",
       "Unnamed: 0                                         -0.041731    0.308688   \n",
       "assignment_id                                      -0.308074   -0.036473   \n",
       "sequence_id                                         0.012952   -0.310902   \n",
       "user_id                                            -0.041514   -0.026258   \n",
       "ARRS                                                1.000000   -0.009015   \n",
       "problem_id                                         -0.009015    1.000000   \n",
       "sequence_opp                                       -0.223170   -0.029557   \n",
       "assignment_opp                                      0.050563    0.071785   \n",
       "ARRS-check(oneMeansFirstWeek-TwomeansOneweekLat... -0.349546   -0.146677   \n",
       "correct                                            -0.026523   -0.068471   \n",
       "hint_count                                          0.008690    0.078875   \n",
       "attempt_count                                       0.034638    0.004910   \n",
       "cluster                                            -0.399681   -0.006236   \n",
       "pretest                                             0.005121   -0.103120   \n",
       "posttest                                           -0.137934   -0.135508   \n",
       "first_three                                        -0.014978   -0.025626   \n",
       "avg_initial_#problems_to_master                     0.008459    0.027308   \n",
       "avg_first_reassess                                  0.011810   -0.034746   \n",
       "slip                                                0.015029    0.003623   \n",
       "guess                                              -0.015188   -0.290298   \n",
       "post_id                                            -0.036663   -0.030271   \n",
       "skill_post                                          0.012952   -0.310902   \n",
       "\n",
       "                                                    sequence_opp  \\\n",
       "index                                                  -0.092567   \n",
       "Unnamed: 0                                             -0.092567   \n",
       "assignment_id                                           0.390211   \n",
       "sequence_id                                            -0.079835   \n",
       "user_id                                                -0.210330   \n",
       "ARRS                                                   -0.223170   \n",
       "problem_id                                             -0.029557   \n",
       "sequence_opp                                            1.000000   \n",
       "assignment_opp                                          0.548485   \n",
       "ARRS-check(oneMeansFirstWeek-TwomeansOneweekLat...      0.578866   \n",
       "correct                                                -0.031960   \n",
       "hint_count                                              0.059195   \n",
       "attempt_count                                          -0.011693   \n",
       "cluster                                                 0.460301   \n",
       "pretest                                                -0.211208   \n",
       "posttest                                               -0.015793   \n",
       "first_three                                            -0.246767   \n",
       "avg_initial_#problems_to_master                         0.262727   \n",
       "avg_first_reassess                                     -0.200647   \n",
       "slip                                                    0.067445   \n",
       "guess                                                  -0.001990   \n",
       "post_id                                                -0.163728   \n",
       "skill_post                                             -0.079835   \n",
       "\n",
       "                                                    assignment_opp  \\\n",
       "index                                                     0.011076   \n",
       "Unnamed: 0                                                0.011076   \n",
       "assignment_id                                            -0.172722   \n",
       "sequence_id                                              -0.140127   \n",
       "user_id                                                  -0.231934   \n",
       "ARRS                                                      0.050563   \n",
       "problem_id                                                0.071785   \n",
       "sequence_opp                                              0.548485   \n",
       "assignment_opp                                            1.000000   \n",
       "ARRS-check(oneMeansFirstWeek-TwomeansOneweekLat...       -0.152751   \n",
       "correct                                                  -0.074960   \n",
       "hint_count                                                0.137322   \n",
       "attempt_count                                             0.014574   \n",
       "cluster                                                  -0.172890   \n",
       "pretest                                                  -0.219425   \n",
       "posttest                                                 -0.101478   \n",
       "first_three                                              -0.267592   \n",
       "avg_initial_#problems_to_master                           0.270452   \n",
       "avg_first_reassess                                       -0.200410   \n",
       "slip                                                      0.051897   \n",
       "guess                                                    -0.041241   \n",
       "post_id                                                  -0.156934   \n",
       "skill_post                                               -0.140127   \n",
       "\n",
       "                                                    ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)  \\\n",
       "index                                                                                       -0.149220                                \n",
       "Unnamed: 0                                                                                  -0.149220                                \n",
       "assignment_id                                                                                0.757638                                \n",
       "sequence_id                                                                                  0.086581                                \n",
       "user_id                                                                                      0.032619                                \n",
       "ARRS                                                                                        -0.349546                                \n",
       "problem_id                                                                                  -0.146677                                \n",
       "sequence_opp                                                                                 0.578866                                \n",
       "assignment_opp                                                                              -0.152751                                \n",
       "ARRS-check(oneMeansFirstWeek-TwomeansOneweekLat...                                           1.000000                                \n",
       "correct                                                                                      0.077953                                \n",
       "hint_count                                                                                  -0.067973                                \n",
       "attempt_count                                                                               -0.044506                                \n",
       "cluster                                                                                      0.820624                                \n",
       "pretest                                                                                      0.088017                                \n",
       "posttest                                                                                     0.119745                                \n",
       "first_three                                                                                  0.021476                                \n",
       "avg_initial_#problems_to_master                                                             -0.009011                                \n",
       "avg_first_reassess                                                                           0.007451                                \n",
       "slip                                                                                         0.054082                                \n",
       "guess                                                                                        0.045263                                \n",
       "post_id                                                                                      0.022753                                \n",
       "skill_post                                                                                   0.086581                                \n",
       "\n",
       "                                                    ...   cluster   pretest  \\\n",
       "index                                               ...  0.017419 -0.040936   \n",
       "Unnamed: 0                                          ...  0.017419 -0.040936   \n",
       "assignment_id                                       ...  0.819150 -0.007890   \n",
       "sequence_id                                         ... -0.007414  0.434248   \n",
       "user_id                                             ...  0.025718  0.417765   \n",
       "ARRS                                                ... -0.399681  0.005121   \n",
       "problem_id                                          ... -0.006236 -0.103120   \n",
       "sequence_opp                                        ...  0.460301 -0.211208   \n",
       "assignment_opp                                      ... -0.172890 -0.219425   \n",
       "ARRS-check(oneMeansFirstWeek-TwomeansOneweekLat...  ...  0.820624  0.088017   \n",
       "correct                                             ...  0.069072  0.270025   \n",
       "hint_count                                          ... -0.077850 -0.200036   \n",
       "attempt_count                                       ... -0.048289 -0.052126   \n",
       "cluster                                             ...  1.000000  0.040567   \n",
       "pretest                                             ...  0.040567  1.000000   \n",
       "posttest                                            ...  0.072575  0.220481   \n",
       "first_three                                         ...  0.034722  0.321892   \n",
       "avg_initial_#problems_to_master                     ... -0.016804 -0.291673   \n",
       "avg_first_reassess                                  ...  0.004150  0.246452   \n",
       "slip                                                ...  0.033593 -0.107467   \n",
       "guess                                               ... -0.031031  0.092207   \n",
       "post_id                                             ...  0.019841  0.234987   \n",
       "skill_post                                          ... -0.007414  0.434248   \n",
       "\n",
       "                                                    posttest  first_three  \\\n",
       "index                                              -0.036649     0.024638   \n",
       "Unnamed: 0                                         -0.036649     0.024638   \n",
       "assignment_id                                       0.015311     0.021442   \n",
       "sequence_id                                         0.247699     0.039241   \n",
       "user_id                                             0.232072     0.743433   \n",
       "ARRS                                               -0.137934    -0.014978   \n",
       "problem_id                                         -0.135508    -0.025626   \n",
       "sequence_opp                                       -0.015793    -0.246767   \n",
       "assignment_opp                                     -0.101478    -0.267592   \n",
       "ARRS-check(oneMeansFirstWeek-TwomeansOneweekLat...  0.119745     0.021476   \n",
       "correct                                             0.124917     0.207062   \n",
       "hint_count                                         -0.153478    -0.239329   \n",
       "attempt_count                                      -0.041173    -0.042214   \n",
       "cluster                                             0.072575     0.034722   \n",
       "pretest                                             0.220481     0.321892   \n",
       "posttest                                            1.000000     0.295326   \n",
       "first_three                                         0.295326     1.000000   \n",
       "avg_initial_#problems_to_master                    -0.260386    -0.822839   \n",
       "avg_first_reassess                                  0.231256     0.715615   \n",
       "slip                                               -0.038075    -0.013008   \n",
       "guess                                               0.062044     0.007958   \n",
       "post_id                                             0.406085     0.716095   \n",
       "skill_post                                          0.247699     0.039241   \n",
       "\n",
       "                                                    avg_initial_#problems_to_master  \\\n",
       "index                                                                     -0.018652   \n",
       "Unnamed: 0                                                                -0.018652   \n",
       "assignment_id                                                             -0.018911   \n",
       "sequence_id                                                               -0.047595   \n",
       "user_id                                                                   -0.668366   \n",
       "ARRS                                                                       0.008459   \n",
       "problem_id                                                                 0.027308   \n",
       "sequence_opp                                                               0.262727   \n",
       "assignment_opp                                                             0.270452   \n",
       "ARRS-check(oneMeansFirstWeek-TwomeansOneweekLat...                        -0.009011   \n",
       "correct                                                                   -0.184865   \n",
       "hint_count                                                                 0.235522   \n",
       "attempt_count                                                              0.042883   \n",
       "cluster                                                                   -0.016804   \n",
       "pretest                                                                   -0.291673   \n",
       "posttest                                                                  -0.260386   \n",
       "first_three                                                               -0.822839   \n",
       "avg_initial_#problems_to_master                                            1.000000   \n",
       "avg_first_reassess                                                        -0.550305   \n",
       "slip                                                                       0.024825   \n",
       "guess                                                                     -0.013178   \n",
       "post_id                                                                   -0.625531   \n",
       "skill_post                                                                -0.047595   \n",
       "\n",
       "                                                    avg_first_reassess  \\\n",
       "index                                                        -0.001522   \n",
       "Unnamed: 0                                                   -0.001522   \n",
       "assignment_id                                                 0.004982   \n",
       "sequence_id                                                   0.041469   \n",
       "user_id                                                       0.574027   \n",
       "ARRS                                                          0.011810   \n",
       "problem_id                                                   -0.034746   \n",
       "sequence_opp                                                 -0.200647   \n",
       "assignment_opp                                               -0.200410   \n",
       "ARRS-check(oneMeansFirstWeek-TwomeansOneweekLat...            0.007451   \n",
       "correct                                                       0.168969   \n",
       "hint_count                                                   -0.163809   \n",
       "attempt_count                                                -0.035851   \n",
       "cluster                                                       0.004150   \n",
       "pretest                                                       0.246452   \n",
       "posttest                                                      0.231256   \n",
       "first_three                                                   0.715615   \n",
       "avg_initial_#problems_to_master                              -0.550305   \n",
       "avg_first_reassess                                            1.000000   \n",
       "slip                                                         -0.009515   \n",
       "guess                                                         0.013085   \n",
       "post_id                                                       0.599065   \n",
       "skill_post                                                    0.041469   \n",
       "\n",
       "                                                        slip     guess  \\\n",
       "index                                              -0.110415  0.003691   \n",
       "Unnamed: 0                                         -0.110415  0.003691   \n",
       "assignment_id                                       0.039765 -0.002137   \n",
       "sequence_id                                        -0.222495  0.244289   \n",
       "user_id                                            -0.051133  0.027090   \n",
       "ARRS                                                0.015029 -0.015188   \n",
       "problem_id                                          0.003623 -0.290298   \n",
       "sequence_opp                                        0.067445 -0.001990   \n",
       "assignment_opp                                      0.051897 -0.041241   \n",
       "ARRS-check(oneMeansFirstWeek-TwomeansOneweekLat...  0.054082  0.045263   \n",
       "correct                                            -0.025217  0.057156   \n",
       "hint_count                                          0.039486 -0.057082   \n",
       "attempt_count                                       0.000258 -0.012714   \n",
       "cluster                                             0.033593 -0.031031   \n",
       "pretest                                            -0.107467  0.092207   \n",
       "posttest                                           -0.038075  0.062044   \n",
       "first_three                                        -0.013008  0.007958   \n",
       "avg_initial_#problems_to_master                     0.024825 -0.013178   \n",
       "avg_first_reassess                                 -0.009515  0.013085   \n",
       "slip                                                1.000000 -0.541264   \n",
       "guess                                              -0.541264  1.000000   \n",
       "post_id                                            -0.015026  0.005842   \n",
       "skill_post                                         -0.222495  0.244289   \n",
       "\n",
       "                                                     post_id  skill_post  \n",
       "index                                               0.047003   -0.135640  \n",
       "Unnamed: 0                                          0.047003   -0.135640  \n",
       "assignment_id                                       0.016862   -0.172141  \n",
       "sequence_id                                         0.047878    1.000000  \n",
       "user_id                                             0.565916    0.098510  \n",
       "ARRS                                               -0.036663    0.012952  \n",
       "problem_id                                         -0.030271   -0.310902  \n",
       "sequence_opp                                       -0.163728   -0.079835  \n",
       "assignment_opp                                     -0.156934   -0.140127  \n",
       "ARRS-check(oneMeansFirstWeek-TwomeansOneweekLat...  0.022753    0.086581  \n",
       "correct                                             0.161355    0.158555  \n",
       "hint_count                                         -0.189274   -0.148099  \n",
       "attempt_count                                      -0.016126   -0.028396  \n",
       "cluster                                             0.019841   -0.007414  \n",
       "pretest                                             0.234987    0.434248  \n",
       "posttest                                            0.406085    0.247699  \n",
       "first_three                                         0.716095    0.039241  \n",
       "avg_initial_#problems_to_master                    -0.625531   -0.047595  \n",
       "avg_first_reassess                                  0.599065    0.041469  \n",
       "slip                                               -0.015026   -0.222495  \n",
       "guess                                               0.005842    0.244289  \n",
       "post_id                                             1.000000    0.047878  \n",
       "skill_post                                          0.047878    1.000000  \n",
       "\n",
       "[23 rows x 23 columns]"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Get problem_difficulty by average correct score\n",
    "df['problem_diff']=df['problem_id']\n",
    "problem=df.groupby('problem_diff')['pretest'].mean().to_dict()\n",
    "#Returns a dictionary sorted from lowest value to highest value\n",
    "sort_problem={k: v for k, v in sorted(problem.items(), key=lambda item: item[1])}\n",
    "\n",
    "#Return dict of students from 1-99 where loweest ability is 1 and highest is 99 as judged by pretest\n",
    "df['problem_diff'].replace(sort_problem, inplace=True)\n",
    "new_prob_list=df['problem_diff'].unique().tolist()\n",
    "new_prob_list.sort()\n",
    "new_prob_list\n",
    "new_prob_dict={}\n",
    "for i in range(len(new_prob_list)):\n",
    "    new_prob_dict[new_prob_list[i]]=i+1\n",
    "new_prob_dict    \n",
    "df['problem_diff'].replace(new_prob_dict, inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "125.0    776\n",
       "53.0     518\n",
       "77.0     480\n",
       "37.0     327\n",
       "62.0     270\n",
       "        ... \n",
       "54.0      13\n",
       "34.0      13\n",
       "14.0      13\n",
       "44.0      12\n",
       "122.0     11\n",
       "Name: problem_diff, Length: 125, dtype: int64"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['problem_diff'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4=df[df['problem_diff']==125]\n",
    "df4=df4[df4['correct']==1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    665\n",
       "0     66\n",
       "Name: posttest, dtype: int64"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4['posttest'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "19    324\n",
       "18    106\n",
       "11     80\n",
       "16     69\n",
       "9      57\n",
       "8      33\n",
       "12     23\n",
       "14     20\n",
       "6      19\n",
       "Name: sequence_id, dtype: int64"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4['sequence_id'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3=df[df['problem_diff']==3]\n",
    "df3=df3[df3['correct']==1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3=df[df['problem_diff']==3]\n",
    "df3=df3[df3['correct']==1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4=df[df['problem_diff']==4]\n",
    "df4=df4[df4['correct']==1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>assignment_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>ARRS</th>\n",
       "      <th>problem_id</th>\n",
       "      <th>sequence_opp</th>\n",
       "      <th>assignment_opp</th>\n",
       "      <th>ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)</th>\n",
       "      <th>...</th>\n",
       "      <th>pretest</th>\n",
       "      <th>posttest</th>\n",
       "      <th>first_three</th>\n",
       "      <th>avg_initial_#problems_to_master</th>\n",
       "      <th>avg_first_reassess</th>\n",
       "      <th>slip</th>\n",
       "      <th>guess</th>\n",
       "      <th>post_id</th>\n",
       "      <th>skill_post</th>\n",
       "      <th>problem_diff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3909</th>\n",
       "      <td>3909</td>\n",
       "      <td>3909</td>\n",
       "      <td>297287</td>\n",
       "      <td>1</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>86149</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.693122</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.826087</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>60</td>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3910</th>\n",
       "      <td>3910</td>\n",
       "      <td>3910</td>\n",
       "      <td>305297</td>\n",
       "      <td>1</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>86149</td>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.693122</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.826087</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>60</td>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3913</th>\n",
       "      <td>3913</td>\n",
       "      <td>3913</td>\n",
       "      <td>297286</td>\n",
       "      <td>1</td>\n",
       "      <td>75</td>\n",
       "      <td>1</td>\n",
       "      <td>86149</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.784000</td>\n",
       "      <td>4.588235</td>\n",
       "      <td>0.684211</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>68</td>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3914</th>\n",
       "      <td>3914</td>\n",
       "      <td>3914</td>\n",
       "      <td>305297</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>86149</td>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.535354</td>\n",
       "      <td>8.911765</td>\n",
       "      <td>0.608696</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>62</td>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3915</th>\n",
       "      <td>3915</td>\n",
       "      <td>3915</td>\n",
       "      <td>299396</td>\n",
       "      <td>1</td>\n",
       "      <td>73</td>\n",
       "      <td>0</td>\n",
       "      <td>86149</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.860215</td>\n",
       "      <td>4.058824</td>\n",
       "      <td>0.739130</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>51</td>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3919</th>\n",
       "      <td>3919</td>\n",
       "      <td>3919</td>\n",
       "      <td>297286</td>\n",
       "      <td>1</td>\n",
       "      <td>86</td>\n",
       "      <td>1</td>\n",
       "      <td>86149</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.820106</td>\n",
       "      <td>4.352941</td>\n",
       "      <td>0.894737</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>77</td>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3920</th>\n",
       "      <td>3920</td>\n",
       "      <td>3920</td>\n",
       "      <td>297304</td>\n",
       "      <td>1</td>\n",
       "      <td>72</td>\n",
       "      <td>0</td>\n",
       "      <td>86149</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.837333</td>\n",
       "      <td>3.352941</td>\n",
       "      <td>0.789474</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>89</td>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3921</th>\n",
       "      <td>3921</td>\n",
       "      <td>3921</td>\n",
       "      <td>297304</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>86149</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.661538</td>\n",
       "      <td>5.794118</td>\n",
       "      <td>0.578947</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3922</th>\n",
       "      <td>3922</td>\n",
       "      <td>3922</td>\n",
       "      <td>297287</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>86149</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.645833</td>\n",
       "      <td>6.294118</td>\n",
       "      <td>0.782609</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>40</td>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3923</th>\n",
       "      <td>3923</td>\n",
       "      <td>3923</td>\n",
       "      <td>297287</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>86149</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.650794</td>\n",
       "      <td>7.323529</td>\n",
       "      <td>0.647059</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3925</th>\n",
       "      <td>3925</td>\n",
       "      <td>3925</td>\n",
       "      <td>301166</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>86149</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>4.264706</td>\n",
       "      <td>0.695652</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>72</td>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3926</th>\n",
       "      <td>3926</td>\n",
       "      <td>3926</td>\n",
       "      <td>297286</td>\n",
       "      <td>1</td>\n",
       "      <td>96</td>\n",
       "      <td>1</td>\n",
       "      <td>86149</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.798942</td>\n",
       "      <td>5.264706</td>\n",
       "      <td>0.789474</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>83</td>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>12 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      index  Unnamed: 0  assignment_id  sequence_id  user_id  ARRS  \\\n",
       "3909   3909        3909         297287            1       29     0   \n",
       "3910   3910        3910         305297            1       29     0   \n",
       "3913   3913        3913         297286            1       75     1   \n",
       "3914   3914        3914         305297            1        1     0   \n",
       "3915   3915        3915         299396            1       73     0   \n",
       "3919   3919        3919         297286            1       86     1   \n",
       "3920   3920        3920         297304            1       72     0   \n",
       "3921   3921        3921         297304            1       17     0   \n",
       "3922   3922        3922         297287            1       14     0   \n",
       "3923   3923        3923         297287            1       12     1   \n",
       "3925   3925        3925         301166            1       18     0   \n",
       "3926   3926        3926         297286            1       96     1   \n",
       "\n",
       "      problem_id  sequence_opp  assignment_opp  \\\n",
       "3909       86149             5               5   \n",
       "3910       86149            11               3   \n",
       "3913       86149             4               4   \n",
       "3914       86149            12               3   \n",
       "3915       86149             4               1   \n",
       "3919       86149             2               2   \n",
       "3920       86149             4               4   \n",
       "3921       86149             2               2   \n",
       "3922       86149             4               4   \n",
       "3923       86149             4               4   \n",
       "3925       86149             9               2   \n",
       "3926       86149             2               2   \n",
       "\n",
       "      ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)  \\\n",
       "3909                                                  1                                \n",
       "3910                                                  3                                \n",
       "3913                                                  1                                \n",
       "3914                                                  3                                \n",
       "3915                                                  2                                \n",
       "3919                                                  1                                \n",
       "3920                                                  1                                \n",
       "3921                                                  1                                \n",
       "3922                                                  1                                \n",
       "3923                                                  1                                \n",
       "3925                                                  2                                \n",
       "3926                                                  1                                \n",
       "\n",
       "      ...  pretest  posttest  first_three  avg_initial_#problems_to_master  \\\n",
       "3909  ...        0         1     0.693122                         6.000000   \n",
       "3910  ...        0         1     0.693122                         6.000000   \n",
       "3913  ...        0         1     0.784000                         4.588235   \n",
       "3914  ...        0         1     0.535354                         8.911765   \n",
       "3915  ...        1         1     0.860215                         4.058824   \n",
       "3919  ...        1         1     0.820106                         4.352941   \n",
       "3920  ...        0         1     0.837333                         3.352941   \n",
       "3921  ...        0         1     0.661538                         5.794118   \n",
       "3922  ...        0         1     0.645833                         6.294118   \n",
       "3923  ...        0         0     0.650794                         7.323529   \n",
       "3925  ...        0         1     0.750000                         4.264706   \n",
       "3926  ...        0         1     0.798942                         5.264706   \n",
       "\n",
       "      avg_first_reassess      slip     guess  post_id  skill_post  \\\n",
       "3909            0.826087  0.311725  0.240064       60           1   \n",
       "3910            0.826087  0.311725  0.240064       60           1   \n",
       "3913            0.684211  0.311725  0.240064       68           1   \n",
       "3914            0.608696  0.311725  0.240064       62           1   \n",
       "3915            0.739130  0.311725  0.240064       51           1   \n",
       "3919            0.894737  0.311725  0.240064       77           1   \n",
       "3920            0.789474  0.311725  0.240064       89           1   \n",
       "3921            0.578947  0.311725  0.240064       21           1   \n",
       "3922            0.782609  0.311725  0.240064       40           1   \n",
       "3923            0.647059  0.311725  0.240064        7           1   \n",
       "3925            0.695652  0.311725  0.240064       72           1   \n",
       "3926            0.789474  0.311725  0.240064       83           1   \n",
       "\n",
       "      problem_diff  \n",
       "3909          10.0  \n",
       "3910          10.0  \n",
       "3913          10.0  \n",
       "3914          10.0  \n",
       "3915          10.0  \n",
       "3919          10.0  \n",
       "3920          10.0  \n",
       "3921          10.0  \n",
       "3922          10.0  \n",
       "3923          10.0  \n",
       "3925          10.0  \n",
       "3926          10.0  \n",
       "\n",
       "[12 rows x 24 columns]"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df10=df[df['problem_diff']==10]\n",
    "df10=df10[df10['correct']==1]\n",
    "df10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>assignment_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>ARRS</th>\n",
       "      <th>problem_id</th>\n",
       "      <th>sequence_opp</th>\n",
       "      <th>assignment_opp</th>\n",
       "      <th>ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)</th>\n",
       "      <th>...</th>\n",
       "      <th>pretest</th>\n",
       "      <th>posttest</th>\n",
       "      <th>first_three</th>\n",
       "      <th>avg_initial_#problems_to_master</th>\n",
       "      <th>avg_first_reassess</th>\n",
       "      <th>slip</th>\n",
       "      <th>guess</th>\n",
       "      <th>post_id</th>\n",
       "      <th>skill_post</th>\n",
       "      <th>problem_diff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4819</th>\n",
       "      <td>4819</td>\n",
       "      <td>4819</td>\n",
       "      <td>297287</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "      <td>86158</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.843750</td>\n",
       "      <td>4.294118</td>\n",
       "      <td>0.913043</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>90</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4820</th>\n",
       "      <td>4820</td>\n",
       "      <td>4820</td>\n",
       "      <td>305297</td>\n",
       "      <td>1</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>86158</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.693122</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.826087</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>60</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4822</th>\n",
       "      <td>4822</td>\n",
       "      <td>4822</td>\n",
       "      <td>297287</td>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>86158</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.756614</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>0.772727</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4823</th>\n",
       "      <td>4823</td>\n",
       "      <td>4823</td>\n",
       "      <td>305297</td>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>86158</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.756614</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>0.772727</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4824</th>\n",
       "      <td>4824</td>\n",
       "      <td>4824</td>\n",
       "      <td>297286</td>\n",
       "      <td>1</td>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "      <td>86158</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.612903</td>\n",
       "      <td>7.088235</td>\n",
       "      <td>0.555556</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4825</th>\n",
       "      <td>4825</td>\n",
       "      <td>4825</td>\n",
       "      <td>297287</td>\n",
       "      <td>1</td>\n",
       "      <td>88</td>\n",
       "      <td>0</td>\n",
       "      <td>86158</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.817204</td>\n",
       "      <td>4.676471</td>\n",
       "      <td>0.826087</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>53</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4826</th>\n",
       "      <td>4826</td>\n",
       "      <td>4826</td>\n",
       "      <td>311922</td>\n",
       "      <td>1</td>\n",
       "      <td>53</td>\n",
       "      <td>0</td>\n",
       "      <td>86158</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.697917</td>\n",
       "      <td>5.029412</td>\n",
       "      <td>0.652174</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>36</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4827</th>\n",
       "      <td>4827</td>\n",
       "      <td>4827</td>\n",
       "      <td>307230</td>\n",
       "      <td>1</td>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>86158</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.703704</td>\n",
       "      <td>4.764706</td>\n",
       "      <td>0.681818</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>41</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4828</th>\n",
       "      <td>4828</td>\n",
       "      <td>4828</td>\n",
       "      <td>297286</td>\n",
       "      <td>1</td>\n",
       "      <td>44</td>\n",
       "      <td>1</td>\n",
       "      <td>86158</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.788360</td>\n",
       "      <td>4.441176</td>\n",
       "      <td>0.789474</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>74</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4829</th>\n",
       "      <td>4829</td>\n",
       "      <td>4829</td>\n",
       "      <td>297303</td>\n",
       "      <td>1</td>\n",
       "      <td>52</td>\n",
       "      <td>1</td>\n",
       "      <td>86158</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.645833</td>\n",
       "      <td>4.882353</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4832</th>\n",
       "      <td>4832</td>\n",
       "      <td>4832</td>\n",
       "      <td>304007</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>86158</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.661538</td>\n",
       "      <td>5.794118</td>\n",
       "      <td>0.578947</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4834</th>\n",
       "      <td>4834</td>\n",
       "      <td>4834</td>\n",
       "      <td>305297</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>86158</td>\n",
       "      <td>15</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>4.264706</td>\n",
       "      <td>0.695652</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>72</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4835</th>\n",
       "      <td>4835</td>\n",
       "      <td>4835</td>\n",
       "      <td>310015</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>86158</td>\n",
       "      <td>18</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>4.264706</td>\n",
       "      <td>0.695652</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>72</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      index  Unnamed: 0  assignment_id  sequence_id  user_id  ARRS  \\\n",
       "4819   4819        4819         297287            1       24     0   \n",
       "4820   4820        4820         305297            1       29     0   \n",
       "4822   4822        4822         297287            1       30     0   \n",
       "4823   4823        4823         305297            1       30     0   \n",
       "4824   4824        4824         297286            1       37     1   \n",
       "4825   4825        4825         297287            1       88     0   \n",
       "4826   4826        4826         311922            1       53     0   \n",
       "4827   4827        4827         307230            1       32     0   \n",
       "4828   4828        4828         297286            1       44     1   \n",
       "4829   4829        4829         297303            1       52     1   \n",
       "4832   4832        4832         304007            1       17     0   \n",
       "4834   4834        4834         305297            1       18     0   \n",
       "4835   4835        4835         310015            1       18     0   \n",
       "\n",
       "      problem_id  sequence_opp  assignment_opp  \\\n",
       "4819       86158             4               4   \n",
       "4820       86158            12               4   \n",
       "4822       86158             2               2   \n",
       "4823       86158             7               2   \n",
       "4824       86158             4               4   \n",
       "4825       86158             3               3   \n",
       "4826       86158            10               1   \n",
       "4827       86158             9               4   \n",
       "4828       86158             4               4   \n",
       "4829       86158             2               2   \n",
       "4832       86158            12               4   \n",
       "4834       86158            15               4   \n",
       "4835       86158            18               3   \n",
       "\n",
       "      ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)  \\\n",
       "4819                                                  1                                \n",
       "4820                                                  3                                \n",
       "4822                                                  1                                \n",
       "4823                                                  3                                \n",
       "4824                                                  1                                \n",
       "4825                                                  1                                \n",
       "4826                                                  4                                \n",
       "4827                                                  3                                \n",
       "4828                                                  1                                \n",
       "4829                                                  1                                \n",
       "4832                                                  3                                \n",
       "4834                                                  3                                \n",
       "4835                                                  4                                \n",
       "\n",
       "      ...  pretest  posttest  first_three  avg_initial_#problems_to_master  \\\n",
       "4819  ...        0         1     0.843750                         4.294118   \n",
       "4820  ...        0         1     0.693122                         6.000000   \n",
       "4822  ...        0         0     0.756614                         4.500000   \n",
       "4823  ...        0         0     0.756614                         4.500000   \n",
       "4824  ...        1         1     0.612903                         7.088235   \n",
       "4825  ...        0         0     0.817204                         4.676471   \n",
       "4826  ...        0         1     0.697917                         5.029412   \n",
       "4827  ...        0         0     0.703704                         4.764706   \n",
       "4828  ...        0         1     0.788360                         4.441176   \n",
       "4829  ...        0         0     0.645833                         4.882353   \n",
       "4832  ...        0         1     0.661538                         5.794118   \n",
       "4834  ...        0         1     0.750000                         4.264706   \n",
       "4835  ...        0         1     0.750000                         4.264706   \n",
       "\n",
       "      avg_first_reassess      slip     guess  post_id  skill_post  \\\n",
       "4819            0.913043  0.311725  0.240064       90           1   \n",
       "4820            0.826087  0.311725  0.240064       60           1   \n",
       "4822            0.772727  0.311725  0.240064       35           1   \n",
       "4823            0.772727  0.311725  0.240064       35           1   \n",
       "4824            0.555556  0.311725  0.240064       11           1   \n",
       "4825            0.826087  0.311725  0.240064       53           1   \n",
       "4826            0.652174  0.311725  0.240064       36           1   \n",
       "4827            0.681818  0.311725  0.240064       41           1   \n",
       "4828            0.789474  0.311725  0.240064       74           1   \n",
       "4829            0.666667  0.311725  0.240064        9           1   \n",
       "4832            0.578947  0.311725  0.240064       21           1   \n",
       "4834            0.695652  0.311725  0.240064       72           1   \n",
       "4835            0.695652  0.311725  0.240064       72           1   \n",
       "\n",
       "      problem_diff  \n",
       "4819           4.0  \n",
       "4820           4.0  \n",
       "4822           4.0  \n",
       "4823           4.0  \n",
       "4824           4.0  \n",
       "4825           4.0  \n",
       "4826           4.0  \n",
       "4827           4.0  \n",
       "4828           4.0  \n",
       "4829           4.0  \n",
       "4832           4.0  \n",
       "4834           4.0  \n",
       "4835           4.0  \n",
       "\n",
       "[13 rows x 24 columns]"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [],
   "source": [
    "df5=df[df['problem_diff']==5]\n",
    "df5=df5[df5['correct']==1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>assignment_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>ARRS</th>\n",
       "      <th>problem_id</th>\n",
       "      <th>sequence_opp</th>\n",
       "      <th>assignment_opp</th>\n",
       "      <th>ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)</th>\n",
       "      <th>...</th>\n",
       "      <th>pretest</th>\n",
       "      <th>posttest</th>\n",
       "      <th>first_three</th>\n",
       "      <th>avg_initial_#problems_to_master</th>\n",
       "      <th>avg_first_reassess</th>\n",
       "      <th>slip</th>\n",
       "      <th>guess</th>\n",
       "      <th>post_id</th>\n",
       "      <th>skill_post</th>\n",
       "      <th>problem_diff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4791</th>\n",
       "      <td>4791</td>\n",
       "      <td>4791</td>\n",
       "      <td>299649</td>\n",
       "      <td>1</td>\n",
       "      <td>47</td>\n",
       "      <td>0</td>\n",
       "      <td>86173</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.822917</td>\n",
       "      <td>3.823529</td>\n",
       "      <td>0.947368</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>45</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4792</th>\n",
       "      <td>4792</td>\n",
       "      <td>4792</td>\n",
       "      <td>314203</td>\n",
       "      <td>1</td>\n",
       "      <td>47</td>\n",
       "      <td>0</td>\n",
       "      <td>86173</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.822917</td>\n",
       "      <td>3.823529</td>\n",
       "      <td>0.947368</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>45</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4793</th>\n",
       "      <td>4793</td>\n",
       "      <td>4793</td>\n",
       "      <td>297286</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>86173</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.538462</td>\n",
       "      <td>8.411765</td>\n",
       "      <td>0.722222</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4794</th>\n",
       "      <td>4794</td>\n",
       "      <td>4794</td>\n",
       "      <td>297287</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>86173</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.474747</td>\n",
       "      <td>10.500000</td>\n",
       "      <td>0.652174</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4795</th>\n",
       "      <td>4795</td>\n",
       "      <td>4795</td>\n",
       "      <td>305297</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>86173</td>\n",
       "      <td>14</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.619048</td>\n",
       "      <td>5.500000</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>80</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4796</th>\n",
       "      <td>4796</td>\n",
       "      <td>4796</td>\n",
       "      <td>297287</td>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>86173</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.650794</td>\n",
       "      <td>7.676471</td>\n",
       "      <td>0.761905</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4797</th>\n",
       "      <td>4797</td>\n",
       "      <td>4797</td>\n",
       "      <td>297286</td>\n",
       "      <td>1</td>\n",
       "      <td>54</td>\n",
       "      <td>1</td>\n",
       "      <td>86173</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.735450</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.789474</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>46</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4798</th>\n",
       "      <td>4798</td>\n",
       "      <td>4798</td>\n",
       "      <td>297286</td>\n",
       "      <td>1</td>\n",
       "      <td>55</td>\n",
       "      <td>1</td>\n",
       "      <td>86173</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.702564</td>\n",
       "      <td>5.441176</td>\n",
       "      <td>0.894737</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4799</th>\n",
       "      <td>4799</td>\n",
       "      <td>4799</td>\n",
       "      <td>307230</td>\n",
       "      <td>1</td>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>86173</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.703704</td>\n",
       "      <td>4.764706</td>\n",
       "      <td>0.681818</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>41</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4801</th>\n",
       "      <td>4801</td>\n",
       "      <td>4801</td>\n",
       "      <td>299649</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "      <td>86173</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.702564</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.611111</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>39</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4803</th>\n",
       "      <td>4803</td>\n",
       "      <td>4803</td>\n",
       "      <td>297303</td>\n",
       "      <td>1</td>\n",
       "      <td>81</td>\n",
       "      <td>1</td>\n",
       "      <td>86173</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.936508</td>\n",
       "      <td>3.029412</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>97</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4804</th>\n",
       "      <td>4804</td>\n",
       "      <td>4804</td>\n",
       "      <td>297286</td>\n",
       "      <td>1</td>\n",
       "      <td>94</td>\n",
       "      <td>1</td>\n",
       "      <td>86173</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.894180</td>\n",
       "      <td>3.323529</td>\n",
       "      <td>0.947368</td>\n",
       "      <td>0.311725</td>\n",
       "      <td>0.240064</td>\n",
       "      <td>82</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>12 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      index  Unnamed: 0  assignment_id  sequence_id  user_id  ARRS  \\\n",
       "4791   4791        4791         299649            1       47     0   \n",
       "4792   4792        4792         314203            1       47     0   \n",
       "4793   4793        4793         297286            1       20     1   \n",
       "4794   4794        4794         297287            1        4     0   \n",
       "4795   4795        4795         305297            1       26     0   \n",
       "4796   4796        4796         297287            1       27     0   \n",
       "4797   4797        4797         297286            1       54     1   \n",
       "4798   4798        4798         297286            1       55     1   \n",
       "4799   4799        4799         307230            1       32     0   \n",
       "4801   4801        4801         299649            1       21     0   \n",
       "4803   4803        4803         297303            1       81     1   \n",
       "4804   4804        4804         297286            1       94     1   \n",
       "\n",
       "      problem_id  sequence_opp  assignment_opp  \\\n",
       "4791       86173             5               1   \n",
       "4792       86173             7               1   \n",
       "4793       86173             7               7   \n",
       "4794       86173             5               5   \n",
       "4795       86173            14               4   \n",
       "4796       86173             4               4   \n",
       "4797       86173             3               3   \n",
       "4798       86173             4               4   \n",
       "4799       86173             7               2   \n",
       "4801       86173             8               1   \n",
       "4803       86173             3               3   \n",
       "4804       86173             1               1   \n",
       "\n",
       "      ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)  \\\n",
       "4791                                                  2                                \n",
       "4792                                                  4                                \n",
       "4793                                                  1                                \n",
       "4794                                                  1                                \n",
       "4795                                                  3                                \n",
       "4796                                                  1                                \n",
       "4797                                                  1                                \n",
       "4798                                                  1                                \n",
       "4799                                                  3                                \n",
       "4801                                                  2                                \n",
       "4803                                                  1                                \n",
       "4804                                                  1                                \n",
       "\n",
       "      ...  pretest  posttest  first_three  avg_initial_#problems_to_master  \\\n",
       "4791  ...        0         1     0.822917                         3.823529   \n",
       "4792  ...        0         1     0.822917                         3.823529   \n",
       "4793  ...        0         1     0.538462                         8.411765   \n",
       "4794  ...        0         1     0.474747                        10.500000   \n",
       "4795  ...        0         1     0.619048                         5.500000   \n",
       "4796  ...        0         1     0.650794                         7.676471   \n",
       "4797  ...        0         0     0.735450                         4.000000   \n",
       "4798  ...        0         0     0.702564                         5.441176   \n",
       "4799  ...        0         0     0.703704                         4.764706   \n",
       "4801  ...        0         1     0.702564                         5.000000   \n",
       "4803  ...        0         1     0.936508                         3.029412   \n",
       "4804  ...        1         0     0.894180                         3.323529   \n",
       "\n",
       "      avg_first_reassess      slip     guess  post_id  skill_post  \\\n",
       "4791            0.947368  0.311725  0.240064       45           1   \n",
       "4792            0.947368  0.311725  0.240064       45           1   \n",
       "4793            0.722222  0.311725  0.240064       13           1   \n",
       "4794            0.652174  0.311725  0.240064        3           1   \n",
       "4795            0.800000  0.311725  0.240064       80           1   \n",
       "4796            0.761905  0.311725  0.240064       29           1   \n",
       "4797            0.789474  0.311725  0.240064       46           1   \n",
       "4798            0.894737  0.311725  0.240064        8           1   \n",
       "4799            0.681818  0.311725  0.240064       41           1   \n",
       "4801            0.611111  0.311725  0.240064       39           1   \n",
       "4803            1.000000  0.311725  0.240064       97           1   \n",
       "4804            0.947368  0.311725  0.240064       82           1   \n",
       "\n",
       "      problem_diff  \n",
       "4791           5.0  \n",
       "4792           5.0  \n",
       "4793           5.0  \n",
       "4794           5.0  \n",
       "4795           5.0  \n",
       "4796           5.0  \n",
       "4797           5.0  \n",
       "4798           5.0  \n",
       "4799           5.0  \n",
       "4801           5.0  \n",
       "4803           5.0  \n",
       "4804           5.0  \n",
       "\n",
       "[12 rows x 24 columns]"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [],
   "source": [
    "df6=df[df['problem_diff']==6]\n",
    "df6=df6[df6['correct']==1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df2=df[df['guess']==0.140064]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>assignment_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>ARRS</th>\n",
       "      <th>problem_id</th>\n",
       "      <th>sequence_opp</th>\n",
       "      <th>assignment_opp</th>\n",
       "      <th>ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)</th>\n",
       "      <th>...</th>\n",
       "      <th>pretest</th>\n",
       "      <th>posttest</th>\n",
       "      <th>first_three</th>\n",
       "      <th>avg_initial_#problems_to_master</th>\n",
       "      <th>avg_first_reassess</th>\n",
       "      <th>slip</th>\n",
       "      <th>guess</th>\n",
       "      <th>post_id</th>\n",
       "      <th>skill_post</th>\n",
       "      <th>problem_diff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>0 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [index, Unnamed: 0, assignment_id, sequence_id, user_id, ARRS, problem_id, sequence_opp, assignment_opp, ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat), correct, hint_count, attempt_count, cluster, pretest, posttest, first_three, avg_initial_#problems_to_master, avg_first_reassess, slip, guess, post_id, skill_post, problem_diff]\n",
       "Index: []\n",
       "\n",
       "[0 rows x 24 columns]"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [],
   "source": [
    "features=['sequence_id', 'user_id', 'sequence_opp', 'assignment_opp', 'hint_count', 'attempt_count', 'cluster', 'pretest',\n",
    "        'first_three', 'avg_initial_#problems_to_master', 'problem_diff', 'guess', 'slip' ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calling Method \n",
    "\n",
    "param_grid_log= [{'penalty': ['l2', 'none'], 'solver': ['newton-cg', 'lbfgs', 'sag', 'saga']},\n",
    "    {'penalty' : ['l1'], 'solver': ['saga', 'liblinear',]},\n",
    "    {'penalty' : ['elasticnet'], 'solver': ['saga']}]\n",
    "                \n",
    "param_grid_log2 =    {'class_weight': ['balanced', None],\n",
    "     'C': [0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000]}\n",
    "\n",
    "#.1/.1 # 1st CV_ROC=.588 \n",
    "param_grid_sv={\n",
    "            'gamma': [0.001, 0.01, 0.1, 1, 10],\n",
    "            'C':[.001, .01, .1, 1, 10 ],\n",
    "            'kernel':['poly', 'sigmoid', 'rbf']}\n",
    "\n",
    "param_grid_kn={\n",
    "            'n_neighbors': [10, 20, 30, 40, 50, 60, 70, 80, 90],\n",
    "            'leaf_size':[1, 5, 10, 20, 35, 50],\n",
    "            'p':[1, 2]}\n",
    "#  gammas = [.05, 0.1, .2, .25, .5, .75] 2nd  \n",
    "#    Cs=[.05, .1, .2, .25, .5, .75 ]\n",
    "\n",
    "param_grid_gbc ={'learning_rate': (.01, .025, .05 ,.075, .1, .2, .35),  'n_estimators':[50 , 100,  350, 500, 1000]}\n",
    "#CV_ROC=.643  #.1, 3, \n",
    "#    'learning_rate': (.075, .1, .15, .2,),\n",
    "# 2nd    'max_depth': list(range(2,10))\n",
    "param_grid_gbc2 = { 'colsample_bytree': [.5, .6, .7, .8, .9, 1], 'max_depth': list(range(2,12))}\n",
    "\n",
    "param_grid_gbc3 = { 'gamma': [0, 1, 3, 5], 'subsample': [.7, .75, .8, .85, .9, 1]}\n",
    "\n",
    "#  (100, 7 first) CV_ROC= .652\n",
    "#2nd  param_grid ={ 'n_estimators':[50, 75, 100, 150, 200, 250, 350],\n",
    "#     'gamma': [0, .05, .1, .15, .25]\n",
    "\n",
    "\n",
    "param_grid_ex ={'max_depth': list(range(4,14)),'n_estimators': (100, 250, 500, 1000, 3000, 5000)}\n",
    "# 8/100       CV_roc =.627\n",
    "\n",
    "param_grid_rf2 ={'max_features': [ .4, .5, .6, .7, .8, .9, 1 ], 'min_samples_leaf': [2, 4, 8, 12, 20]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Implementing hyperparameter tuning via grid-search for K-nearest\n",
    "#takes a long time to run! \n",
    "def kn_model(X, y):\n",
    "    scores=['roc_auc']\n",
    "    for score in scores:\n",
    "        clf = GridSearchCV(KNeighborsClassifier(), param_grid=param_grid_kn, cv=10, scoring=score, n_jobs=-1)\n",
    "        start= timer()\n",
    "        grid_result=clf.fit(X, y)\n",
    "        end = timer()\n",
    "        print (end-start)\n",
    "        best_params = grid_result.best_params_\n",
    "        print(\"Best parameters set found on development set:\")\n",
    "        print()\n",
    "        print(clf.best_params_)\n",
    "        print()\n",
    "        print(\"Grid scores on development set:\")\n",
    "        print()\n",
    "        means = clf.cv_results_['mean_test_score']\n",
    "        stds = clf.cv_results_['std_test_score']\n",
    "        for mean, std, params in zip(means, stds, clf.cv_results_['params']):\n",
    "            print(\"%0.3f (+/-%0.03f) for %r\"\n",
    "                  % (mean, std * 2, params))\n",
    "        print()\n",
    "    return grid_result\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [],
   "source": [
    "def log_model(X, y): \n",
    "    scores=['roc_auc']\n",
    "    clf=GridSearchCV(LogisticRegression(random_state=42, l1_ratio=0, max_iter=2000),\n",
    "                     param_grid=param_grid_log, cv=10,refit='roc_auc', scoring=scores, n_jobs=-1)\n",
    "    grid_result=clf.fit(X, y) \n",
    "    best_params = grid_result.best_params_\n",
    "    print(clf.cv_results_)\n",
    "    print(\"Best parameters set found on development set:\")\n",
    "    print()\n",
    "    print(clf.best_params_)\n",
    "    print()\n",
    "    print(\"Grid scores on development set:\")\n",
    "    print()\n",
    "    means = clf.cv_results_['mean_test_roc_auc']\n",
    "    stds = clf.cv_results_['std_test_roc_auc']\n",
    "    for mean, std, params in zip(means, stds, clf.cv_results_['params']):\n",
    "        print(\"%0.3f (+/-%0.03f) for %r\"\n",
    "                % (mean, std * 2, params))\n",
    "    print()\n",
    "    return grid_result, clf.cv_results_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Perform grid-search to select max_depth and N_estimators for RandomForestClassification.\n",
    "def ex_model(X, y):# Perform Grid-Search\n",
    "    scores=['roc_auc']\n",
    "    for score in scores:\n",
    "        clf = GridSearchCV(ExtraTreesClassifier(random_state=42), param_grid_ex, cv=5, scoring=score, n_jobs=-1)\n",
    "        start= timer()\n",
    "        grid_result=clf.fit(X, y)\n",
    "        end = timer()\n",
    "        print (end-start)\n",
    "        best_params = grid_result.best_params_\n",
    "        print(\"Best parameters set found on development set:\")\n",
    "        print()\n",
    "        print(clf.best_params_)\n",
    "        print()\n",
    "        print(\"Grid scores on development set:\")\n",
    "        print()\n",
    "        means = clf.cv_results_['mean_test_score']\n",
    "        stds = clf.cv_results_['std_test_score']\n",
    "        for mean, std, params in zip(means, stds, clf.cv_results_['params']):\n",
    "            print(\"%0.3f (+/-%0.03f) for %r\"\n",
    "                  % (mean, std * 2, params))\n",
    "        print()\n",
    "    return grid_result, clf.cv_results_\n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gbc_model(X, y):# Perform Grid-Search on gradient boosted model \n",
    "    scores=['roc_auc']\n",
    "    for score in scores:\n",
    "        clf = GridSearchCV(xgb.XGBClassifier(random_state=42, objective= 'binary:logistic', gamma=0, max_depth=4)\n",
    "                           , param_grid_gbc, cv=10, scoring=score, n_jobs=-1)\n",
    "        start= timer()\n",
    "        grid_result=clf.fit(X, y)\n",
    "        end = timer()\n",
    "        print (end-start)\n",
    "        best_params = grid_result.best_params_\n",
    "        print(\"Best parameters set found on development set:\")\n",
    "        print()\n",
    "        print(clf.best_params_)\n",
    "        print()\n",
    "        print(\"Grid scores on development set:\")\n",
    "        print()\n",
    "        means = clf.cv_results_['mean_test_score']\n",
    "        stds = clf.cv_results_['std_test_score']\n",
    "        for mean, std, params in zip(means, stds, clf.cv_results_['params']):\n",
    "            print(\"%0.3f (+/-%0.03f) for %r\"\n",
    "                  % (mean, std * 2, params))\n",
    "        print()\n",
    "    return grid_result, clf.cv_results_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [],
   "source": [
    "param_grid_rf ={'max_depth': list(range(5,13)), 'n_estimators': [100, 250, 500, 1000]}\n",
    "\n",
    "\n",
    "def rfr_model(X, y):# Perform Grid-Search\n",
    "    scores=['roc_auc']\n",
    "    for score in scores:\n",
    "        start=timer()\n",
    "        clf = GridSearchCV(RandomForestClassifier(random_state=42), param_grid_rf, cv=10, scoring=score, n_jobs=-1)\n",
    "        start= timer()\n",
    "        grid_result=clf.fit(X, y)\n",
    "        end = timer()\n",
    "        print (end-start)\n",
    "        best_params = grid_result.best_params_\n",
    "        print(\"Best parameters set found on development set:\")\n",
    "        print()\n",
    "        print(clf.best_params_)\n",
    "        print()\n",
    "        print(\"Grid scores on development set:\")\n",
    "        print()\n",
    "        means = clf.cv_results_['mean_test_score']\n",
    "        stds = clf.cv_results_['std_test_score']\n",
    "        for mean, std, params in zip(means, stds, clf.cv_results_['params']):\n",
    "            print(\"%0.3f (+/-%0.03f) for %r\"\n",
    "                  % (mean, std * 2, params))\n",
    "        print()\n",
    "    return grid_result, clf.cv_results_\n",
    "\n",
    "def gbc_model2(X, y,  n_estimators, learning_rate):\n",
    "    scores=['roc_auc']\n",
    "    for score in scores:\n",
    "        clf = GridSearchCV(xgb.XGBClassifier(random_state=42,  n_estimators=n_estimators, objective= 'binary:logistic',\n",
    "                        learning_rate=learning_rate), param_grid_gbc2, cv=5, scoring=score, n_jobs=-1)\n",
    "        start= timer()\n",
    "        grid_result=clf.fit(X, y)\n",
    "        end = timer()\n",
    "        print (end-start)\n",
    "        best_params = grid_result.best_params_\n",
    "        print(\"Best parameters set found on development set:\")\n",
    "        print()\n",
    "        print(clf.best_params_)\n",
    "        print()\n",
    "        print(\"Grid scores on development set:\")\n",
    "        print()\n",
    "        means = clf.cv_results_['mean_test_score']\n",
    "        stds = clf.cv_results_['std_test_score']\n",
    "        for mean, std, params in zip(means, stds, clf.cv_results_['params']):\n",
    "            print(\"%0.3f (+/-%0.03f) for %r\"\n",
    "                  % (mean, std * 2, params))\n",
    "        print()\n",
    "    return grid_result, clf.cv_results_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [],
   "source": [
    "def log_model2(X, y, penalty, solver):\n",
    "    scores=['roc_auc']\n",
    "#     class_weight = [{1:0.5, 0:0.5}, {1:0.4, 0:0.6}, {1:0.6, 0:0.4}, {1:0.7, 0:0.3}, {1:0.8, 0:0.2}, {1:.9,0:.1}]\n",
    "#     solver = ['liblinear', 'saga' ]\n",
    "\n",
    "    clf=GridSearchCV(LogisticRegression(random_state=42, penalty=penalty, solver=solver, max_iter=2000), \n",
    "                     param_grid=param_grid_log2, cv=10, scoring=scores,refit='roc_auc', n_jobs=-1) \n",
    "    start= timer()\n",
    "    grid_result=clf.fit(X, y)\n",
    "    end = timer()\n",
    "    print (end-start) \n",
    "    best_params = grid_result.best_params_\n",
    "    print(\"Best parameters set found on development set:\")\n",
    "    print()\n",
    "    print(clf.best_params_)\n",
    "    print()\n",
    "    print(\"Grid scores on development set:\")\n",
    "    print()\n",
    "    means = clf.cv_results_['mean_test_roc_auc']\n",
    "    stds = clf.cv_results_['std_test_roc_auc']\n",
    "    for mean, std, params in zip(means, stds, clf.cv_results_['params']):\n",
    "        print(\"%0.3f (+/-%0.03f) for %r\"\n",
    "                % (mean, std * 2, params))\n",
    "    print()\n",
    "    return grid_result, clf.cv_results_\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [],
   "source": [
    "def rfr_model2(X, y, max_depth, n_estimators):\n",
    "    scores=['roc_auc']\n",
    "    for score in scores:\n",
    "        clf = GridSearchCV(RandomForestClassifier(max_depth=max_depth, \n",
    "            n_estimators=n_estimators, random_state=42), param_grid_rf2, cv=5, scoring=score, n_jobs=-1)\n",
    "        start= timer()\n",
    "        grid_result=clf.fit(X, y)\n",
    "        end = timer()\n",
    "        print (end-start)\n",
    "        best_params = grid_result.best_params_\n",
    "        print(\"Best parameters set found on development set:\")\n",
    "        print()\n",
    "        print(clf.best_params_)\n",
    "        print()\n",
    "        print(\"Grid scores on development set:\")\n",
    "        print()\n",
    "        means = clf.cv_results_['mean_test_score']\n",
    "        stds = clf.cv_results_['std_test_score']\n",
    "        for mean, std, params in zip(means, stds, clf.cv_results_['params']):\n",
    "            print(\"%0.3f (+/-%0.03f) for %r\"\n",
    "                  % (mean, std * 2, params))\n",
    "        print()\n",
    "    return grid_result, clf.cv_results_\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gbc_model3(X, y,  n_estimators, learning_rate, max_depth, colsample_bytree):\n",
    "    scores=['roc_auc']\n",
    "    for score in scores:\n",
    "        clf = GridSearchCV(xgb.XGBClassifier(random_state=42,  n_estimators=n_estimators, objective= 'binary:logistic',\n",
    "                        learning_rate=learning_rate, colsample_bytree=colsample_bytree, max_depth=max_depth), \n",
    "                        param_grid_gbc3, cv=5, scoring=score, n_jobs=-1)\n",
    "        start= timer()\n",
    "        grid_result=clf.fit(X, y)\n",
    "        end = timer()\n",
    "        print (end-start)\n",
    "        best_params = grid_result.best_params_\n",
    "        print(\"Best parameters set found on development set:\")\n",
    "        print()\n",
    "        print(clf.best_params_)\n",
    "        print()\n",
    "        print(\"Grid scores on development set:\")\n",
    "        print()\n",
    "        means = clf.cv_results_['mean_test_score']\n",
    "        stds = clf.cv_results_['std_test_score']\n",
    "        for mean, std, params in zip(means, stds, clf.cv_results_['params']):\n",
    "            print(\"%0.3f (+/-%0.03f) for %r\"\n",
    "                  % (mean, std * 2, params))\n",
    "        print()\n",
    "    return grid_result, clf.cv_results_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "random.seed(42)\n",
    "train_list=random.sample(range(1,100), 20)\n",
    "X_test3=df[df['user_id'].isin(train_list)]\n",
    "X_train3=df[df['user_id'].isin(train_list)==False]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train3=X_train3['posttest']\n",
    "y_test3=X_test3['posttest']\n",
    "y_test4=X_test3['correct']\n",
    "y_train4=X_train3['correct']\n",
    "X_train3=X_train3[features]\n",
    "X_test3=X_test3[features]\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'mean_fit_time': array([ 0.45194101,  2.33975103, 10.24863763, 12.63742263,  0.38857613,\n",
      "        1.96077056, 10.90192099, 14.97207904, 18.51483786,  0.80613518,\n",
      "       11.14847908]), 'std_fit_time': array([0.03500682, 0.31981344, 0.35666591, 0.66859339, 0.04508258,\n",
      "       0.26222958, 0.63025055, 1.3381421 , 1.36663786, 0.09160504,\n",
      "       2.1123957 ]), 'mean_score_time': array([0.00449765, 0.00799532, 0.00429826, 0.00369818, 0.00319772,\n",
      "       0.00319772, 0.005797  , 0.00729492, 0.00389776, 0.00349762,\n",
      "       0.00389841]), 'std_score_time': array([0.00196165, 0.01115648, 0.00228093, 0.00100436, 0.00074809,\n",
      "       0.00107612, 0.00414021, 0.00759865, 0.00083005, 0.0004997 ,\n",
      "       0.00377773]), 'param_penalty': masked_array(data=['l2', 'l2', 'l2', 'l2', 'none', 'none', 'none', 'none',\n",
      "                   'l1', 'l1', 'elasticnet'],\n",
      "             mask=[False, False, False, False, False, False, False, False,\n",
      "                   False, False, False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'param_solver': masked_array(data=['newton-cg', 'lbfgs', 'sag', 'saga', 'newton-cg',\n",
      "                   'lbfgs', 'sag', 'saga', 'saga', 'liblinear', 'saga'],\n",
      "             mask=[False, False, False, False, False, False, False, False,\n",
      "                   False, False, False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'params': [{'penalty': 'l2', 'solver': 'newton-cg'}, {'penalty': 'l2', 'solver': 'lbfgs'}, {'penalty': 'l2', 'solver': 'sag'}, {'penalty': 'l2', 'solver': 'saga'}, {'penalty': 'none', 'solver': 'newton-cg'}, {'penalty': 'none', 'solver': 'lbfgs'}, {'penalty': 'none', 'solver': 'sag'}, {'penalty': 'none', 'solver': 'saga'}, {'penalty': 'l1', 'solver': 'saga'}, {'penalty': 'l1', 'solver': 'liblinear'}, {'penalty': 'elasticnet', 'solver': 'saga'}], 'split0_test_roc_auc': array([0.80401602, 0.80383295, 0.8125286 , 0.81411899, 0.791373  ,\n",
      "       0.79097254, 0.81056064, 0.81312357, 0.81433638, 0.79724256,\n",
      "       0.81411899]), 'split1_test_roc_auc': array([0.80355835, 0.80378719, 0.79502288, 0.79544622, 0.80120137,\n",
      "       0.80153318, 0.79502288, 0.79544622, 0.79552632, 0.80291762,\n",
      "       0.79544622]), 'split2_test_roc_auc': array([0.71324943, 0.71329519, 0.70008009, 0.69331808, 0.71244851,\n",
      "       0.71242563, 0.70022883, 0.69331808, 0.69295195, 0.7124714 ,\n",
      "       0.69331808]), 'split3_test_roc_auc': array([0.82383295, 0.82366133, 0.81870709, 0.81921053, 0.81955378,\n",
      "       0.81953089, 0.81855835, 0.81914188, 0.81918764, 0.82124714,\n",
      "       0.81921053]), 'split4_test_roc_auc': array([0.72837102, 0.72827993, 0.69438182, 0.68815331, 0.73515748,\n",
      "       0.73502084, 0.69449568, 0.68819886, 0.68792558, 0.73258409,\n",
      "       0.68815331]), 'split5_test_roc_auc': array([0.75763476, 0.75715652, 0.71961468, 0.71068753, 0.76237162,\n",
      "       0.76234884, 0.71971716, 0.71079001, 0.71038009, 0.76062946,\n",
      "       0.71068753]), 'split6_test_roc_auc': array([0.74677188, 0.74687436, 0.74249049, 0.73568126, 0.74285487,\n",
      "       0.74286625, 0.74266129, 0.73577236, 0.73561294, 0.74473367,\n",
      "       0.73568126]), 'split7_test_roc_auc': array([0.77086607, 0.7707522 , 0.75227164, 0.74863929, 0.77217554,\n",
      "       0.77222108, 0.75233996, 0.74865068, 0.74859375, 0.77264239,\n",
      "       0.74863929]), 'split8_test_roc_auc': array([0.80699597, 0.80677962, 0.78628362, 0.77932636, 0.80631277,\n",
      "       0.80648357, 0.78637471, 0.77937191, 0.7792125 , 0.80685933,\n",
      "       0.77932636]), 'split9_test_roc_auc': array([0.80791537, 0.80785806, 0.79019576, 0.78539336, 0.80830506,\n",
      "       0.80827068, 0.79029892, 0.78535898, 0.78537044, 0.80846552,\n",
      "       0.78539336]), 'mean_test_roc_auc': array([0.77632118, 0.77622774, 0.76115767, 0.75699749, 0.7751754 ,\n",
      "       0.77516735, 0.76102584, 0.75691725, 0.75690976, 0.77597932,\n",
      "       0.75699749]), 'std_test_roc_auc': array([0.03637958, 0.03635962, 0.0434914 , 0.04623849, 0.03424896,\n",
      "       0.03428446, 0.04319793, 0.0460857 , 0.0463812 , 0.03517861,\n",
      "       0.04623849]), 'rank_test_roc_auc': array([ 1,  2,  6,  8,  4,  5,  7, 10, 11,  3,  8])}\n",
      "Best parameters set found on development set:\n",
      "\n",
      "{'penalty': 'l2', 'solver': 'newton-cg'}\n",
      "\n",
      "Grid scores on development set:\n",
      "\n",
      "0.776 (+/-0.073) for {'penalty': 'l2', 'solver': 'newton-cg'}\n",
      "0.776 (+/-0.073) for {'penalty': 'l2', 'solver': 'lbfgs'}\n",
      "0.761 (+/-0.087) for {'penalty': 'l2', 'solver': 'sag'}\n",
      "0.757 (+/-0.092) for {'penalty': 'l2', 'solver': 'saga'}\n",
      "0.775 (+/-0.068) for {'penalty': 'none', 'solver': 'newton-cg'}\n",
      "0.775 (+/-0.069) for {'penalty': 'none', 'solver': 'lbfgs'}\n",
      "0.761 (+/-0.086) for {'penalty': 'none', 'solver': 'sag'}\n",
      "0.757 (+/-0.092) for {'penalty': 'none', 'solver': 'saga'}\n",
      "0.757 (+/-0.093) for {'penalty': 'l1', 'solver': 'saga'}\n",
      "0.776 (+/-0.070) for {'penalty': 'l1', 'solver': 'liblinear'}\n",
      "0.757 (+/-0.092) for {'penalty': 'elasticnet', 'solver': 'saga'}\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Adam\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:1501: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n",
      "  \"(penalty={})\".format(self.penalty))\n"
     ]
    }
   ],
   "source": [
    "lr_grid3, lr_clf3=log_model(X_train3.values, y_train3.values.ravel())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "199.22413989999768\n",
      "Best parameters set found on development set:\n",
      "\n",
      "{'learning_rate': 0.2, 'n_estimators': 1000}\n",
      "\n",
      "Grid scores on development set:\n",
      "\n",
      "0.823 (+/-0.081) for {'learning_rate': 0.01, 'n_estimators': 50}\n",
      "0.830 (+/-0.078) for {'learning_rate': 0.01, 'n_estimators': 100}\n",
      "0.864 (+/-0.058) for {'learning_rate': 0.01, 'n_estimators': 350}\n",
      "0.872 (+/-0.055) for {'learning_rate': 0.01, 'n_estimators': 500}\n",
      "0.890 (+/-0.041) for {'learning_rate': 0.01, 'n_estimators': 1000}\n",
      "0.835 (+/-0.079) for {'learning_rate': 0.025, 'n_estimators': 50}\n",
      "0.854 (+/-0.062) for {'learning_rate': 0.025, 'n_estimators': 100}\n",
      "0.887 (+/-0.046) for {'learning_rate': 0.025, 'n_estimators': 350}\n",
      "0.900 (+/-0.036) for {'learning_rate': 0.025, 'n_estimators': 500}\n",
      "0.932 (+/-0.023) for {'learning_rate': 0.025, 'n_estimators': 1000}\n",
      "0.854 (+/-0.064) for {'learning_rate': 0.05, 'n_estimators': 50}\n",
      "0.873 (+/-0.056) for {'learning_rate': 0.05, 'n_estimators': 100}\n",
      "0.916 (+/-0.027) for {'learning_rate': 0.05, 'n_estimators': 350}\n",
      "0.931 (+/-0.023) for {'learning_rate': 0.05, 'n_estimators': 500}\n",
      "0.957 (+/-0.022) for {'learning_rate': 0.05, 'n_estimators': 1000}\n",
      "0.864 (+/-0.058) for {'learning_rate': 0.075, 'n_estimators': 50}\n",
      "0.881 (+/-0.048) for {'learning_rate': 0.075, 'n_estimators': 100}\n",
      "0.934 (+/-0.030) for {'learning_rate': 0.075, 'n_estimators': 350}\n",
      "0.948 (+/-0.021) for {'learning_rate': 0.075, 'n_estimators': 500}\n",
      "0.966 (+/-0.019) for {'learning_rate': 0.075, 'n_estimators': 1000}\n",
      "0.872 (+/-0.057) for {'learning_rate': 0.1, 'n_estimators': 50}\n",
      "0.891 (+/-0.037) for {'learning_rate': 0.1, 'n_estimators': 100}\n",
      "0.948 (+/-0.022) for {'learning_rate': 0.1, 'n_estimators': 350}\n",
      "0.959 (+/-0.021) for {'learning_rate': 0.1, 'n_estimators': 500}\n",
      "0.970 (+/-0.021) for {'learning_rate': 0.1, 'n_estimators': 1000}\n",
      "0.893 (+/-0.041) for {'learning_rate': 0.2, 'n_estimators': 50}\n",
      "0.921 (+/-0.033) for {'learning_rate': 0.2, 'n_estimators': 100}\n",
      "0.966 (+/-0.020) for {'learning_rate': 0.2, 'n_estimators': 350}\n",
      "0.971 (+/-0.018) for {'learning_rate': 0.2, 'n_estimators': 500}\n",
      "0.975 (+/-0.020) for {'learning_rate': 0.2, 'n_estimators': 1000}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "gbc_grid3, gbc_clf3=gbc_model(X_train3.values, y_train3.values.ravel())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "581.5752560000037\n",
      "Best parameters set found on development set:\n",
      "\n",
      "{'max_depth': 13, 'n_estimators': 3000}\n",
      "\n",
      "Grid scores on development set:\n",
      "\n",
      "0.790 (+/-0.066) for {'max_depth': 4, 'n_estimators': 100}\n",
      "0.786 (+/-0.065) for {'max_depth': 4, 'n_estimators': 250}\n",
      "0.785 (+/-0.065) for {'max_depth': 4, 'n_estimators': 500}\n",
      "0.785 (+/-0.064) for {'max_depth': 4, 'n_estimators': 1000}\n",
      "0.785 (+/-0.064) for {'max_depth': 4, 'n_estimators': 3000}\n",
      "0.785 (+/-0.064) for {'max_depth': 4, 'n_estimators': 5000}\n",
      "0.802 (+/-0.060) for {'max_depth': 5, 'n_estimators': 100}\n",
      "0.800 (+/-0.062) for {'max_depth': 5, 'n_estimators': 250}\n",
      "0.800 (+/-0.059) for {'max_depth': 5, 'n_estimators': 500}\n",
      "0.800 (+/-0.059) for {'max_depth': 5, 'n_estimators': 1000}\n",
      "0.800 (+/-0.059) for {'max_depth': 5, 'n_estimators': 3000}\n",
      "0.800 (+/-0.059) for {'max_depth': 5, 'n_estimators': 5000}\n",
      "0.817 (+/-0.054) for {'max_depth': 6, 'n_estimators': 100}\n",
      "0.816 (+/-0.054) for {'max_depth': 6, 'n_estimators': 250}\n",
      "0.817 (+/-0.054) for {'max_depth': 6, 'n_estimators': 500}\n",
      "0.817 (+/-0.054) for {'max_depth': 6, 'n_estimators': 1000}\n",
      "0.817 (+/-0.054) for {'max_depth': 6, 'n_estimators': 3000}\n",
      "0.817 (+/-0.054) for {'max_depth': 6, 'n_estimators': 5000}\n",
      "0.836 (+/-0.048) for {'max_depth': 7, 'n_estimators': 100}\n",
      "0.836 (+/-0.049) for {'max_depth': 7, 'n_estimators': 250}\n",
      "0.837 (+/-0.049) for {'max_depth': 7, 'n_estimators': 500}\n",
      "0.837 (+/-0.049) for {'max_depth': 7, 'n_estimators': 1000}\n",
      "0.836 (+/-0.048) for {'max_depth': 7, 'n_estimators': 3000}\n",
      "0.836 (+/-0.048) for {'max_depth': 7, 'n_estimators': 5000}\n",
      "0.856 (+/-0.042) for {'max_depth': 8, 'n_estimators': 100}\n",
      "0.855 (+/-0.043) for {'max_depth': 8, 'n_estimators': 250}\n",
      "0.857 (+/-0.043) for {'max_depth': 8, 'n_estimators': 500}\n",
      "0.857 (+/-0.043) for {'max_depth': 8, 'n_estimators': 1000}\n",
      "0.857 (+/-0.043) for {'max_depth': 8, 'n_estimators': 3000}\n",
      "0.857 (+/-0.043) for {'max_depth': 8, 'n_estimators': 5000}\n",
      "0.878 (+/-0.034) for {'max_depth': 9, 'n_estimators': 100}\n",
      "0.877 (+/-0.036) for {'max_depth': 9, 'n_estimators': 250}\n",
      "0.877 (+/-0.036) for {'max_depth': 9, 'n_estimators': 500}\n",
      "0.877 (+/-0.036) for {'max_depth': 9, 'n_estimators': 1000}\n",
      "0.877 (+/-0.036) for {'max_depth': 9, 'n_estimators': 3000}\n",
      "0.877 (+/-0.036) for {'max_depth': 9, 'n_estimators': 5000}\n",
      "0.898 (+/-0.028) for {'max_depth': 10, 'n_estimators': 100}\n",
      "0.897 (+/-0.029) for {'max_depth': 10, 'n_estimators': 250}\n",
      "0.897 (+/-0.029) for {'max_depth': 10, 'n_estimators': 500}\n",
      "0.897 (+/-0.029) for {'max_depth': 10, 'n_estimators': 1000}\n",
      "0.897 (+/-0.029) for {'max_depth': 10, 'n_estimators': 3000}\n",
      "0.897 (+/-0.030) for {'max_depth': 10, 'n_estimators': 5000}\n",
      "0.918 (+/-0.025) for {'max_depth': 11, 'n_estimators': 100}\n",
      "0.916 (+/-0.026) for {'max_depth': 11, 'n_estimators': 250}\n",
      "0.916 (+/-0.025) for {'max_depth': 11, 'n_estimators': 500}\n",
      "0.916 (+/-0.025) for {'max_depth': 11, 'n_estimators': 1000}\n",
      "0.916 (+/-0.025) for {'max_depth': 11, 'n_estimators': 3000}\n",
      "0.916 (+/-0.025) for {'max_depth': 11, 'n_estimators': 5000}\n",
      "0.929 (+/-0.019) for {'max_depth': 12, 'n_estimators': 100}\n",
      "0.930 (+/-0.022) for {'max_depth': 12, 'n_estimators': 250}\n",
      "0.931 (+/-0.022) for {'max_depth': 12, 'n_estimators': 500}\n",
      "0.932 (+/-0.022) for {'max_depth': 12, 'n_estimators': 1000}\n",
      "0.931 (+/-0.022) for {'max_depth': 12, 'n_estimators': 3000}\n",
      "0.932 (+/-0.022) for {'max_depth': 12, 'n_estimators': 5000}\n",
      "0.943 (+/-0.014) for {'max_depth': 13, 'n_estimators': 100}\n",
      "0.942 (+/-0.018) for {'max_depth': 13, 'n_estimators': 250}\n",
      "0.943 (+/-0.019) for {'max_depth': 13, 'n_estimators': 500}\n",
      "0.944 (+/-0.019) for {'max_depth': 13, 'n_estimators': 1000}\n",
      "0.944 (+/-0.018) for {'max_depth': 13, 'n_estimators': 3000}\n",
      "0.944 (+/-0.019) for {'max_depth': 13, 'n_estimators': 5000}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "ex_grid3,ex_clf3=ex_model(X_train3, y_train3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "418.3249030999996\n",
      "Best parameters set found on development set:\n",
      "\n",
      "{'max_depth': 12, 'n_estimators': 1000}\n",
      "\n",
      "Grid scores on development set:\n",
      "\n",
      "0.840 (+/-0.080) for {'max_depth': 5, 'n_estimators': 100}\n",
      "0.839 (+/-0.077) for {'max_depth': 5, 'n_estimators': 250}\n",
      "0.838 (+/-0.078) for {'max_depth': 5, 'n_estimators': 500}\n",
      "0.837 (+/-0.077) for {'max_depth': 5, 'n_estimators': 1000}\n",
      "0.862 (+/-0.068) for {'max_depth': 6, 'n_estimators': 100}\n",
      "0.863 (+/-0.069) for {'max_depth': 6, 'n_estimators': 250}\n",
      "0.862 (+/-0.070) for {'max_depth': 6, 'n_estimators': 500}\n",
      "0.863 (+/-0.069) for {'max_depth': 6, 'n_estimators': 1000}\n",
      "0.886 (+/-0.059) for {'max_depth': 7, 'n_estimators': 100}\n",
      "0.887 (+/-0.060) for {'max_depth': 7, 'n_estimators': 250}\n",
      "0.886 (+/-0.059) for {'max_depth': 7, 'n_estimators': 500}\n",
      "0.886 (+/-0.059) for {'max_depth': 7, 'n_estimators': 1000}\n",
      "0.908 (+/-0.053) for {'max_depth': 8, 'n_estimators': 100}\n",
      "0.910 (+/-0.051) for {'max_depth': 8, 'n_estimators': 250}\n",
      "0.909 (+/-0.051) for {'max_depth': 8, 'n_estimators': 500}\n",
      "0.909 (+/-0.053) for {'max_depth': 8, 'n_estimators': 1000}\n",
      "0.929 (+/-0.043) for {'max_depth': 9, 'n_estimators': 100}\n",
      "0.931 (+/-0.042) for {'max_depth': 9, 'n_estimators': 250}\n",
      "0.930 (+/-0.043) for {'max_depth': 9, 'n_estimators': 500}\n",
      "0.930 (+/-0.043) for {'max_depth': 9, 'n_estimators': 1000}\n",
      "0.944 (+/-0.034) for {'max_depth': 10, 'n_estimators': 100}\n",
      "0.945 (+/-0.034) for {'max_depth': 10, 'n_estimators': 250}\n",
      "0.945 (+/-0.035) for {'max_depth': 10, 'n_estimators': 500}\n",
      "0.945 (+/-0.035) for {'max_depth': 10, 'n_estimators': 1000}\n",
      "0.955 (+/-0.030) for {'max_depth': 11, 'n_estimators': 100}\n",
      "0.956 (+/-0.029) for {'max_depth': 11, 'n_estimators': 250}\n",
      "0.956 (+/-0.030) for {'max_depth': 11, 'n_estimators': 500}\n",
      "0.956 (+/-0.029) for {'max_depth': 11, 'n_estimators': 1000}\n",
      "0.962 (+/-0.024) for {'max_depth': 12, 'n_estimators': 100}\n",
      "0.963 (+/-0.025) for {'max_depth': 12, 'n_estimators': 250}\n",
      "0.963 (+/-0.025) for {'max_depth': 12, 'n_estimators': 500}\n",
      "0.964 (+/-0.024) for {'max_depth': 12, 'n_estimators': 1000}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "rfr_grid3, rfr_clf3=rfr_model(X_train3, y_train3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "318.52683179999985\n",
      "Best parameters set found on development set:\n",
      "\n",
      "{'max_depth': 9, 'n_estimators': 1000}\n",
      "\n",
      "Grid scores on development set:\n",
      "\n",
      "0.986 (+/-0.021) for {'max_depth': 5, 'n_estimators': 100}\n",
      "0.985 (+/-0.022) for {'max_depth': 5, 'n_estimators': 250}\n",
      "0.985 (+/-0.022) for {'max_depth': 5, 'n_estimators': 500}\n",
      "0.985 (+/-0.022) for {'max_depth': 5, 'n_estimators': 1000}\n",
      "0.989 (+/-0.018) for {'max_depth': 6, 'n_estimators': 100}\n",
      "0.988 (+/-0.019) for {'max_depth': 6, 'n_estimators': 250}\n",
      "0.989 (+/-0.019) for {'max_depth': 6, 'n_estimators': 500}\n",
      "0.989 (+/-0.019) for {'max_depth': 6, 'n_estimators': 1000}\n",
      "0.991 (+/-0.015) for {'max_depth': 7, 'n_estimators': 100}\n",
      "0.991 (+/-0.017) for {'max_depth': 7, 'n_estimators': 250}\n",
      "0.991 (+/-0.016) for {'max_depth': 7, 'n_estimators': 500}\n",
      "0.991 (+/-0.016) for {'max_depth': 7, 'n_estimators': 1000}\n",
      "0.992 (+/-0.013) for {'max_depth': 8, 'n_estimators': 100}\n",
      "0.992 (+/-0.014) for {'max_depth': 8, 'n_estimators': 250}\n",
      "0.992 (+/-0.014) for {'max_depth': 8, 'n_estimators': 500}\n",
      "0.992 (+/-0.014) for {'max_depth': 8, 'n_estimators': 1000}\n",
      "0.993 (+/-0.014) for {'max_depth': 9, 'n_estimators': 100}\n",
      "0.992 (+/-0.014) for {'max_depth': 9, 'n_estimators': 250}\n",
      "0.993 (+/-0.014) for {'max_depth': 9, 'n_estimators': 500}\n",
      "0.993 (+/-0.014) for {'max_depth': 9, 'n_estimators': 1000}\n",
      "0.992 (+/-0.014) for {'max_depth': 10, 'n_estimators': 100}\n",
      "0.992 (+/-0.015) for {'max_depth': 10, 'n_estimators': 250}\n",
      "0.992 (+/-0.014) for {'max_depth': 10, 'n_estimators': 500}\n",
      "0.993 (+/-0.014) for {'max_depth': 10, 'n_estimators': 1000}\n",
      "0.992 (+/-0.014) for {'max_depth': 11, 'n_estimators': 100}\n",
      "0.992 (+/-0.014) for {'max_depth': 11, 'n_estimators': 250}\n",
      "0.993 (+/-0.014) for {'max_depth': 11, 'n_estimators': 500}\n",
      "0.992 (+/-0.014) for {'max_depth': 11, 'n_estimators': 1000}\n",
      "0.992 (+/-0.015) for {'max_depth': 12, 'n_estimators': 100}\n",
      "0.992 (+/-0.015) for {'max_depth': 12, 'n_estimators': 250}\n",
      "0.992 (+/-0.014) for {'max_depth': 12, 'n_estimators': 500}\n",
      "0.992 (+/-0.014) for {'max_depth': 12, 'n_estimators': 1000}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "rfr_grid4, rfr_clf4=rfr_model(X_train3, y_train4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_n_estimators_rf=rfr_grid3.best_params_[\"n_estimators\"]\n",
    "best_max_depth_rf=rfr_grid3.best_params_[\"max_depth\"]\n",
    "\n",
    "best_solver=lr_grid3.best_params_['solver']\n",
    "best_penalty=lr_grid3.best_params_['penalty']\n",
    "\n",
    "best_n_estimators_gbc=gbc_grid3.best_params_[\"n_estimators\"]\n",
    "best_learning_rate_gbc=gbc_grid3.best_params_[\"learning_rate\"]\n",
    "\n",
    "best_n_estimators_ex=ex_grid3.best_params_[\"n_estimators\"]\n",
    "best_max_depth_ex=ex_grid3.best_params_[\"max_depth\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_n_estimators_rf4=rfr_grid4.best_params_[\"n_estimators\"]\n",
    "best_max_depth_rf4=rfr_grid4.best_params_[\"max_depth\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "252.85083419999864\n",
      "Best parameters set found on development set:\n",
      "\n",
      "{'colsample_bytree': 0.6, 'max_depth': 7}\n",
      "\n",
      "Grid scores on development set:\n",
      "\n",
      "0.863 (+/-0.022) for {'colsample_bytree': 0.3, 'max_depth': 2}\n",
      "0.919 (+/-0.019) for {'colsample_bytree': 0.3, 'max_depth': 3}\n",
      "0.946 (+/-0.015) for {'colsample_bytree': 0.3, 'max_depth': 4}\n",
      "0.955 (+/-0.015) for {'colsample_bytree': 0.3, 'max_depth': 5}\n",
      "0.959 (+/-0.013) for {'colsample_bytree': 0.3, 'max_depth': 6}\n",
      "0.961 (+/-0.016) for {'colsample_bytree': 0.3, 'max_depth': 7}\n",
      "0.883 (+/-0.016) for {'colsample_bytree': 0.4, 'max_depth': 2}\n",
      "0.946 (+/-0.011) for {'colsample_bytree': 0.4, 'max_depth': 3}\n",
      "0.962 (+/-0.012) for {'colsample_bytree': 0.4, 'max_depth': 4}\n",
      "0.966 (+/-0.016) for {'colsample_bytree': 0.4, 'max_depth': 5}\n",
      "0.966 (+/-0.019) for {'colsample_bytree': 0.4, 'max_depth': 6}\n",
      "0.968 (+/-0.016) for {'colsample_bytree': 0.4, 'max_depth': 7}\n",
      "0.891 (+/-0.020) for {'colsample_bytree': 0.5, 'max_depth': 2}\n",
      "0.950 (+/-0.011) for {'colsample_bytree': 0.5, 'max_depth': 3}\n",
      "0.964 (+/-0.013) for {'colsample_bytree': 0.5, 'max_depth': 4}\n",
      "0.968 (+/-0.017) for {'colsample_bytree': 0.5, 'max_depth': 5}\n",
      "0.971 (+/-0.019) for {'colsample_bytree': 0.5, 'max_depth': 6}\n",
      "0.970 (+/-0.017) for {'colsample_bytree': 0.5, 'max_depth': 7}\n",
      "0.893 (+/-0.013) for {'colsample_bytree': 0.6, 'max_depth': 2}\n",
      "0.952 (+/-0.011) for {'colsample_bytree': 0.6, 'max_depth': 3}\n",
      "0.964 (+/-0.016) for {'colsample_bytree': 0.6, 'max_depth': 4}\n",
      "0.967 (+/-0.018) for {'colsample_bytree': 0.6, 'max_depth': 5}\n",
      "0.969 (+/-0.019) for {'colsample_bytree': 0.6, 'max_depth': 6}\n",
      "0.971 (+/-0.016) for {'colsample_bytree': 0.6, 'max_depth': 7}\n",
      "0.897 (+/-0.012) for {'colsample_bytree': 0.7, 'max_depth': 2}\n",
      "0.953 (+/-0.010) for {'colsample_bytree': 0.7, 'max_depth': 3}\n",
      "0.966 (+/-0.016) for {'colsample_bytree': 0.7, 'max_depth': 4}\n",
      "0.968 (+/-0.017) for {'colsample_bytree': 0.7, 'max_depth': 5}\n",
      "0.968 (+/-0.023) for {'colsample_bytree': 0.7, 'max_depth': 6}\n",
      "0.970 (+/-0.020) for {'colsample_bytree': 0.7, 'max_depth': 7}\n",
      "0.898 (+/-0.015) for {'colsample_bytree': 0.8, 'max_depth': 2}\n",
      "0.956 (+/-0.010) for {'colsample_bytree': 0.8, 'max_depth': 3}\n",
      "0.964 (+/-0.017) for {'colsample_bytree': 0.8, 'max_depth': 4}\n",
      "0.969 (+/-0.017) for {'colsample_bytree': 0.8, 'max_depth': 5}\n",
      "0.970 (+/-0.017) for {'colsample_bytree': 0.8, 'max_depth': 6}\n",
      "0.968 (+/-0.022) for {'colsample_bytree': 0.8, 'max_depth': 7}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "gbc_grid2, gbc_clf2= gbc_model2(X_train3.values, y_train3, best_n_estimators_gbc, best_learning_rate_gbc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9.167632800003048\n",
      "Best parameters set found on development set:\n",
      "\n",
      "{'C': 1, 'class_weight': 'balanced'}\n",
      "\n",
      "Grid scores on development set:\n",
      "\n",
      "0.742 (+/-0.122) for {'C': 0.0001, 'class_weight': 'balanced'}\n",
      "0.737 (+/-0.126) for {'C': 0.0001, 'class_weight': None}\n",
      "0.759 (+/-0.101) for {'C': 0.001, 'class_weight': 'balanced'}\n",
      "0.756 (+/-0.106) for {'C': 0.001, 'class_weight': None}\n",
      "0.762 (+/-0.089) for {'C': 0.01, 'class_weight': 'balanced'}\n",
      "0.760 (+/-0.091) for {'C': 0.01, 'class_weight': None}\n",
      "0.771 (+/-0.082) for {'C': 0.1, 'class_weight': 'balanced'}\n",
      "0.768 (+/-0.083) for {'C': 0.1, 'class_weight': None}\n",
      "0.777 (+/-0.074) for {'C': 1, 'class_weight': 'balanced'}\n",
      "0.776 (+/-0.073) for {'C': 1, 'class_weight': None}\n",
      "0.776 (+/-0.071) for {'C': 10, 'class_weight': 'balanced'}\n",
      "0.775 (+/-0.069) for {'C': 10, 'class_weight': None}\n",
      "0.776 (+/-0.071) for {'C': 100, 'class_weight': 'balanced'}\n",
      "0.775 (+/-0.069) for {'C': 100, 'class_weight': None}\n",
      "0.776 (+/-0.071) for {'C': 1000, 'class_weight': 'balanced'}\n",
      "0.775 (+/-0.068) for {'C': 1000, 'class_weight': None}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "lr_grid2, lr_clf2= log_model2(X_train3.values, y_train3, best_penalty, best_solver)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "479.516403499998\n",
      "Best parameters set found on development set:\n",
      "\n",
      "{'max_features': 0.8, 'min_samples_leaf': 2}\n",
      "\n",
      "Grid scores on development set:\n",
      "\n",
      "0.930 (+/-0.030) for {'max_features': 0.2, 'min_samples_leaf': 2}\n",
      "0.897 (+/-0.039) for {'max_features': 0.2, 'min_samples_leaf': 8}\n",
      "0.865 (+/-0.047) for {'max_features': 0.2, 'min_samples_leaf': 20}\n",
      "0.838 (+/-0.057) for {'max_features': 0.2, 'min_samples_leaf': 40}\n",
      "0.822 (+/-0.063) for {'max_features': 0.2, 'min_samples_leaf': 64}\n",
      "0.950 (+/-0.025) for {'max_features': 0.3, 'min_samples_leaf': 2}\n",
      "0.919 (+/-0.034) for {'max_features': 0.3, 'min_samples_leaf': 8}\n",
      "0.885 (+/-0.040) for {'max_features': 0.3, 'min_samples_leaf': 20}\n",
      "0.854 (+/-0.052) for {'max_features': 0.3, 'min_samples_leaf': 40}\n",
      "0.833 (+/-0.060) for {'max_features': 0.3, 'min_samples_leaf': 64}\n",
      "0.964 (+/-0.020) for {'max_features': 0.4, 'min_samples_leaf': 2}\n",
      "0.935 (+/-0.030) for {'max_features': 0.4, 'min_samples_leaf': 8}\n",
      "0.900 (+/-0.039) for {'max_features': 0.4, 'min_samples_leaf': 20}\n",
      "0.867 (+/-0.046) for {'max_features': 0.4, 'min_samples_leaf': 40}\n",
      "0.844 (+/-0.056) for {'max_features': 0.4, 'min_samples_leaf': 64}\n",
      "0.967 (+/-0.019) for {'max_features': 0.5, 'min_samples_leaf': 2}\n",
      "0.939 (+/-0.028) for {'max_features': 0.5, 'min_samples_leaf': 8}\n",
      "0.904 (+/-0.038) for {'max_features': 0.5, 'min_samples_leaf': 20}\n",
      "0.871 (+/-0.043) for {'max_features': 0.5, 'min_samples_leaf': 40}\n",
      "0.846 (+/-0.054) for {'max_features': 0.5, 'min_samples_leaf': 64}\n",
      "0.969 (+/-0.017) for {'max_features': 0.6, 'min_samples_leaf': 2}\n",
      "0.942 (+/-0.028) for {'max_features': 0.6, 'min_samples_leaf': 8}\n",
      "0.906 (+/-0.037) for {'max_features': 0.6, 'min_samples_leaf': 20}\n",
      "0.874 (+/-0.043) for {'max_features': 0.6, 'min_samples_leaf': 40}\n",
      "0.848 (+/-0.053) for {'max_features': 0.6, 'min_samples_leaf': 64}\n",
      "0.971 (+/-0.016) for {'max_features': 0.7, 'min_samples_leaf': 2}\n",
      "0.945 (+/-0.025) for {'max_features': 0.7, 'min_samples_leaf': 8}\n",
      "0.909 (+/-0.035) for {'max_features': 0.7, 'min_samples_leaf': 20}\n",
      "0.876 (+/-0.043) for {'max_features': 0.7, 'min_samples_leaf': 40}\n",
      "0.851 (+/-0.051) for {'max_features': 0.7, 'min_samples_leaf': 64}\n",
      "0.971 (+/-0.015) for {'max_features': 0.8, 'min_samples_leaf': 2}\n",
      "0.946 (+/-0.025) for {'max_features': 0.8, 'min_samples_leaf': 8}\n",
      "0.910 (+/-0.035) for {'max_features': 0.8, 'min_samples_leaf': 20}\n",
      "0.877 (+/-0.042) for {'max_features': 0.8, 'min_samples_leaf': 40}\n",
      "0.852 (+/-0.049) for {'max_features': 0.8, 'min_samples_leaf': 64}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "rfr_grid2, rfr_clf2=rfr_model2(X_train3, y_train3, best_max_depth_rf, best_n_estimators_rf )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_solver=lr_grid2.best_params_['C']\n",
    "best_penalty=lr_grid2.best_params_['class_weight']\n",
    "\n",
    "best_max_depth_gbc=gbc_grid2.best_params_[\"max_depth\"]\n",
    "best_colsample_bytree=gbc_grid2.best_params_[\"colsample_bytree\"]\n",
    "\n",
    "best_max_features_rf=rfr_grid2.best_params_[\"max_features\"]\n",
    "best_min_samples_leaf_rf=rfr_grid2.best_params_[\"min_samples_leaf\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest model score: 0.745\n",
      "[[ 159  313]\n",
      " [ 159 1222]]\n"
     ]
    }
   ],
   "source": [
    "GBC_clf =  xgb.XGBClassifier(learning_rate=best_learning_rate_gbc, n_estimators=best_n_estimators_gbc, \n",
    "            max_depth=best_max_depth_gbc, colsample_bytree=best_colsample_bytree ,random_state=42 )\n",
    "GBC_clf.fit(X_train3, y_train3.values.ravel())\n",
    "print(\"Random Forest model score: %.3f\" % GBC_clf.score(X_test3, y_test3.values.ravel()))\n",
    "GBC_y_pred=GBC_clf.predict(X_test3)                         \n",
    "print(confusion_matrix(y_test3.values, GBC_y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest model score: 0.735\n",
      "[[ 142  330]\n",
      " [ 161 1220]]\n"
     ]
    }
   ],
   "source": [
    "RF_clf =RandomForestClassifier(max_depth=best_max_depth_rf, n_estimators=best_n_estimators_rf, \n",
    "                            max_features=best_max_features_rf, min_samples_leaf=best_min_samples_leaf_rf,   \n",
    "                               random_state=42, oob_score=True)\n",
    "RF_clf.fit(X_train3, y_train3.values.ravel())\n",
    "print(\"Random Forest model score: %.3f\" % RF_clf.score(X_test3, y_test3.values.ravel()))\n",
    "RF_y_pred=RF_clf.predict(X_test3)                         \n",
    "print(confusion_matrix(y_test3.values, RF_y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, ..., 0, 0, 1], dtype=int64)"
      ]
     },
     "execution_count": 262,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LR_clf =  xgb.XGBClassifier(learning_rate=best_learning_rate_gbc, n_estimators=best_n_estimators_gbc, \n",
    "            max_depth=best_max_depth_gbc, colsample_bytree=best_colsample_bytree ,random_state=42 )\n",
    "LR_clf.fit(X_train3, y_train3.values.ravel())\n",
    "print(\"Random Forest model score: %.3f\" % LR_clf.score(X_test3, y_test3.values.ravel()))\n",
    "LR_y_pred=LR_clf.predict(X_test3)                         \n",
    "print(confusion_matrix(y_test3.values, LR_y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC: 0.687\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x864 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_score=GBC_clf.predict_proba(X_test3)\n",
    "y_score=y_score[:,1]\n",
    "fpr, tpr, thresholds = roc_curve(y_test3.values, y_score)\n",
    "roc_auc = roc_auc_score(y_test3.values, y_score)\n",
    "print('AUC: %.3f' % roc_auc)\n",
    "# Plot ROC curve\n",
    "plt.figure(figsize=(16, 12))\n",
    "plt.plot(fpr, tpr, label='ROC curve (area = %0.3f)' % roc_auc)\n",
    "plt.plot([0, 1], [0, 1], 'k--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.0])\n",
    "plt.xlabel('False Positive Rate (1 - Specificity)', size=16)\n",
    "plt.ylabel('True Positive Rate (Sensitivity)', size=16)\n",
    "plt.title('ROC Curve Gradient Boosting Classifier', size=20)\n",
    "plt.legend(fontsize=14);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC: 0.694\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x864 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_score=RF_clf.predict_proba(X_test3.values)\n",
    "y_score=y_score[:,1]\n",
    "fpr, tpr, thresholds = roc_curve(y_test3, y_score)\n",
    "roc_auc = roc_auc_score(y_test3, y_score)\n",
    "print('AUC: %.3f' % roc_auc)\n",
    "# Plot ROC curve\n",
    "plt.figure(figsize=(16, 12))\n",
    "plt.plot(fpr, tpr, label='ROC curve (area = %0.3f)' % roc_auc)\n",
    "plt.plot([0, 1], [0, 1], 'k--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.0])\n",
    "plt.xlabel('False Positive Rate (1 - Specificity)', size=16)\n",
    "plt.ylabel('True Positive Rate (Sensitivity)', size=16)\n",
    "plt.title('ROC Curve Random Forest Classifier', size=20)\n",
    "plt.legend(fontsize=14);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [],
   "source": [
    "def PermImportance(X, y, clf, metric, num_iterations=100):\n",
    "    '''\n",
    "    Calculates the permutation importance of features in a dataset.\n",
    "    Inputs:\n",
    "    X: dataframe with all the features\n",
    "    y: array-like sequence of labels\n",
    "    clf: sklearn classifier, already trained on training data\n",
    "    metric: sklearn metric, such as accuracy_score, precision_score or recall_score\n",
    "    num_iterations: no. of repetitive runs of the permutation\n",
    "    Outputs:\n",
    "    baseline: the baseline metric without any of the columns permutated\n",
    "    scores: differences in baseline metric caused by permutation of each feature, dict in the format {feature:[diffs]}\n",
    "    '''\n",
    "    bar=progressbar.ProgressBar(max_value=len(X.columns))\n",
    "    baseline_metric=metric(y, clf.predict_proba(X)[:,1])\n",
    "    scores={c:[] for c in X.columns}\n",
    "    for c in X.columns:\n",
    "        X1=X.copy(deep=True)\n",
    "        for _ in range(num_iterations):\n",
    "            temp=X1[c].tolist()\n",
    "            random.shuffle(temp)\n",
    "            X1[c]=temp\n",
    "            score=metric(y, clf.predict_proba(X1)[:,1])\n",
    "            scores[c].append(baseline_metric-score)\n",
    "        bar.update(X.columns.tolist().index(c))\n",
    "    return baseline_metric, scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 92% (12 of 13) |######################  | Elapsed Time: 0:15:50 ETA:   0:01:02"
     ]
    }
   ],
   "source": [
    "metric, score=PermImportance(X_train3, y_train3, RF_clf, roc_auc_score, 30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 92% (12 of 13) |######################  | Elapsed Time: 0:06:30 ETA:   0:00:30"
     ]
    }
   ],
   "source": [
    "metric_test, score_test=PermImportance(X_test3, y_test3, RF_clf, roc_auc_score, 30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'sequence_id': 0.089,\n",
       " 'user_id': 0.035,\n",
       " 'sequence_opp': 0.002,\n",
       " 'assignment_opp': 0.001,\n",
       " 'hint_count': 0.001,\n",
       " 'attempt_count': 0.001,\n",
       " 'cluster': 0.003,\n",
       " 'pretest': 0.006,\n",
       " 'first_three': 0.069,\n",
       " 'avg_initial_#problems_to_master': 0.022,\n",
       " 'problem_diff': 0.001,\n",
       " 'guess': -0.0,\n",
       " 'slip': -0.006}"
      ]
     },
     "execution_count": 285,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_imp_test={}\n",
    "for key in score_test.keys():\n",
    "    mean_imp_test[key]=mean(score_test[key]).round(3)\n",
    "mean_imp_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['sequence_id', 'user_id', 'sequence_opp', 'assignment_opp', 'hint_count', 'attempt_count', 'cluster', 'pretest', 'first_three', 'avg_initial_#problems_to_master', 'problem_diff', 'guess', 'slip'])"
      ]
     },
     "execution_count": 286,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_imp_test.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {},
   "outputs": [],
   "source": [
    "sorted_test={k: v for k, v in sorted(mean_imp_test.items(), key=lambda item: item[1])}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method _AxesBase.grid of <matplotlib.axes._subplots.AxesSubplot object at 0x00000275963E0308>>"
      ]
     },
     "execution_count": 298,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "keys=sorted_test.keys()\n",
    "values=sorted_test.values()\n",
    "feat_importances = pd.Series(list(values), index=list(keys))\n",
    "plt.rcParams.update({'font.size': 16})\n",
    "plt.xlabel(\"Features\", size=22)\n",
    "plt.ylabel('ROC_AUC Loss', size=22)\n",
    "plt.title(\"Permutation Importance (Test Set)\", size=22)\n",
    "feat_importances.plot(kind='bar', color = ['b', 'r','g','c','y', 'chocolate','orange','brown', 'pink'], figsize=(12,8)).grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'sequence_id': 0.208,\n",
       " 'user_id': 0.066,\n",
       " 'sequence_opp': 0.001,\n",
       " 'assignment_opp': 0.0,\n",
       " 'hint_count': 0.0,\n",
       " 'attempt_count': 0.0,\n",
       " 'cluster': 0.0,\n",
       " 'pretest': 0.003,\n",
       " 'first_three': 0.113,\n",
       " 'avg_initial_#problems_to_master': 0.079,\n",
       " 'problem_diff': 0.001,\n",
       " 'guess': 0.008,\n",
       " 'slip': 0.005}"
      ]
     },
     "execution_count": 300,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_imp={}\n",
    "for key in score.keys():\n",
    "    mean_imp[key]=mean(score[key]).round(3)\n",
    "mean_imp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [],
   "source": [
    "sorted_train={k: v for k, v in sorted(mean_imp.items(), key=lambda item: item[1])}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method _AxesBase.grid of <matplotlib.axes._subplots.AxesSubplot object at 0x000002759671F6C8>>"
      ]
     },
     "execution_count": 303,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "keys=sorted_train.keys()\n",
    "values=sorted_train.values()\n",
    "feat_importances = pd.Series(list(values), index=list(keys))\n",
    "plt.rcParams.update({'font.size': 16})\n",
    "plt.xlabel(\"Features\", size=22)\n",
    "plt.ylabel('ROC_AUC Loss', size=22)\n",
    "plt.title(\"Permutation Importance (Training Set)\", size=22)\n",
    "feat_importances.plot(kind='bar', color = ['b', 'r','g','c','y', 'chocolate','orange','brown', 'pink'], figsize=(12,8)).grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1108\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "61092    50\n",
       "61097    50\n",
       "61112    50\n",
       "61102    49\n",
       "61106    49\n",
       "         ..\n",
       "86998     1\n",
       "85358     1\n",
       "84627     1\n",
       "88074     1\n",
       "86991     1\n",
       "Name: problem_id, Length: 1108, dtype: int64"
      ]
     },
     "execution_count": 273,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(len(df['problem_id'].value_counts()))\n",
    "df['problem_id'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "metadata": {},
   "outputs": [],
   "source": [
    "unique_pairs=df.groupby(['user_id','sequence_id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['index', 'Unnamed: 0', 'assignment_id', 'sequence_id', 'user_id',\n",
       "       'ARRS', 'problem_id', 'sequence_opp', 'assignment_opp',\n",
       "       'ARRS-check(oneMeansFirstWeek-TwomeansOneweekLater-threemeanstwoweeksafterthat)',\n",
       "       'correct', 'hint_count', 'attempt_count', 'cluster', 'pretest',\n",
       "       'posttest', 'first_three', 'avg_initial_#problems_to_master',\n",
       "       'avg_first_reassess', 'slip', 'guess', 'post_id', 'skill_post',\n",
       "       'problem_diff'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 277,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'sequence_id': 0.20774200496217482,\n",
       " 'user_id': 0.06585628719728451,\n",
       " 'sequence_opp': 0.0005732643804131114,\n",
       " 'assignment_opp': 0.00016423504878454825,\n",
       " 'hint_count': 8.371767356141203e-06,\n",
       " 'attempt_count': 2.848303575504844e-05,\n",
       " 'cluster': 4.034430795925396e-05,\n",
       " 'pretest': 0.002761210557559683,\n",
       " 'first_three': 0.1126568564774647,\n",
       " 'avg_initial_#problems_to_master': 0.07936126839886141,\n",
       " 'problem_diff': 0.0008080315691736358,\n",
       " 'guess': 0.007969770309146536,\n",
       " 'slip': 0.004783468042680805}"
      ]
     },
     "execution_count": 258,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "mean_imp={}\n",
    "for key in score.keys():\n",
    "    mean_imp[key]=mean(score[key])\n",
    "mean_imp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10,)\n",
      "Feature ranking:\n",
      "['sequence_id', 0.20055686949096446]\n",
      "['user_id', 0.18453835263925342]\n",
      "['sequence_opp', 0.17094996398939494]\n",
      "['assignment_opp', 0.16282645265113505]\n",
      "['pretest', 0.0692046962976334]\n",
      "['first_three', 0.059137671739338434]\n",
      "['avg_initial_#problems_to_master', 0.04628821003315502]\n",
      "['problem_diff', 0.03947221916448176]\n",
      "['guess', 0.024581326215313275]\n",
      "['slip', 0.021482101395220752]\n",
      "['sequence_id', 'user_id', 'sequence_opp', 'assignment_opp', 'pretest', 'first_three', 'avg_initial_#problems_to_master', 'problem_diff', 'guess', 'slip']\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "forest = RF_clf\n",
    "forest.fit(X_train3, y_train3)\n",
    "\n",
    "importances = forest.feature_importances_\n",
    "idx = np.arange(0, X_train3.shape[1]) #create an index array, with the number of features\n",
    "\n",
    "features_to_keep=idx[importances > .01]\n",
    "std = np.std([tree.feature_importances_ for tree in forest.estimators_],\n",
    "             axis=0)\n",
    "indices = np.argsort(importances)[::-1]\n",
    "print (features_to_keep.shape)\n",
    "feature_list=[]\n",
    "feature_dict={}\n",
    "print(\"Feature ranking:\")\n",
    "for f in range(10):\n",
    "    print([X_train3.iloc[:,features_to_keep].columns[f], importances[indices[f]]])\n",
    "    feature_dict[ X_train3.iloc[:,features_to_keep].columns[f]]=importances[indices[f]]\n",
    "    feature_list.append(X_train3.iloc[:,features_to_keep].columns[f])\n",
    "# Plot the feature importances of the forest\n",
    "# plt.figure()\n",
    "# plt.title(\"Feature importances\")\n",
    "# plt.bar(range(10), importances[indices],\n",
    "#        color=\"r\", yerr=std[indices], align=\"center\")\n",
    "# plt.xticks(range(10), indices)\n",
    "# plt.xlim([-1, X_train.shape[1]])\n",
    "# plt.show()\n",
    "print(feature_list)\n",
    "feat_importances = pd.Series(list(feature_dict.values()), index=list(feature_dict.keys()))\n",
    "feat_importances.nlargest(9).plot(kind='barh', color = ['b', 'r','g','c','y', 'chocolate','orange','brown', 'pink'], figsize=(12,8)).grid\n",
    "plt.rcParams.update({'font.size': 16})\n",
    "plt.xlabel(\"Proportion of splits on feature\", size=22)\n",
    "plt.ylabel(\"Features split on\", size=24)\n",
    "plt.title(\"Feature Importance in Pooled Model\", size=22)\n",
    "plt.savefig('Feature_p', format='png', dpi=400)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['sequence_id', 'user_id', 'sequence_opp', 'assignment_opp',\n",
       "       'hint_count', 'attempt_count', 'cluster', 'pretest', 'first_three',\n",
       "       'avg_initial_#problems_to_master', 'problem_diff', 'guess', 'slip'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 246,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train3.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(6,)\n",
      "Feature ranking:\n",
      "['sequence_id', 0.20055686949096446]\n",
      "['user_id', 0.18453835263925342]\n",
      "['first_three', 0.17094996398939494]\n",
      "['avg_initial_#problems_to_master', 0.16282645265113505]\n",
      "['guess', 0.0692046962976334]\n",
      "['slip', 0.059137671739338434]\n",
      "['sequence_id', 'user_id', 'first_three', 'avg_initial_#problems_to_master', 'guess', 'slip']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Feature Importance in Pooled Model')"
      ]
     },
     "execution_count": 248,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "forest = RF_clf\n",
    "forest.fit(X_train3, y_train3)\n",
    "\n",
    "importances = forest.feature_importances_\n",
    "idx = np.arange(0, X_train3.shape[1]) #create an index array, with the number of features\n",
    "\n",
    "features_to_keep=idx[importances > np.median(importances)]\n",
    "std = np.std([tree.feature_importances_ for tree in forest.estimators_],\n",
    "         \n",
    "             axis=0)\n",
    "indices = np.argsort(importances)[::-1]\n",
    "print (features_to_keep.shape)\n",
    "feature_list=[]\n",
    "feature_dict={}\n",
    "print(\"Feature ranking:\")\n",
    "for f in range(6):\n",
    "    print([X_train3.iloc[:,features_to_keep].columns[f], importances[indices[f]]])\n",
    "    feature_dict[ X_train3.iloc[:,features_to_keep].columns[f]]=importances[indices[f]]\n",
    "    feature_list.append(X_train3.iloc[:,features_to_keep].columns[f])\n",
    "# Plot the feature importances of the forest\n",
    "# plt.figure()\n",
    "# plt.title(\"Feature importances\")\n",
    "# plt.bar(range(10), importances[indices],\n",
    "#        color=\"r\", yerr=std[indices], align=\"center\")\n",
    "# plt.xticks(range(10), indices)\n",
    "# plt.xlim([-1, X_train.shape[1]])\n",
    "# plt.show()\n",
    "print(feature_list)\n",
    "feat_importances = pd.Series(list(feature_dict.values()), index=list(feature_dict.keys()))\n",
    "feat_importances.nlargest(9).plot(kind='barh', color = ['b', 'r','g','c','y', 'chocolate','orange','brown', 'pink'], figsize=(12,8)).grid\n",
    "plt.rcParams.update({'font.size': 16})\n",
    "plt.xlabel(\"Proportion of splits on feature\", size=22)\n",
    "plt.ylabel(\"Features split on\", size=24)\n",
    "plt.title(\"Feature Importance in Pooled Model\", size=22)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.14498668, 0.14402782, 0.0406959 , 0.03880364, 0.01266626,\n",
       "       0.01812017, 0.01764068, 0.03188985, 0.16925082, 0.16470406,\n",
       "       0.08379412, 0.07348103, 0.05993897])"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "importances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "RF_clf4 =RandomForestClassifier(max_depth=best_max_depth_rf4, n_estimators=best_n_estimators_rf4, random_state=42, oob_score=True)\n",
    "RF_clf4.fit(X_train3, y_train4.values.ravel())\n",
    "print(\"Random Forest model score: %.3f\" % RF_clf4.score(X_test3, y_test4.values.ravel()))\n",
    "RF_y_pred=RF_clf4.predict(X_test3)                         \n",
    "print(confusion_matrix(y_test4.values, RF_y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rfr_grid, rfr_clf=rfr_model(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_n_estimators_rf=rfr_grid.best_params_[\"n_estimators\"]\n",
    "best_max_depth_rf=rfr_grid.best_params_[\"max_depth\"]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "RF_clf =RandomForestClassifier(max_depth=best_max_depth_rf, n_estimators=best_n_estimators_rf, random_state=42, oob_score=True)\n",
    "RF_clf.fit(X_train, y_train.values.ravel())\n",
    "print(\"Random Forest model score: %.3f\" % RF_clf.score(X_test, y_test.values.ravel()))\n",
    "RF_y_pred=RF_clf.predict(X_test)                         \n",
    "print(confusion_matrix(y_test.values, RF_y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_test.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_score=RF_clf.predict_proba(X_test.values)\n",
    "y_score=y_score[:,1]\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_score)\n",
    "roc_auc = roc_auc_score(y_test, y_score)\n",
    "print('AUC: %.3f' % roc_auc)\n",
    "# Plot ROC curve\n",
    "plt.figure(figsize=(16, 12))\n",
    "plt.plot(fpr, tpr, label='ROC curve (area = %0.3f)' % roc_auc)\n",
    "plt.plot([0, 1], [0, 1], 'k--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.0])\n",
    "plt.xlabel('False Positive Rate (1 - Specificity)', size=16)\n",
    "plt.ylabel('True Positive Rate (Sensitivity)', size=16)\n",
    "plt.title('ROC Curve RF Classifier', size=20)\n",
    "plt.legend(fontsize=14);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rfr_grid2, rfr_clf2=rfr_model(X_train, y_train2)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_n_estimators_rf2=rfr_grid2.best_params_[\"n_estimators\"]\n",
    "best_max_depth_rf2=rfr_grid2.best_params_[\"max_depth\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "RF_clf2 =RandomForestClassifier(max_depth=best_max_depth_rf2, n_estimators=best_n_estimators_rf2, random_state=42, oob_score=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "RF_clf2.fit(X_train, y_train2.values.ravel())\n",
    "print(\"Random Forest model score: %.3f\" % RF_clf.score(X_test2, y_test2.values.ravel()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "RF_y_pred=RF_clf2.predict(X_test2)                         \n",
    "print(confusion_matrix(y_test2.values, RF_y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_score=RF_clf2.predict_proba(X_test2.values)\n",
    "y_score=y_score[:,1]\n",
    "fpr, tpr, thresholds = roc_curve(y_test2, y_score)\n",
    "roc_auc = roc_auc_score(y_test2, y_score)\n",
    "print('AUC: %.3f' % roc_auc)\n",
    "# Plot ROC curve\n",
    "plt.figure(figsize=(16, 12))\n",
    "plt.plot(fpr, tpr, label='ROC curve (area = %0.3f)' % roc_auc)\n",
    "plt.plot([0, 1], [0, 1], 'k--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.0])\n",
    "plt.xlabel('False Positive Rate (1 - Specificity)', size=16)\n",
    "plt.ylabel('True Positive Rate (Sensitivity)', size=16)\n",
    "plt.title('ROC Curve RF Classifier', size=20)\n",
    "plt.legend(fontsize=14);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "forest = RF_clf\n",
    "forest.fit(X_train, y_train)\n",
    "\n",
    "importances = forest.feature_importances_\n",
    "idx = np.arange(0, X_train.shape[1]) #create an index array, with the number of features\n",
    "\n",
    "features_to_keep=idx[importances > np.median(importances)]\n",
    "std = np.std([tree.feature_importances_ for tree in forest.estimators_],\n",
    "             axis=0)\n",
    "indices = np.argsort(importances)[::-1]\n",
    "print (features_to_keep.shape)\n",
    "feature_list=[]\n",
    "feature_dict={}\n",
    "print(\"Feature ranking:\")\n",
    "for f in range(5):\n",
    "    print([X_train.iloc[:,features_to_keep].columns[f], importances[indices[f]]])\n",
    "    feature_dict[ X_train.iloc[:,features_to_keep].columns[f]]=importances[indices[f]]\n",
    "    feature_list.append(X_train.iloc[:,features_to_keep].columns[f])\n",
    "# Plot the feature importances of the forest\n",
    "# plt.figure()\n",
    "# plt.title(\"Feature importances\")\n",
    "# plt.bar(range(10), importances[indices],\n",
    "#        color=\"r\", yerr=std[indices], align=\"center\")\n",
    "# plt.xticks(range(10), indices)\n",
    "# plt.xlim([-1, X_train.shape[1]])\n",
    "# plt.show()\n",
    "print(feature_list)\n",
    "feat_importances = pd.Series(list(feature_dict.values()), index=list(feature_dict.keys()))\n",
    "feat_importances.nlargest(9).plot(kind='barh', color = ['b', 'r','g','c','y', 'chocolate','orange','brown', 'pink'], figsize=(12,8)).grid\n",
    "plt.rcParams.update({'font.size': 16})\n",
    "plt.xlabel(\"Proportion of splits on feature\", size=22)\n",
    "plt.ylabel(\"Features split on\", size=24)\n",
    "plt.title(\"Feature Importance in Pooled Model\", size=22)\n",
    "plt.savefig('Feature_p', format='png', dpi=400)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "forest = RF_clf2\n",
    "forest.fit(X_train2, y_train2)\n",
    "\n",
    "importances = forest.feature_importances_\n",
    "idx = np.arange(0, X_train.shape[1]) #create an index array, with the number of features\n",
    "\n",
    "features_to_keep=idx[importances > np.median(importances)]\n",
    "std = np.std([tree.feature_importances_ for tree in forest.estimators_],\n",
    "             axis=0)\n",
    "indices = np.argsort(importances)[::-1]\n",
    "print (features_to_keep.shape)\n",
    "feature_list=[]\n",
    "feature_dict={}\n",
    "print(\"Feature ranking:\")\n",
    "for f in range(5):\n",
    "    print([X_train.iloc[:,features_to_keep].columns[f], importances[indices[f]]])\n",
    "    feature_dict[ X_train.iloc[:,features_to_keep].columns[f]]=importances[indices[f]]\n",
    "    feature_list.append(X_train.iloc[:,features_to_keep].columns[f])\n",
    "# Plot the feature importances of the forest\n",
    "# plt.figure()\n",
    "# plt.title(\"Feature importances\")\n",
    "# plt.bar(range(10), importances[indices],\n",
    "#        color=\"r\", yerr=std[indices], align=\"center\")\n",
    "# plt.xticks(range(10), indices)\n",
    "# plt.xlim([-1, X_train.shape[1]])\n",
    "# plt.show()\n",
    "print(feature_list)\n",
    "feat_importances = pd.Series(list(feature_dict.values()), index=list(feature_dict.keys()))\n",
    "feat_importances.nlargest(9).plot(kind='barh', color = ['b', 'r','g','c','y', 'chocolate','orange','brown', 'pink'], figsize=(12,8)).grid\n",
    "plt.rcParams.update({'font.size': 16})\n",
    "plt.xlabel(\"Proportion of splits on feature\", size=22)\n",
    "plt.ylabel(\"Features split on\", size=24)\n",
    "plt.title(\"Feature Importance in Pooled Model\", size=22)\n",
    "plt.savefig('Feature_p', format='png', dpi=400)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "check[check['sequence_id']==27]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "skill_group=check.groupby('sequence_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "check.head(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "skill_group.last()"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Miranda MLinEdFinalProject.ipynb",
   "provenance": [
    {
     "file_id": "1txB-VTCTE1oCS9TPLs7xs12_kD1bw1ad",
     "timestamp": 1588044375669
    }
   ]
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
