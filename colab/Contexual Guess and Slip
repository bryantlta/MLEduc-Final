{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Contexual Guess and Slip","provenance":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"C6Bi_jOi42CI","colab_type":"text"},"source":["**Notes (from messing with merging):**\n","- user_id, problem_id - don't match\n","- assignment_id - don't match\n","- doesn't really make sense to merge these?\n","- sequence_ids match between the two different datasets\n","\n","**Some Thoughts**\n","- Can we learn about each student or skill from the assistments dataset and apply that information to the arrs dataset?\n"]},{"cell_type":"markdown","metadata":{"id":"jHfpFHDWuOsq","colab_type":"text"},"source":["# Contextual Guess and Slip (kinda)\n","**Things I did:**\n","1. Randomly removed 200,000 rows from the assistments dataset\n","2. Ran BKT on this subset and saved the guess and slip values for each skill in skills_dict\n","3. Sorted the remaining assistments data by order_id and removed na skill names\n","4. find_guess_slip(Data) defined below \n","5. contextual_guess_slip(skills) takes all the skills from one user and runs find_guess_slip on each problem for that skill. \n","6. problem_dict contains the average guess and slip values for each problem \n","\n","**Notes:**\n","- this is super inefficient - it takes FOREVER to run\n","- **made some pretty bad assumptions for right now** (esp. in find_guess_slip --> for each hint that the student uses, if they got the answer wrong, subtract .2 from the slip rate and if they got the answer correct, add .2 to the guess rate.\n","- If the skill doesn't exist in skill_dict --> uses slip=1, guess=0 for base values\n","- When I ran bkt on the skills for the subset I had some issues I couldn't figure out so if len(steps) [not even sure what this means really] is less than 2, I just skipped it "]},{"cell_type":"code","metadata":{"id":"rFsyDiQJpzjV","colab_type":"code","colab":{}},"source":["import numpy as np\n","import pandas as pd\n","import collections\n","import requests\n","import io\n","import sys\n","sys.path.append('../')\n","from copy import deepcopy"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YG6-BMhRj88M","colab_type":"code","colab":{}},"source":["#Merging Stuff - didn't really work \n","\n","# merged = assistments.merge(arrs, how=\"right\", on=[\"problem_id\"]).dropna(subset=[\"problem_id\", \"sequence_id_x\"])\n","# merged[[\"sequence_id_x\", \"sequence_id_y\"]]\n","# merged[merged[\"sequence_id_y\"] == 5962][[\"sequence_id_x\", \"sequence_id_y\", \"skill_name\"]][\"skill_name\"].unique()\n","\n","# merged[merged[\"sequence_id_y\"] == 5962][merged[\"sequence_id_x\"]!=merged[\"sequence_id_y\"]][[\"sequence_id_x\", \"sequence_id_y\", \"skill_name\"]]\n","# merged[merged[\"sequence_id_x\"]!=merged[\"sequence_id_y\"]][[\"sequence_id_x\", \"sequence_id_y\"]]\n","# m = assistments.merge(arrs, how=\"inner\", left_on=[\"user_id\", \"problem_id\"], right_on=[\"user_id\", \"problem_id\"])\n","# m = m.sort_values(\"order_id\")\n","# m[[\"correct_x\", \"correct_y\"]]\n","# # m.head()\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YnESdZwUu5eY","colab_type":"code","outputId":"cd2f142d-29f5-4eb2-fc1d-698f65aa060e","executionInfo":{"status":"ok","timestamp":1589389442545,"user_tz":420,"elapsed":24959,"user":{"displayName":"Bijal Patel","photoUrl":"","userId":"06659871819516162881"}},"colab":{"base_uri":"https://localhost:8080/","height":216}},"source":["% pip install git+https://github.com/CAHLR/pyBKT.git\n","from pyBKT.generate import synthetic_data, random_model_uni\n","from pyBKT.fit import EM_fit\n","from pyBKT.util.data_helper import assistments_data"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Collecting git+https://github.com/CAHLR/pyBKT.git\n","  Cloning https://github.com/CAHLR/pyBKT.git to /tmp/pip-req-build-x63iqvdj\n","  Running command git clone -q https://github.com/CAHLR/pyBKT.git /tmp/pip-req-build-x63iqvdj\n","Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from pyBKT==1.0) (1.18.4)\n","Building wheels for collected packages: pyBKT\n","  Building wheel for pyBKT (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pyBKT: filename=pyBKT-1.0-cp36-cp36m-linux_x86_64.whl size=1260498 sha256=78159aca17664f73aab4dcfc0d257c2b522d46c963c07367c4b6dbab284880cf\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-3xsp1wrq/wheels/db/9c/7f/7f182d8cd2ba25e21f955dc264e544238eb50dcc41287ceffe\n","Successfully built pyBKT\n","Installing collected packages: pyBKT\n","Successfully installed pyBKT-1.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"k1TRxLbiqDJ0","colab_type":"code","outputId":"750dcdd7-a943-40f5-c916-30c9ca1d3410","executionInfo":{"status":"ok","timestamp":1589389447778,"user_tz":420,"elapsed":29033,"user":{"displayName":"Bijal Patel","photoUrl":"","userId":"06659871819516162881"}},"colab":{"base_uri":"https://localhost:8080/","height":70}},"source":["# arrs = pd.read_csv(\"ARRS_data.csv\")\n","url = \"https://drive.google.com/uc?export=download&id=0B3f_gAH-MpBmUmNJQ3RycGpJM0k\"\n","s = requests.get(url).content\n","assistments = pd.read_csv(io.StringIO(s.decode('latin')))\n","# arrs.head()\n","# arrs.sort_values([\"user_id\",\"problemlog_id\"])\n"],"execution_count":5,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py:2718: DtypeWarning: Columns (17) have mixed types.Specify dtype option on import or set low_memory=False.\n","  interactivity=interactivity, compiler=compiler, result=result)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"AYf12tPI3qRA","colab_type":"code","outputId":"8768f032-7c29-4730-cdba-c18aec350ac5","executionInfo":{"status":"ok","timestamp":1589389447779,"user_tz":420,"elapsed":27585,"user":{"displayName":"Bijal Patel","photoUrl":"","userId":"06659871819516162881"}},"colab":{"base_uri":"https://localhost:8080/","height":33}},"source":["assistments.shape"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(401756, 30)"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"DbZLAp9m_tTW","colab_type":"code","colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7Ci8vIE1heCBhbW91bnQgb2YgdGltZSB0byBibG9jayB3YWl0aW5nIGZvciB0aGUgdXNlci4KY29uc3QgRklMRV9DSEFOR0VfVElNRU9VVF9NUyA9IDMwICogMTAwMDsKCmZ1bmN0aW9uIF91cGxvYWRGaWxlcyhpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IHN0ZXBzID0gdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKTsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIC8vIENhY2hlIHN0ZXBzIG9uIHRoZSBvdXRwdXRFbGVtZW50IHRvIG1ha2UgaXQgYXZhaWxhYmxlIGZvciB0aGUgbmV4dCBjYWxsCiAgLy8gdG8gdXBsb2FkRmlsZXNDb250aW51ZSBmcm9tIFB5dGhvbi4KICBvdXRwdXRFbGVtZW50LnN0ZXBzID0gc3RlcHM7CgogIHJldHVybiBfdXBsb2FkRmlsZXNDb250aW51ZShvdXRwdXRJZCk7Cn0KCi8vIFRoaXMgaXMgcm91Z2hseSBhbiBhc3luYyBnZW5lcmF0b3IgKG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIgeWV0KSwKLy8gd2hlcmUgdGhlcmUgYXJlIG11bHRpcGxlIGFzeW5jaHJvbm91cyBzdGVwcyBhbmQgdGhlIFB5dGhvbiBzaWRlIGlzIGdvaW5nCi8vIHRvIHBvbGwgZm9yIGNvbXBsZXRpb24gb2YgZWFjaCBzdGVwLgovLyBUaGlzIHVzZXMgYSBQcm9taXNlIHRvIGJsb2NrIHRoZSBweXRob24gc2lkZSBvbiBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcCwKLy8gdGhlbiBwYXNzZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJldmlvdXMgc3RlcCBhcyB0aGUgaW5wdXQgdG8gdGhlIG5leHQgc3RlcC4KZnVuY3Rpb24gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpIHsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIGNvbnN0IHN0ZXBzID0gb3V0cHV0RWxlbWVudC5zdGVwczsKCiAgY29uc3QgbmV4dCA9IHN0ZXBzLm5leHQob3V0cHV0RWxlbWVudC5sYXN0UHJvbWlzZVZhbHVlKTsKICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5leHQudmFsdWUucHJvbWlzZSkudGhlbigodmFsdWUpID0+IHsKICAgIC8vIENhY2hlIHRoZSBsYXN0IHByb21pc2UgdmFsdWUgdG8gbWFrZSBpdCBhdmFpbGFibGUgdG8gdGhlIG5leHQKICAgIC8vIHN0ZXAgb2YgdGhlIGdlbmVyYXRvci4KICAgIG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSA9IHZhbHVlOwogICAgcmV0dXJuIG5leHQudmFsdWUucmVzcG9uc2U7CiAgfSk7Cn0KCi8qKgogKiBHZW5lcmF0b3IgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGJldHdlZW4gZWFjaCBhc3luYyBzdGVwIG9mIHRoZSB1cGxvYWQKICogcHJvY2Vzcy4KICogQHBhcmFtIHtzdHJpbmd9IGlucHV0SWQgRWxlbWVudCBJRCBvZiB0aGUgaW5wdXQgZmlsZSBwaWNrZXIgZWxlbWVudC4KICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIG91dHB1dCBkaXNwbGF5LgogKiBAcmV0dXJuIHshSXRlcmFibGU8IU9iamVjdD59IEl0ZXJhYmxlIG9mIG5leHQgc3RlcHMuCiAqLwpmdW5jdGlvbiogdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKSB7CiAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXRJZCk7CiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gZmFsc2U7CgogIGNvbnN0IG91dHB1dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvdXRwdXRJZCk7CiAgb3V0cHV0RWxlbWVudC5pbm5lckhUTUwgPSAnJzsKCiAgY29uc3QgcGlja2VkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgcmVzb2x2ZShlLnRhcmdldC5maWxlcyk7CiAgICB9KTsKICB9KTsKCiAgY29uc3QgY2FuY2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgaW5wdXRFbGVtZW50LnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2FuY2VsKTsKICBjYW5jZWwudGV4dENvbnRlbnQgPSAnQ2FuY2VsIHVwbG9hZCc7CiAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBjYW5jZWwub25jbGljayA9ICgpID0+IHsKICAgICAgcmVzb2x2ZShudWxsKTsKICAgIH07CiAgfSk7CgogIC8vIENhbmNlbCB1cGxvYWQgaWYgdXNlciBoYXNuJ3QgcGlja2VkIGFueXRoaW5nIGluIHRpbWVvdXQuCiAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9LCBGSUxFX0NIQU5HRV9USU1FT1VUX01TKTsKICB9KTsKCiAgLy8gV2FpdCBmb3IgdGhlIHVzZXIgdG8gcGljayB0aGUgZmlsZXMuCiAgY29uc3QgZmlsZXMgPSB5aWVsZCB7CiAgICBwcm9taXNlOiBQcm9taXNlLnJhY2UoW3BpY2tlZFByb21pc2UsIHRpbWVvdXRQcm9taXNlLCBjYW5jZWxQcm9taXNlXSksCiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdzdGFydGluZycsCiAgICB9CiAgfTsKCiAgaWYgKCFmaWxlcykgewogICAgcmV0dXJuIHsKICAgICAgcmVzcG9uc2U6IHsKICAgICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICAgIH0KICAgIH07CiAgfQoKICBjYW5jZWwucmVtb3ZlKCk7CgogIC8vIERpc2FibGUgdGhlIGlucHV0IGVsZW1lbnQgc2luY2UgZnVydGhlciBwaWNrcyBhcmUgbm90IGFsbG93ZWQuCiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gdHJ1ZTsKCiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICBsaS5hcHBlbmQoc3BhbihmaWxlLm5hbWUsIHtmb250V2VpZ2h0OiAnYm9sZCd9KSk7CiAgICBsaS5hcHBlbmQoc3BhbigKICAgICAgICBgKCR7ZmlsZS50eXBlIHx8ICduL2EnfSkgLSAke2ZpbGUuc2l6ZX0gYnl0ZXMsIGAgKwogICAgICAgIGBsYXN0IG1vZGlmaWVkOiAkewogICAgICAgICAgICBmaWxlLmxhc3RNb2RpZmllZERhdGUgPyBmaWxlLmxhc3RNb2RpZmllZERhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbi9hJ30gLSBgKSk7CiAgICBjb25zdCBwZXJjZW50ID0gc3BhbignMCUgZG9uZScpOwogICAgbGkuYXBwZW5kQ2hpbGQocGVyY2VudCk7CgogICAgb3V0cHV0RWxlbWVudC5hcHBlbmRDaGlsZChsaSk7CgogICAgY29uc3QgZmlsZURhdGFQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7CiAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5yZXN1bHQpOwogICAgICB9OwogICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7CiAgICB9KTsKICAgIC8vIFdhaXQgZm9yIHRoZSBkYXRhIHRvIGJlIHJlYWR5LgogICAgbGV0IGZpbGVEYXRhID0geWllbGQgewogICAgICBwcm9taXNlOiBmaWxlRGF0YVByb21pc2UsCiAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgYWN0aW9uOiAnY29udGludWUnLAogICAgICB9CiAgICB9OwoKICAgIC8vIFVzZSBhIGNodW5rZWQgc2VuZGluZyB0byBhdm9pZCBtZXNzYWdlIHNpemUgbGltaXRzLiBTZWUgYi82MjExNTY2MC4KICAgIGxldCBwb3NpdGlvbiA9IDA7CiAgICB3aGlsZSAocG9zaXRpb24gPCBmaWxlRGF0YS5ieXRlTGVuZ3RoKSB7CiAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGZpbGVEYXRhLmJ5dGVMZW5ndGggLSBwb3NpdGlvbiwgTUFYX1BBWUxPQURfU0laRSk7CiAgICAgIGNvbnN0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoZmlsZURhdGEsIHBvc2l0aW9uLCBsZW5ndGgpOwogICAgICBwb3NpdGlvbiArPSBsZW5ndGg7CgogICAgICBjb25zdCBiYXNlNjQgPSBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY2h1bmspKTsKICAgICAgeWllbGQgewogICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICBhY3Rpb246ICdhcHBlbmQnLAogICAgICAgICAgZmlsZTogZmlsZS5uYW1lLAogICAgICAgICAgZGF0YTogYmFzZTY0LAogICAgICAgIH0sCiAgICAgIH07CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPQogICAgICAgICAgYCR7TWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCl9JSBkb25lYDsKICAgIH0KICB9CgogIC8vIEFsbCBkb25lLgogIHlpZWxkIHsKICAgIHJlc3BvbnNlOiB7CiAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgIH0KICB9Owp9CgpzY29wZS5nb29nbGUgPSBzY29wZS5nb29nbGUgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYiA9IHNjb3BlLmdvb2dsZS5jb2xhYiB8fCB7fTsKc2NvcGUuZ29vZ2xlLmNvbGFiLl9maWxlcyA9IHsKICBfdXBsb2FkRmlsZXMsCiAgX3VwbG9hZEZpbGVzQ29udGludWUsCn07Cn0pKHNlbGYpOwo=","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":70},"outputId":"803ede42-6a1c-4a26-85de-3c73302a56f6","executionInfo":{"status":"ok","timestamp":1589389503732,"user_tz":420,"elapsed":19554,"user":{"displayName":"Bijal Patel","photoUrl":"","userId":"06659871819516162881"}}},"source":["#upload file named ARRS_data.csv\n","from google.colab import files\n","uploaded = files.upload()"],"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-83613396-00f1-40a4-b023-e6744597964c\" name=\"files[]\" multiple disabled />\n","     <output id=\"result-83613396-00f1-40a4-b023-e6744597964c\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Saving ARRS_data.csv to ARRS_data.csv\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_6mRLERh_UzD","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":191},"outputId":"c0d480ea-16a4-4998-db48-f1d3306981c7","executionInfo":{"status":"error","timestamp":1589390322555,"user_tz":420,"elapsed":469,"user":{"displayName":"Bijal Patel","photoUrl":"","userId":"06659871819516162881"}}},"source":["arrs = pd.read_csv(\"ARRS_data.csv\")\n","assistments = assistments.merge(arrs, how=\"inner\", on=\"problem_id\")\n","assistments"],"execution_count":2,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-faf31db9aca2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0marrs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ARRS_data.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0massistments\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0massistments\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"right\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mon\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"problem_id\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0massistments\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'pd' is not defined"]}]},{"cell_type":"code","metadata":{"id":"MNzGopdPcoOl","colab_type":"code","colab":{}},"source":["#choosing 200,000 random rows to sample and removing it from the assistments data to be used later\n","np.random.seed(12)\n","\n","remove_n = 200000\n","drop_indices = np.random.choice(assistments.index, remove_n, replace=False)\n","\n","assistments_subset = assistments.iloc[drop_indices].sort_values(\"order_id\")\n","assistments = assistments.drop(drop_indices)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mJL3d19-em8A","colab_type":"code","outputId":"142a4ee1-5677-42ae-9a99-c69a644725b1","executionInfo":{"status":"ok","timestamp":1589389686451,"user_tz":420,"elapsed":19119,"user":{"displayName":"Bijal Patel","photoUrl":"","userId":"06659871819516162881"}},"colab":{"base_uri":"https://localhost:8080/","height":115}},"source":["skills_dict = collections.Counter()\n","assistments_subset = assistments_subset.dropna(subset=[\"skill_name\"])\n","skills = assistments_subset[\"skill_name\"].unique()\n","\n","for skill in skills:\n","  # print(\"\\n Skill: \", skill)\n","\n","  num_resources = 0\n","\n","  num_fit_initializations = 5\n","\n","  skill_df = assistments_subset[(assistments_subset[\"skill_name\"]==skill)]\n","  skill_df.loc[:, \"correct_x\"] += 1\n","  df3=skill_df[skill_df[\"correct_x\"]!=3]\n","  data=df3[\"correct_x\"].values\n","\n","  steps=df3.groupby(\"user_id_x\")[\"problem_id\"].count().values\n","  lengths=np.copy(steps)\n","  if len(steps) < 2:\n","    continue\n","  steps[0]=0\n","  steps[1]=1\n","  for i in range(2,steps.size):\n","      steps[i]=steps[i-1]+lengths[i-2]\n","\n","  starts=np.delete(steps,0)\n","\n","  resources=[1]*data.size\n","  resource=np.asarray(resources)\n","  stateseqs=np.copy(resource)\n","  lengths=np.resize(lengths,lengths.size-1)\n","  Data={}\n","  Data[\"stateseqs\"]=np.asarray([stateseqs],dtype='int32')\n","  Data[\"data\"]=np.asarray([data],dtype='int32')\n","  Data[\"starts\"]=np.asarray(starts)\n","  Data[\"lengths\"]=np.asarray(lengths)\n","  Data[\"resources\"]=resource\n","\n","  num_gs = 1 #number of guess/slip classes\n","  num_learns = 1 #number of learning rates\n","\n","  # print('fitting! each dot is a new EM initialization')\n","\n","  best_likelihood = float(\"-inf\")\n","\n","  for i in range(num_fit_initializations):\n","    fitmodel = random_model_uni.random_model_uni(num_learns, num_gs) # include this line to randomly set initial param values\n","    (fitmodel, log_likelihoods) = EM_fit.EM_fit(fitmodel, Data)\n","    if(log_likelihoods[-1] > best_likelihood):\n","      best_likelihood = log_likelihoods[-1]\n","      best_model = fitmodel\n","\n","  skills_dict[skill] = (best_model['guesses'][0], best_model['slips'][0])"],"execution_count":16,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:966: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self.obj[item] = s\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"0wly86ZTm4MB","colab_type":"code","outputId":"f3b30c26-552c-40ca-afc3-2c42642bd554","executionInfo":{"status":"ok","timestamp":1589389691633,"user_tz":420,"elapsed":511,"user":{"displayName":"Bijal Patel","photoUrl":"","userId":"06659871819516162881"}},"colab":{"base_uri":"https://localhost:8080/","height":53}},"source":["\n","print(skills_dict)"],"execution_count":17,"outputs":[{"output_type":"stream","text":["Counter({'Prime Number': (0.6151634829884872, 0.030870532593492657), 'Scale Factor': (0.5169774824537945, 0.10774711863278125), 'Addition Whole Numbers': (0.45826074455548, 0.05132217454429141), 'Multiplication Fractions': (0.42899168746422084, 0.05451652210628812), 'Distributive Property': (0.38121728052080595, 0.10087178568469155), 'Absolute Value': (0.37572270247851747, 0.10160216293778145), 'Order of Operations All': (0.3078987477759644, 0.04002112109564634), 'Subtraction Whole Numbers': (0.297902616026072, 0.09829135817952434), 'Order of Operations +,-,/,* () positive reals': (0.2854662572377942, 0.05576699270040782), 'Least Common Multiple': (0.2673059393362289, 0.22501394085349974), 'Addition and Subtraction Positive Decimals': (0.24291109084852322, 0.15694211128453034), 'Proportion': (0.23466739500853726, 0.06686884687419903), 'Division Fractions': (0.23446942429818285, 0.17031197379656438), 'Divisibility Rules': (0.20968654467774717, 0.2402003430370951), 'Percent Of': (0.20522936705782538, 0.1464091686563712), 'Conversion of Fraction Decimals Percents': (0.1957749071087442, 0.2734655162411267), 'Addition and Subtraction Fractions': (6.145669056822975e-25, 0.22820769832359775), 'Area Circle': (0.0, 1.0), 'Multiplication and Division Integers': (0.0, 6.730341186055962e-17)})\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Os2DaO4Li-4y","colab_type":"code","colab":{}},"source":["#transforming assistments dataframe to fit new model\n","assistments = assistments.sort_values(\"order_id\")\n","assistments = assistments.dropna(subset=[\"skill_name\"])\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"y51s8qStUZjm","colab_type":"code","colab":{}},"source":["# this function takes in Data a dictionary defined in the contextual_guess_slip function\n","# using - opportunity count\n","def find_guess_slip(Data):\n","  responses = Data[\"data\"][0] # list of responses (i.e. correct column) for a problem_id\n","  skill = Data[\"skill\"]\n","  for resp in responses:\n","    if skill in skills_dict:\n","      guess, slip = skills_dict[skill] \n","    else:\n","      slip = 1\n","      guess = 0\n","    if resp == 1:\n","      slip -= Data[\"hint\"] * .02 # for every hint use, subtract .2 from the base slip value\n","    else:\n","      guess += Data[\"hint\"] * .02 # for every hint use, add .2 from the base guess value\n","  slip = max(0, slip)\n","  guess = min(guess, 1)\n","  return [slip, guess]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"O-5wANN7tieu","colab_type":"code","colab":{}},"source":["\n","# skills = assistments[\"skill_name\"].unique()\n","def contextual_guess_slip(skills, problem_dict):\n","  for skill in skills:\n","    \n","    # print(\"\\n Skill: \", skill)\n","    num_resources = 0\n","\n","    num_fit_initializations = 5\n","\n","    skill_df = assistments[(assistments[\"skill_name\"]==skill)]\n","    skill_df.loc[:, \"correct\"] += 1\n","    df3=skill_df[skill_df[\"attempt_count\"]!=0]\n","    problems = df3[\"problem_id\"].to_list()\n","    steps=[0,0]\n","    # print(steps)\n","    # print(df3.groupby(\"user_id\").agg(lambda x: [i for i in x])[\"problem_id\"])\n","    # lengths=np.copy(steps)\n","    steps[0]=0\n","    steps[1]=1\n","    # for i in range(2,len(steps)):\n","    #     steps[i]=steps[i-1]+lengths[i-2]\n","\n","    # step = steps[:r]\n","    # starts=np.delete(steps,0)\n","    # print(starts)\n","    starts=[1]\n","    for i in range(len(problems)):\n","      # print(\"\\n\", problems[i])\n","      df_p = df3[df3[\"problem_id\"] == problems[i]]\n","      data=df_p[\"correct\"].values\n","      resources=[1]*data.size\n","      resource=np.asarray(resources)\n","      stateseqs=np.copy(resource)\n","      # lengths=np.resize(lengths,lengths.size-1)\n","      lengths = [len(data)]\n","      Data={}\n","      Data[\"stateseqs\"]=np.asarray([stateseqs],dtype='int32')\n","      Data[\"data\"]=np.asarray([data],dtype='int32')\n","      # print(\"hint:\", df_p[\"hint_total\"].to_list()[0])\n","      Data[\"hint\"]=df_p[\"hint_total\"].to_list()[0]\n","      Data[\"skill\"] = skill\n","      Data[\"starts\"]=np.asarray(starts)\n","      Data[\"lengths\"]=np.asarray(lengths)\n","      Data[\"resources\"]=resource\n","\n","      num_gs = 1 #number of guess/slip classes\n","      num_learns = 1 #number of learning rates\n","\n","      # print('fitting! each dot is a new EM initialization')\n","\n","      best_likelihood = float(\"-inf\")\n","\n","      # for i in range(num_fit_initializations):\n","      #   fitmodel = random_model_uni.random_model_uni(num_learns, num_gs) # include this line to randomly set initial param values\n","      #   (fitmodel, log_likelihoods) = EM_fit.EM_fit(fitmodel, Data)\n","      #   if(log_likelihoods[-1] > best_likelihood):\n","      #     best_likelihood = log_likelihoods[-1]\n","      #     best_model = fitmodel\n","\n","\n","      best_model = find_guess_slip(Data)\n","      slip, guess = best_model\n","      if problems[i] in problem_dict:\n","        # print(problem_dict[problems[i]])\n","        s, g = problem_dict[problems[i]]\n","        problem_dict[problems[i]] = ((slip + s)/2 ,(guess + g)/2)\n","      else:\n","        problem_dict[problems[i]] = (slip, guess)\n","      # print('')\n","      # print('\\tlearned')\n","      # print('prior\\t%.4f' % (best_model[\"pi_0\"][1][0]))\n","      # for r in range(num_learns):\n","      #     print('learn%d\\t%.4f' % (r+1, best_model['As'][r, 1, 0].squeeze()))\n","      # for s in range(num_gs):\n","      #     print('guess%d\\t%.4f' % (s+1, best_model[1]))\n","      # for s in range(num_gs):\n","      #     print('slip%d\\t%.4f' % (s+1, best_model[0]))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"n2gMPZfXiR5N","colab_type":"code","outputId":"52a5a31c-76dd-4b97-d461-116c2e41bcf4","executionInfo":{"status":"error","timestamp":1589390292866,"user_tz":420,"elapsed":270,"user":{"displayName":"Bijal Patel","photoUrl":"","userId":"06659871819516162881"}},"colab":{"base_uri":"https://localhost:8080/","height":223}},"source":["problem_dict = collections.Counter()\n","users = np.random.choice(assistments[\"user_id\"].unique(), 20)\n","for user in users:\n","  user_df = assistments[assistments[\"user_id\"] == user]\n","  skills = user_df[\"skill_name\"].unique()\n","  contextual_guess_slip(skills, problem_dict)\n","print(problem_dict)"],"execution_count":1,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-97beb170ede1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mproblem_dict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcollections\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCounter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0musers\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchoice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0massistments\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"user_id\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0muser\u001b[0m \u001b[0;32min\u001b[0m \u001b[0musers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m   \u001b[0muser_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0massistments\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0massistments\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"user_id\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0muser\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0mskills\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0muser_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"skill_name\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'collections' is not defined"]}]},{"cell_type":"code","metadata":{"id":"ukSeLE02vAfJ","colab_type":"code","colab":{}},"source":["problem_vals = pd.DataFrame.from_dict(problem_dict, orient='index', columns=['slip', 'guess'])\n","problem_vals"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"i5YA68ghxVjB","colab_type":"code","outputId":"d6cd6782-73aa-4b4c-eb24-7ccbedc0622b","executionInfo":{"status":"ok","timestamp":1589326506854,"user_tz":420,"elapsed":518551,"user":{"displayName":"Adam Sherman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjxSt-Pb7Y4zheKlmE2mmUJUWpY3sI58sg4JPOx=s64","userId":"01860433487029173189"}},"colab":{"base_uri":"https://localhost:8080/","height":424}},"source":["problem_vals = problem_vals.reset_index().rename(columns={\"index\": \"problem_id\"})\n","problem_vals"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>problem_id</th>\n","      <th>slip</th>\n","      <th>guess</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>49104</td>\n","      <td>0.220713</td>\n","      <td>0.360778</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>49122</td>\n","      <td>0.218159</td>\n","      <td>0.358666</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>49146</td>\n","      <td>0.227127</td>\n","      <td>0.366081</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>56862</td>\n","      <td>0.227126</td>\n","      <td>0.366081</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>51447</td>\n","      <td>0.145166</td>\n","      <td>0.327597</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>14368</th>\n","      <td>76218</td>\n","      <td>0.238247</td>\n","      <td>0.451761</td>\n","    </tr>\n","    <tr>\n","      <th>14369</th>\n","      <td>76422</td>\n","      <td>0.238247</td>\n","      <td>0.391761</td>\n","    </tr>\n","    <tr>\n","      <th>14370</th>\n","      <td>76353</td>\n","      <td>0.238247</td>\n","      <td>0.431761</td>\n","    </tr>\n","    <tr>\n","      <th>14371</th>\n","      <td>76287</td>\n","      <td>0.198247</td>\n","      <td>0.391761</td>\n","    </tr>\n","    <tr>\n","      <th>14372</th>\n","      <td>76438</td>\n","      <td>0.238247</td>\n","      <td>0.451761</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>14373 rows × 3 columns</p>\n","</div>"],"text/plain":["       problem_id      slip     guess\n","0           49104  0.220713  0.360778\n","1           49122  0.218159  0.358666\n","2           49146  0.227127  0.366081\n","3           56862  0.227126  0.366081\n","4           51447  0.145166  0.327597\n","...           ...       ...       ...\n","14368       76218  0.238247  0.451761\n","14369       76422  0.238247  0.391761\n","14370       76353  0.238247  0.431761\n","14371       76287  0.198247  0.391761\n","14372       76438  0.238247  0.451761\n","\n","[14373 rows x 3 columns]"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"NNz3aJ9WP4XT","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5JFcKNKIP4mD","colab_type":"text"},"source":[""]},{"cell_type":"code","metadata":{"id":"TN_p1l5IA9_q","colab_type":"code","colab":{}},"source":["arrs = pd.read_csv(\"assistments.csv\")\n","arrs_with_gs = arrs.merge(problem_vals, how=\"inner\", on=\"problem_id\")\n","arrs_with_gs[[\"problem_id\", \"slip\", \"guess\"]]\n","arrs_with_gs.to_csv('assistmentsgs.csv')\n","files.download('assistmentsgs.csv')"],"execution_count":0,"outputs":[]}]}